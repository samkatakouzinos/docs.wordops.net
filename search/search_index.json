{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WordOps site - Community forum - F.A.Q Migration from EasyEngine v3 Getting started Commands Key Features \u00b6 Easy to install : One step automated installer with migration from EasyEngine v3 support Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL & Redis installation Custom Nginx build : Nginx 1.22.1 - TLS v1.3 Cloudflare HTTP/2 HPACK & Brotli support Up-to-date : PHP 7.2, 7.3, 7.4, 8.0, 8.1 & 8.2 - MariaDB 10.6 & Redis 7.0 Secured : Hardened WordPress security with strict Nginx location directives Powerful : Optimized Nginx configurations with multiple cache backends support SSL : Domain, Subdomain & Wildcard Let's Encrypt SSL certificates with DNS API support Modern : Strong ciphers_suite, modern TLS protocols and HSTS support (Grade A+ on ssllabs ) Monitoring : Live Nginx vhost traffic with ngx_vts_module and server monitoring with Netdata User Friendly : WordOps dashboard with server status/monitoring and tools ( demo ) Release cycle : WordOps stable releases are published in June and December. Getting Support \u00b6 If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum . If you think you have found an issue directly related to WordOps, please open an issue on the Github repository Credits \u00b6 EasyEngine This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Home"},{"location":"#key-features","text":"Easy to install : One step automated installer with migration from EasyEngine v3 support Fast deployment : Fast and automated WordPress, Nginx, PHP, MySQL & Redis installation Custom Nginx build : Nginx 1.22.1 - TLS v1.3 Cloudflare HTTP/2 HPACK & Brotli support Up-to-date : PHP 7.2, 7.3, 7.4, 8.0, 8.1 & 8.2 - MariaDB 10.6 & Redis 7.0 Secured : Hardened WordPress security with strict Nginx location directives Powerful : Optimized Nginx configurations with multiple cache backends support SSL : Domain, Subdomain & Wildcard Let's Encrypt SSL certificates with DNS API support Modern : Strong ciphers_suite, modern TLS protocols and HSTS support (Grade A+ on ssllabs ) Monitoring : Live Nginx vhost traffic with ngx_vts_module and server monitoring with Netdata User Friendly : WordOps dashboard with server status/monitoring and tools ( demo ) Release cycle : WordOps stable releases are published in June and December.","title":"Key Features"},{"location":"#getting-support","text":"If you do not find the informations you were looking for in our documentation, you can still ask your question on our Community Forum . If you think you have found an issue directly related to WordOps, please open an issue on the Github repository","title":"Getting Support"},{"location":"#credits","text":"EasyEngine This documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Credits"},{"location":"commands/","text":"WordOps commands \u00b6 The WordOps commands structure: wo ( command ) [ options ] Overview \u00b6 command feature example site create, update, delete, list sites wo site create site.tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site.tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show --nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"commands/#wordops-commands","text":"The WordOps commands structure: wo ( command ) [ options ]","title":"WordOps commands"},{"location":"commands/#overview","text":"command feature example site create, update, delete, list sites wo site create site.tld --wp stack install/remove WordOps server stacks wo stack install --nginx debug commands to do server level debugging wo debug site.tld --php clean clean Wordops cache backend wo clean --fastcgi info display server stack informations wo info --nginx log perform operation on logs wo log show --nginx secure manage WordOps backend authentification wo secure --auth maintenance perform server package updates wo maintenance update update WordOps wo update","title":"Overview"},{"location":"faq/","text":"F.A.Q \u00b6 General \u00b6 What is WordOps ? \u00b6 WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx . What are WordOps main features ? \u00b6 WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives. Which operating systems are supported by WordOps ? \u00b6 WordOps can be installed on Ubuntu LTS (Long Term Service) releases (18.04, 20.04 & 22.04). We do not officialy support Debian distribution (Debian 10/11 & Raspbian 10/11) because we are not able to run our continuous integration on it. Support for other linux distribution isn't planned. Technical \u00b6 Which version of PHP does WordOps support ? \u00b6 WordOps support PHP 8.0 (default) 7.2, 7.3, 7.4 & 8.1. What is the best caching solution for WordPress ? \u00b6 There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations: Cache backend command argument description fastcgi_cache --wpfc the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates redis-cache --wpredis powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (optional) wp-super-cache --wpsc basic solution based on a plugin which create and serve static html files. wp-rocket --wprocket solution based on a popular premium plugin with several additional features, compatible with Woocommerce and the most part of plugins cache-enabler --wpce solution based on an open-source plugin from keycdn How to access to WordOps Dashboard ? \u00b6 WordOps dashboard is available on https://YOUR.SERVER.IP:22222 or https://YOUR.SERVER.HOSTNAME:22222 What is the user/password of the web filemanager ? \u00b6 By default, user is admin and password too. After you logged in for the first time, you will have to change this password Why do I get warning from my web browser when opening WordOps backend ? \u00b6 At the moment, WordOps backend is secured with a self-signed SSL certificate, which provide the same level of encryption than any other certificate but do not come from a certificate authority. Your Web browser only warn you about the fact that the certificate wasn't issued by a trusted certificate authority. We are already working on adding the ability to secure WordOps backend with a letsencrypt SSL certificate. Does Nginx-wo support TLSv1.3 ? \u00b6 Yes, since the release v3.9.5.4, our Nginx package support TLSv1.3. Is WordOps Let's Encrypt stack compatible with Cloudflare CDN ? \u00b6 WordOps Let's Encrypt stack is fully compatible with Cloudflare CDN, and you can use Cloudflare DNS API to issue your certificates even if the domain is not pointed to your server IP. How to uninstall WordOps ? \u00b6 If you need/want to uninstall WordOps, you can use the following commands: Warning Make a backup of your databases before purging wordops packages # purge wordops packages (nginx, mysql, php etc..) wo stack purge --all # uninstall wordops wget -qO wo wops.cc && sudo bash wo --purge","title":"F.A.Q"},{"location":"faq/#faq","text":"","title":"F.A.Q"},{"location":"faq/#general","text":"","title":"General"},{"location":"faq/#what-is-wordops","text":"WordOps is a command line tool which ease server administration and WordPress deployment by providing the ability to setup an optimized LEMP stack (Nginx, PHP, MySQL) with simple command like wo stack install --nginx .","title":"What is WordOps ?"},{"location":"faq/#what-are-wordops-main-features","text":"WordOps not only installs and configures the packages needed to deploy a site (Nginx, PHP, MariaDB) but it also takes care of creating Nginx vhosts and the database, installing WordPress and even get a Let's Encrypt SSL certificate, all in one command line. It support multiple cache backend for WordPress, including Nginx fastcgi_cache, Redis cache (full-page cache + object cache) or wp-super-cache, based on a highly optimized Nginx configuration and an hardened security with strict location directives.","title":"What are WordOps main features ?"},{"location":"faq/#which-operating-systems-are-supported-by-wordops","text":"WordOps can be installed on Ubuntu LTS (Long Term Service) releases (18.04, 20.04 & 22.04). We do not officialy support Debian distribution (Debian 10/11 & Raspbian 10/11) because we are not able to run our continuous integration on it. Support for other linux distribution isn't planned.","title":"Which operating systems are supported by WordOps ?"},{"location":"faq/#technical","text":"","title":"Technical"},{"location":"faq/#which-version-of-php-does-wordops-support","text":"WordOps support PHP 8.0 (default) 7.2, 7.3, 7.4 & 8.1.","title":"Which version of PHP does WordOps support ?"},{"location":"faq/#what-is-the-best-caching-solution-for-wordpress","text":"There is no \"best solution\", because there are benefits/disadvantage for each caching solution and it depend on your usage. Here some informations: Cache backend command argument description fastcgi_cache --wpfc the simplest solution, because it do not rely on any plugin excepted nginx_helper used to purge cache after content updates redis-cache --wpredis powerful solution which support multi-server setup and it provide full-page cache in redis via Nginx + object-cache via Redis-Object-Cache plugin (optional) wp-super-cache --wpsc basic solution based on a plugin which create and serve static html files. wp-rocket --wprocket solution based on a popular premium plugin with several additional features, compatible with Woocommerce and the most part of plugins cache-enabler --wpce solution based on an open-source plugin from keycdn","title":"What is the best caching solution for WordPress ?"},{"location":"faq/#how-to-access-to-wordops-dashboard","text":"WordOps dashboard is available on https://YOUR.SERVER.IP:22222 or https://YOUR.SERVER.HOSTNAME:22222","title":"How to access to WordOps Dashboard ?"},{"location":"faq/#what-is-the-userpassword-of-the-web-filemanager","text":"By default, user is admin and password too. After you logged in for the first time, you will have to change this password","title":"What is the user/password of the web filemanager ?"},{"location":"faq/#why-do-i-get-warning-from-my-web-browser-when-opening-wordops-backend","text":"At the moment, WordOps backend is secured with a self-signed SSL certificate, which provide the same level of encryption than any other certificate but do not come from a certificate authority. Your Web browser only warn you about the fact that the certificate wasn't issued by a trusted certificate authority. We are already working on adding the ability to secure WordOps backend with a letsencrypt SSL certificate.","title":"Why do I get warning from my web browser when opening WordOps backend ?"},{"location":"faq/#does-nginx-wo-support-tlsv13","text":"Yes, since the release v3.9.5.4, our Nginx package support TLSv1.3.","title":"Does Nginx-wo support TLSv1.3 ?"},{"location":"faq/#is-wordops-lets-encrypt-stack-compatible-with-cloudflare-cdn","text":"WordOps Let's Encrypt stack is fully compatible with Cloudflare CDN, and you can use Cloudflare DNS API to issue your certificates even if the domain is not pointed to your server IP.","title":"Is WordOps Let's Encrypt stack compatible with Cloudflare CDN ?"},{"location":"faq/#how-to-uninstall-wordops","text":"If you need/want to uninstall WordOps, you can use the following commands: Warning Make a backup of your databases before purging wordops packages # purge wordops packages (nginx, mysql, php etc..) wo stack purge --all # uninstall wordops wget -qO wo wops.cc && sudo bash wo --purge","title":"How to uninstall WordOps ?"},{"location":"guides/","text":"Guides & Tutorials \u00b6 Official guides and Community contributions \u00b6 Here the list of guides about WordOps available in this documentation: Migration from EasyEngine v3 Issue and manage ssl certificates WordPress sites migration WordOps with DigitalOcean volumes Enable live kernel patching on Ubuntu Blogs & Tutorials \u00b6 English \u00b6 Install fast WordPress site on Ubuntu using WordOps - MARKO NTECH High traffic WordPress architecture using AWS Lightsail - David Vekslermkd Build a Super Optimized WordPress site with WordOps - Varma Host an incredibly fast WordPress website using WordOps on AWS Lightsail CDN Install WordPress Automatically on Ubuntu 20.04 using WordOps French \u00b6 WordOps - D\u00e9ployer WordPress avec Nginx simplement - Jesuisadmin Indonesian \u00b6 Cara Mudah Install WordPress di Ubuntu - Musa Amin Polish \u00b6 Instalacja WordPress na serwerze z WordOps \u2013 prosto, szybko i darmowo - Dominik Fajferek Add your own blog post about WordOps \u00b6 You wrote an article about WordOps ? Feel free to use the edit button at the right top and to open a pull request to add the link of your article.","title":"Overview"},{"location":"guides/#guides-tutorials","text":"","title":"Guides &amp; Tutorials"},{"location":"guides/#official-guides-and-community-contributions","text":"Here the list of guides about WordOps available in this documentation: Migration from EasyEngine v3 Issue and manage ssl certificates WordPress sites migration WordOps with DigitalOcean volumes Enable live kernel patching on Ubuntu","title":"Official guides and Community contributions"},{"location":"guides/#blogs-tutorials","text":"","title":"Blogs &amp; Tutorials"},{"location":"guides/#english","text":"Install fast WordPress site on Ubuntu using WordOps - MARKO NTECH High traffic WordPress architecture using AWS Lightsail - David Vekslermkd Build a Super Optimized WordPress site with WordOps - Varma Host an incredibly fast WordPress website using WordOps on AWS Lightsail CDN Install WordPress Automatically on Ubuntu 20.04 using WordOps","title":"English"},{"location":"guides/#french","text":"WordOps - D\u00e9ployer WordPress avec Nginx simplement - Jesuisadmin","title":"French"},{"location":"guides/#indonesian","text":"Cara Mudah Install WordPress di Ubuntu - Musa Amin","title":"Indonesian"},{"location":"guides/#polish","text":"Instalacja WordPress na serwerze z WordOps \u2013 prosto, szybko i darmowo - Dominik Fajferek","title":"Polish"},{"location":"guides/#add-your-own-blog-post-about-wordops","text":"You wrote an article about WordOps ? Feel free to use the edit button at the right top and to open a pull request to add the link of your article.","title":"Add your own blog post about WordOps"},{"location":"how-to/","text":"How to ... ? \u00b6 Questions overview \u00b6 How to set default language for WordPress install ? How to secure WordOps backend with Let's Encrypt SSL certificate ? How to renew Let's Encrypt Certificates ? How to configure Let's Encrypt DNS API validation How to get an A+ grade on ssllabs with Wordops ? How to add FTP users How to install HWE stacks on Ubuntu How to use a Remote MySQL server with WordOps How to automate WordPress post-install tasks How to allow zip & gzip files download How to setup basic http-auth on site How to automate WordOps installation How to use micro-caching with Nginx How to bypass fastcgi_cache on specific URLs How to setup Sendmail with Sendgrid Other questions \u00b6 Get a list of WordOps commands \u00b6 To get the list of WordOps commands, you can use the command: wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help Get the MySQL root password \u00b6 MySQL root password is stored in the file /etc/mysql/conf.d/my.cnf Display MySQL user and password of a site \u00b6 You can use the command: wo site info site.tld Access WordOps backend \u00b6 WordOps backend is available on port 22222, you can access it with the server IP, hostname or with a domain pointed to the server IP: # with server IP https://YOUR.SERVER.IP:22222 # with server hostname https://server.site.tld:22222 # with a domain hosted on the server https://site.tld:22222 Change WordOps backend username and password \u00b6 You can use the command: wo secure --auth Renew a Let's Encrypt SSL Certificates with WordOps \u00b6 Previously with EasyEngine v3, Let's Encrypt certificates were renewed by running the command ee site update --le=renew --all with a cronjob. You may have noticed the command site update --le=renew still exist in WordOps, but you shouln't need it because WordOps use the awesome acme client acme.sh to issue and handle Let's Encrypt SSL certificates. All certificates are automatically renewed every 60 days by acme.sh using a cronjob. However, if you really need to renew your certificates, you can directly use acme.sh to renew all certificates with the following command: acme.sh --renew-all --ecc","title":"Overview"},{"location":"how-to/#how-to","text":"","title":"How to ... ?"},{"location":"how-to/#questions-overview","text":"How to set default language for WordPress install ? How to secure WordOps backend with Let's Encrypt SSL certificate ? How to renew Let's Encrypt Certificates ? How to configure Let's Encrypt DNS API validation How to get an A+ grade on ssllabs with Wordops ? How to add FTP users How to install HWE stacks on Ubuntu How to use a Remote MySQL server with WordOps How to automate WordPress post-install tasks How to allow zip & gzip files download How to setup basic http-auth on site How to automate WordOps installation How to use micro-caching with Nginx How to bypass fastcgi_cache on specific URLs How to setup Sendmail with Sendgrid","title":"Questions overview"},{"location":"how-to/#other-questions","text":"","title":"Other questions"},{"location":"how-to/#get-a-list-of-wordops-commands","text":"To get the list of WordOps commands, you can use the command: wo Then for any subcommand, you just have to add the arugment -h or --help to display command informations with examples. wo site --help","title":"Get a list of WordOps commands"},{"location":"how-to/#get-the-mysql-root-password","text":"MySQL root password is stored in the file /etc/mysql/conf.d/my.cnf","title":"Get the MySQL root password"},{"location":"how-to/#display-mysql-user-and-password-of-a-site","text":"You can use the command: wo site info site.tld","title":"Display MySQL user and password of a site"},{"location":"how-to/#access-wordops-backend","text":"WordOps backend is available on port 22222, you can access it with the server IP, hostname or with a domain pointed to the server IP: # with server IP https://YOUR.SERVER.IP:22222 # with server hostname https://server.site.tld:22222 # with a domain hosted on the server https://site.tld:22222","title":"Access WordOps backend"},{"location":"how-to/#change-wordops-backend-username-and-password","text":"You can use the command: wo secure --auth","title":"Change WordOps backend username and password"},{"location":"how-to/#renew-a-lets-encrypt-ssl-certificates-with-wordops","text":"Previously with EasyEngine v3, Let's Encrypt certificates were renewed by running the command ee site update --le=renew --all with a cronjob. You may have noticed the command site update --le=renew still exist in WordOps, but you shouln't need it because WordOps use the awesome acme client acme.sh to issue and handle Let's Encrypt SSL certificates. All certificates are automatically renewed every 60 days by acme.sh using a cronjob. However, if you really need to renew your certificates, you can directly use acme.sh to renew all certificates with the following command: acme.sh --renew-all --ecc","title":"Renew a Let's Encrypt SSL Certificates with WordOps"},{"location":"introduction/","text":"","title":"Introduction"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"about/changelog/","text":"Changelog \u00b6 v3.15.4 - 2022-10-25 \u00b6 Fixed \u00b6 Nginx prefetch-proxy configuration Linux distribution variable not set properly v3.15.3 - 2022-10-24 \u00b6 Added \u00b6 Support for Debian 10/11 Changed \u00b6 Install redis from official repository Redis version bump to 7.0.5 WP-CLI version bump to 2.7.1 Remove outdated Nginx directives Updated repository GPG Key UFW stack detect proftpd during install Fixed \u00b6 Netdata upgrade failure on old servers MariaDB service disabled after upgrade with wo stack migrate --mariadb Proftpd install on Ubuntu 22.04 and Debian 11 v3.15.2 - 2022-09-23 \u00b6 Added \u00b6 Add support for Chrome Privacy Preserving Prefetch Proxy Issue 440 Changed \u00b6 Cloudflare IP script for Nginx now fetch Cloudflare IPs using the API Fixed \u00b6 wo secure --auth on Ubuntu 22.04 v3.15.1 - 2022-09-09 \u00b6 Fixed \u00b6 Hotfix outdated python distro package cause issues on some servers v3.15.0 - 2022-09-09 \u00b6 Added \u00b6 Ubuntu 22.04 LTS Support Changed \u00b6 New Nginx package based on latest Nginx stable release 1.22.2 Better Referrer-Policy ( PR #434 ) MariaDB default version is now 10.6 Fixed \u00b6 wo log reset --all ( PR #438 ) Outdated Nginx directives Netdata stack upgrade( PR #439 ) v3.14.2 - 2022-04-29 \u00b6 Fixed \u00b6 Git unsafe directories issue WP_DEBUG variable in wp-config.php v3.14.1 - 2022-02-16 \u00b6 Fixed \u00b6 Cloudflare IP range script ( PR #422 ) Netdata stack installation Missing php upstream in WordOps backend v3.14.0 - 2022-01-26 \u00b6 Added \u00b6 PHP 8.0 and 8.1 support ( PR #413 ) Support arm64 architecture ( PR #392 ) Changed \u00b6 Update WP-CLI to v2.6.0 with PHP 8.0/8.1 support Update adminer to v4.8.1 Update Redis repository ( PR #377 ) Set PHP 8.0 as default PHP version. Can be changed in /etc/wo/wo.conf Fixed \u00b6 WordOps install script issues acme.sh issues with zero-ssl CA v3.13.2 - 2020-10-27 \u00b6 Fixed \u00b6 WordOps install issues on some servers MariaDB systemd service not fully enabled after upgrade v3.13.1 - 2020-10-26 \u00b6 Fixed \u00b6 Python virtualenv configuration Removing ssl certificate when deleting a site v3.13.0 - 2020-10-25 \u00b6 Added \u00b6 MariaDB 10.5 support (installed by default) Upgrade to MariaDB 10.5 with wo stack migrate --mariadb Changed \u00b6 Improved Nginx caching rules to cache requests with query strings related to analytics (utm_, fbclid) WordOps is installed inside a Python virtual environment in /opt/wo to isolate it from the system's Python libraries Fixed \u00b6 Useless php-cli version removal Redis 6.0.6 not installed on Ubuntu 20.04 LTS v3.12.4 - 2020-10-14 \u00b6 Changed \u00b6 Redis 6.0.6 available on Ubuntu LTS Fixed \u00b6 Avif (AV1 Image Format) & WebP Nginx conditional support( PR #322 ) Sendmail initial configuration with sendmailconfig SSL certificates export encoding with utf-8 Nanorc install on Ubuntu 16.04 LTS v3.12.3 - 2020-10-13 \u00b6 Added \u00b6 Add avif (AV1 Image Format) support into Nginx ( PR #314 ) Changed \u00b6 Use zstd instead of pigz for archive compression Exclude Nginx_vts status page from traffic calculation ( PR #294 ) Fixed \u00b6 fail2ban install without Nginx Grant MySQL permissions on all MySQL/MariaDB variant ( PR #285 ) PHP PECL extensions and PHP 8.0 issues v3.12.2 - 2020-05-15 \u00b6 Fixed \u00b6 Wrong PHP upstream for WordOps backend v3.12.1 - 2020-05-14 \u00b6 Fixed \u00b6 Redis repository on Ubuntu 20.04 LTS Changed \u00b6 MariaDB offical repository available for Ubuntu 20.04 LTS v3.12.0 - 2020-05-13 \u00b6 Added \u00b6 Set opcache.preload_user for PHP 7.4 Link to GitHub changelog after WordOps upgrade Automated PHPMyAdmin and Adminer latest release download and install Enable Let's Encrypt SSL on sites with http auth (PR #254) Ubuntu 20.04 LTS Support (experimental) New Nginx 1.18.0 package built with OpenSSL 1.1.1g Default PHP version can be set in /etc/wo/wo.conf Changed \u00b6 Improved caching rules (PR #265) Default PHP version is now 7.3 Fixed \u00b6 MySQL databases backup when using remote MySQL server PHPMyAdmin assets missing after installation Missing WP-CLI argument when switching site URL to https (PR #257) WordOps installation failure with pip Installation on raspberry pi 4 Fail2ban configuration when Nginx is not installed Wo-kernel systemd service start failure missing letsencrypt settings in wo.conf MariaDB issue with innodb_buffer_pool_instances v3.11.4 - 2020-01-17 \u00b6 Fixed \u00b6 wo secure --port variable error --letsencrypt variable error v3.11.3 - 2020-01-16 \u00b6 Added \u00b6 Backported Nano editor package for Debian/Ubuntu/Raspbian (which support syntax highlighting with --nanorc ) Protect Easy Digital Download files from being accessed directly (PR #222 ) Changed \u00b6 Improved WordOps performance by removing useless imports in wo site code Improved opcache cleaning with wo clean --opcache Force php imagick extension to be enabled after php-fpm install Netdata upgrade is now performed with fresh install script downloaded from github Update phpmyadmin to v5.0.1 Fixed \u00b6 Domain IP validation when using CNAME before issuing SSL certificate Netdata stack purge/remove not working properly Do not backup all databases when purging --mysql stack with remote MySQL server Netdata upgrade failure due to missing arguments v3.11.2 - 2019-12-07 \u00b6 Changed \u00b6 Proxy virtualhost now include proxy_params with X-Forwarded-Proto header Acme.sh upgrade Fixed \u00b6 Issue with Nginx variables_hash_bucket_size & variables_hash_max_size Netdata MySQL user error when purging/reinstalling Netdata stack Fix wo site cd v3.11.1 - 2019-12-04 \u00b6 Added \u00b6 --fail2ban in wo stack upgrade Fixed \u00b6 error with wo maintenance php-igbinary missing for php74 (run wo stack upgrade to install it) opcache reset with wo clean v3.11.0 - 2019-12-03 \u00b6 Added \u00b6 PHP 7.4 support Improved Webp images support with Cloudflare (Issue #95 ). Nginx will not serve webp images alternative with Cloudflare IP ranges. Stack upgrade for adminer Check acme.sh installation and setup acme.sh if needed before issuing certificate Add --ufw to wo stack status Add Nginx directive gzip_static on; to serve precompressed assets with Cache-Enabler or WP-Rocket. (Issue #207 ) Changed \u00b6 Previous --php73 & --php73=off flags are replaced by --php72 , --php73 , --php74 to switch site's php version phpMyAdmin updated to v4.9.2 Adminer updated to v4.7.5 Replace dot and dashes by underscores in database names (Issue #206 ) Increased database name length to 32 characters from domain name + 8 random characters Fixed \u00b6 typo error in motd-news script (Issue #204 ) Install Nginx before ngxblocker WordOps install/update script text color Issue with MySQL stack on Raspbian 9/10 Typo error (PR #205 ) php version in wo debug (PR #209 ) SSL certificates expiration display with shared wildcard certificates v3.10.3 - 2019-11-11 \u00b6 Added \u00b6 [ACME] Display warning about sudo usage when issuing certificate with DNS API validation (require sudo -E ) Changed \u00b6 [ACME] Resolve domain IP over HTTPS with Cloudflare DNS Resolver [CORE] Cement Framework updated to v2.10.2 [SITE] database name = 0 to 16 characters from the site name + 4 randomly generated character [SITE] database user = 0 to 12 characters from the site name + 4 randomy generated character [STACK] Improve sysctl tweak deployment Fixed \u00b6 [SITE] https redirection missing on subdomains sites Issues with digitalocean mariadb repository Cement Framework output handler issues [CLEAN] check if Nginx is installed before purging fastcgi or opcache v3.10.2 - 2019-11-06 \u00b6 Added \u00b6 [STACK] nanorc syntax highlighting for nano editor : --nanorc Changed \u00b6 wo stack remove/purge without argument print help instead of removing main stacks Fixed \u00b6 Import rtCamp:EasyEngine GPG key to avoid issues with previous nginx repository Unable to issue certificate for a domain if a subdomain certificate exist Incorrect WP-CLI path site_url_https function wo stack upgrade --ngxblocker not working properly v3.10.1 - 2019-10-30 \u00b6 Fixed \u00b6 WordOps install/upgrade from PyPi v3.10.0 - 2019-10-30 \u00b6 Added \u00b6 WordOps is now installed inside a wheel with pip (easier, cleaner and safer) from PyPi Redis 5.0.6 package backported to Debian 8/9/10 Custom motd to display a message if a new WordOps release is available Run mysql_upgrade during MySQL upgrade with wo stack upgrade to perform migration if needed wo stack upgrade --ngxblocker to update ngxblocker blocklist Changed \u00b6 Sysctl tweaks are applied during stack install and removed from install script Nginx & MariaDB systemd tweaks are removed from install script and applied during stacks install/upgrade Initial creation of .gitconfig is displayed the first time you run the command wo Added /var/lib/php/sessions/ to open_basedir to allow php sessions storage WordOps now check if a repository already exist before trying to adding it again. Improved SSL certificate error messages by displaying domain IP and server IP Version check before updating WordOps with wo update is now directly handled by wo Refactored WordOps download function with python3-requests MySQL backup path changed to /var/lib/wo-backup/mysql Do not check anymore if stack are installed with apt in wo service but only if there is a systemd service Refactored --letsencrypt=renew . Require the flag --force if certificate expiration is more than 45 days Improve netdata stack upgrade with install from source detection and updater fallback Fixed \u00b6 Incorrect PHP-FPM log path is wo log force-ssl.conf not removed after removing a site wo clean --opcache not working with invalid SSL certificate wo stack install --cheat wasn't working properly previously wo info failure depending on php-fpm pool name. ConfigParser will now detect the section name. v3.9.9.4 - 2019-10-18 \u00b6 Changed \u00b6 [STACK] New Nginx package built with libbrotli-dev for all linux distro supported by WordOps Fixed \u00b6 GPG keys error with previous EasyEngine Nginx repository Issue with --ngxblocker stack removal/purge Install/Update issues with python3 setup.py WordOps deploying SSL certificate even if acme.sh failed v3.9.9.3 - 2019-10-15 \u00b6 Added \u00b6 [STACK] Add Nginx TLS 1.3 0-RTT configuration Changed \u00b6 [STACK] New Nginx package built with OpenSSL_1.1.1d and the latest ngx_brotli module Fixed \u00b6 wo stack upgrade when using nginx-ee wo secure --auth wo secure --sshport not working with default ssh config Issues after APT repositories informations changed www was added to WordPress site url with subdomains Issue #178 Issuing certificate with acme.sh for sub.sub-domains not working v3.9.9.2 - 2019-10-04 \u00b6 Added \u00b6 [STACK] Nginx server_names_hash_bucket_size automated fix [STACK] Nginx configuration rollback in case of failure after wo stack upgrade --nginx [STACK] Nginx ultimate bad bots blocker with wo stack install --ngxblocker [STACK] Added support for custom Nginx compiled from source [STACK] Rollback configuration with Git in case of failure during service reload/restart [SITE] Enable or disable Nginx ultimate bad bots blocker with wo site update site.tld --ngxblocker/--ngxblocker=off Changed \u00b6 [CORE] Query acme.sh database directly to check if a certificate exist [SITE] --letsencrypt=renew is deprecated because not it's not required with acme.sh Fixed \u00b6 [SITE] Issues with root_domain variable with wo site update [SECURE] Wrong sftp-server path in sshd_config [SITE] Git error when using flag --vhostonly [SITE] Wrong plugin name displayed when installing Cache-Enabler v3.9.9.1 - 2019-09-26 \u00b6 Added \u00b6 [SECURE] Allow new ssh port with UFW when running wo secure --sshport [STACK] Additional Nginx directives to prevent access to log files or backup from web browser [CORE] apt-mirror-updater to select the fastest debian/ubuntu mirror with automatic switching between mirrors if the current mirror is being updated [SITE] add --force to force Let's Encrypt certificate issuance even if DNS check fail [STACK] check if another mta is installed before installing sendmail [SECURE] --allowpassword to allow password when using --ssh with wo secure Changed \u00b6 [SECURE] Improved sshd_config template according to Mozilla Infosec guidelines [STACK] Always add stack configuration into Git before making changes to make rollback easier [STACK] Render php-fpm pools configuration from template [STACK] Adminer updated to v4.7.3 Fixed \u00b6 [STACK] UFW setup after removing all stacks with wo stack purge --all [CONFIG] Invalid CORS header [STACK] PHP-FPM stack upgrade failure due to pool configuration v3.9.9 - 2019-09-24 \u00b6 Added \u00b6 [STACK] UFW now available as a stack with flag --ufw [SECURE] wo secure --ssh to harden ssh security [SECURE] wo secure --sshport to change ssh port [SITE] check domain DNS records before issuing a new certificate without DNS API [STACK] Acme challenge with DNS Alias mode --dnsalias=aliasdomain.tld acme.sh wiki Changed \u00b6 [APP] WordOps dashboard updated to v1.2, shipped as a html file, it can be used without PHP stack [STACK] Refactor Let's Encrypt with acme.sh [STACK] Log error improved with acme.sh depending on the acme challenge (DNS API or Webroot) [INSTALL] Removed UFW setup from install script [APP] phpMyAdmin updated to v4.9.1 [STACK] Commit possible Nginx configuration changes into Git before and after performing tasks (in wo secure for example) [CORE] Update deprecated handlers and hooks registration Fixed \u00b6 [STACK] wo stack purge --all failure if mysql isn't installed [INSTALL] Fix EEv3 files cleanup [SECURE] Incorrect variable usage in wo secure --port [INSTALL] Fix backup_ee function in install script v3.9.8.12 - 2019-09-20 \u00b6 Changed \u00b6 [APP] WP-CLI updated to v2.3.0 [CORE] Improved SSL certificates management from previous letsencrypt or certbot install [CORE] Use a separate python file for gitconfig during installation to redirect setup.py output into logs [CORE] updated cement to v2.8.2 [CORE] removed old --experimental flag [CORE] Improve and simplify install script Fixed \u00b6 htpasswd protection when migrating from EasyEngine v3 Issue #152 acme.sh install when migration from EasyEngine v3 Issue #153 v3.9.8.11 - 2019-09-06 \u00b6 Changed \u00b6 Improved general logs display UFW configuration is only applied during initial installation if UFW is disabled Fixed \u00b6 Redis-server configuration and start Nginx upgrade with wo stack upgrade v3.9.8.10 - 2019-09-04 \u00b6 Changed \u00b6 Improve Let's Encrypt certificate issuance logging informations MariaDB configuration & optimization is now rendered from a template (can be protected against overwriting with .custom) Fixed \u00b6 Fix cheat.sh install PR #139 sslutils error when trying to display SSL certificate expiration Fix cheat.sh symbolic link check before creation subdomain detection with complex suffixes like com.br Fix mariadb install/upgrade when running mariadb-10.1 Fix mariadb install/upgrade on raspbian and debian 8 Fix mariadb tuning wrong pool_instance calculation v3.9.8.9 - 2019-09-03 \u00b6 Added \u00b6 Rate limiter on wp-cron.php and xmlrpc.php mime.types template to handle missing extension ttf try_files directive for favicon additional settings for fail2ban asynchronous installer to decrease install/update duration Fixed \u00b6 Several typo or syntax errors wo site errors due to broken symlinks for access.log or error.log wo clean error due to unused memcached flag MySQL database and user variables overwrited in wo site v3.9.8.8 - 2019-09-02 \u00b6 Added \u00b6 Sendmail stack to send WordPress welcome email properly Backup all MySQL databases before removing/purging MySQL stack Changed \u00b6 do not terminate stack install process on errors WordOps internal log rotation limit increased to 1MB Fixed \u00b6 ufw rules for proftpd not applied phpredisadmin install netdata configuration extplorer installation add LANG='en_US.UTF-8' in install script Read public_suffix list with utf8 encoding. Issue #128 Netdata uninstall script path. PR #135 SSL Certificates expiration for subdomains v3.9.8.7 - 2019-08-31 \u00b6 Changed \u00b6 WordPress default permalinks structure from /%year%/%monthnum%/%day%/%postname%/ -> /%postname%/ Fixed \u00b6 Error with wo stack upgrade --nginx Install/update script version check clamAV stack install v3.9.8.6 - 2019-08-30 \u00b6 Added \u00b6 Subdomains are automatically secured with an existant Wildcard LetsEncrypt SSL certificate. (If a wildcard certificate exist, WordOps will use this certificate for subdomains instead of issuing new certificates) MySQL & Redis stack to wo stack remove/purge Dump MySQL databases before purging MySQL Stack Changed \u00b6 Date format in backup name : /backup/30Aug2019035932 -> /backup/30Aug2019-03-59-32 Cleanup and update bash_completion Fixed \u00b6 cache-enabler plugin not installed and configured with wo site update site.tld --wpce possible issue with domain variable in --letsencrypt=wildcard python3-mysqldb not available on Debian 8 (Jessie) Fix mysql variable skip-name-resolved v3.9.8.5 - 2019-08-30 \u00b6 Changed \u00b6 updated OpCache Control Panel to v0.2.0 Fixed \u00b6 Fix Netdata install on Raspbian 9/10 wo stack remove/purge confirmation Nginx error after removing a SSL certificate used to secure WordOps backend wo stack install --all ProFTPd fail2ban rules set twice if removed and reinstalled wo site update v3.9.8.4 - 2019-08-28 \u00b6 Added \u00b6 cht.sh stack: linux online cheatsheet. Usage: cheat <command> . Example for tar: cheat tar ClamAV anti-virus with weekly cronjob to update signatures database Internal function to add daily cronjobs Additional comment to detect previous configuration tuning (MariaDB & Redis) Domain/Subdomain detection based on public domain suffixes list for letsencrypt Increase Nginx & MariaDB systemd open_files limits Cronjob to update Cloudflare IPs list mariadb-backup to perform full and non-blocking databases backup (installation only. Backup feature will be available soon) Nginx configuration check before performing start/reload/restart (If configuration check fail, WordOps will not reload/restart Nginx anymore) Nginx mapping to proxy web-socket connections Changed \u00b6 eXplorer filemanager isn't installed with WordOps dashboard anymore, and a flag --extplorer is available. But it's still installed when running the command wo stack install Template rendering function now check for a .custom file before overwriting a configuration by default. flag --letsencrypt=subdomain is not required anymore, you can use --letsencrypt or -le Simplifiy and decrease duration of apt-key GPG keys import Fixed \u00b6 typo error in wo site update : PR #126 v3.9.8.3 - 2019-08-22 \u00b6 Changed \u00b6 Nginx package OpenSSL configuration improvements (TLS v1.3 now available on all operating systems supported by WordOps) remove user prompt for confirmation with wo update Nginx stack will not be upgraded with wo update anymore. This can be done at anytime with wo upgrade --nginx Databases name and user are now semi-randomly generated (0-8 letters from the domain + 8 random caracters) Fixed \u00b6 wo upgrade output Database name or database user length v3.9.8.2 - 2019-08-20 \u00b6 Added \u00b6 Additional cache expection for Easy Digital Downloads PR #120 Additional settings to support mobile with WP-Rocket Add the ability to block nginx configuration overwriting by adding a file .custom. Example with /etc/nginx/conf.d/webp.conf -> touch /etc/nginx/conf.d/webp.conf.custom If there is a custom file, WordOps will write the configuration in a file named fileconf.conf.orig to let users implement possible changes UFW minimal configuration during install. Can be disabled with the flag -w , --wufw or --without-ufw . Example: wget -qO wo wops.cc && sudo bash wo -w Fixed \u00b6 WordOps internal database creation on servers running with custom setup v3.9.8.1 - 2019-08-18 \u00b6 Added \u00b6 WordOps backend is automatically secured by the first Let's Encrypt SSL certificate issued Changed \u00b6 Extra Nginx directives moved from nginx.conf to conf.d/tweaks.conf Fixed \u00b6 MySQLTuner installation wo stack remove/purge --all variable substitution in install script wo stack upgrade --phpmyadmin/--dashboard phpmyadmin blowfish_secret key length Cement App not exiting on close in case of error v3.9.8 - 2019-08-16 \u00b6 Added \u00b6 Allow web browser caching for json and webmanifest files nginx-core.mustache template used to render nginx.conf during stack setup APT Packages configuration step with wo stack upgrade to apply new configurations Cloudflare restore real_ip configuration WP-Rocket plugin support with the flag --wprocket Cache-Enabler plugin support with the flag --wpce Install unattended-upgrade and enable automated security updates Enable time synchronization with ntp Additional cache exception for woocommerce Changed \u00b6 Do not force Nginx upgrade if a custom Nginx package compiled with nginx-ee is detected Gzip enabled again by default with configuration in /etc/nginx/conf.d/gzip.conf Brotli configuration moved in /etc/nginx/conf.d/brotli.conf.disabled (disabled by default) Moving package configuration in a new plugin stack_pref.py Cleanup templates by removing all doublons (with/without php7) and replacing them with variables Updated Nginx to v1.16.1 in response to HTTP/2 vulnerabilites discovered Disable temporary adding swap feature (not working) wo stack upgrade --nginx is now able to apply new configurations during wo update , it highly reduce upgrade duration Fixed \u00b6 Error in HSTS header syntax v3.9.7.2 - 2019-08-12 \u00b6 Fixed \u00b6 redis.conf permissions additional fix v3.9.7.1 - 2019-08-09 \u00b6 APT Packages configuration step with wo stack upgrade to apply new configurations Cloudflare restore real_ip configuration Changed \u00b6 Moving package configuration in a new plugin stack_pref.py Set WordOps backend password length from 16 to 24 Upgrade framework cement to 2.6.0 Upgrade PyMySQL to 0.9.3 Upgrade Psutil to 5.6.3 Fixed \u00b6 Missing import in wo sync redis.conf incorrect permissions v3.9.7 - 2019-08-02 \u00b6 Added \u00b6 MySQL configuration tuning Cronjob to optimize MySQL databases weekly WO-kernel systemd service to automatically apply kernel tweaks on server startup Proftpd stack now secured with TLS New Nginx package built with Brotli from operating system libraries Brotli configuration with only well compressible MIME types WordPress site url automatically updated to https://domain.tld when using -le/--letsencrypt flag More informations during certificate issuance about validation mode selected --php72 as alternative for --php Automated removal of the deprecated variable ssl on; in previous Nginx ssl.conf Project Contributing guidelines Project Code of conduct Changed \u00b6 wo maintenance refactored Improved debug log Updated Nginx configuration process to not overwrite files with custom data (htpasswd-wo, acl.conf etc..) Adminer updated to v4.7.2 eXtplorer updated to v2.1.13 Removed WordOps version from the Nginx header X-Powered-By to avoid possible security issues Several code quality improvements to speed up WordOps execution Few adjustements on PHP-FPM configuration (max_input_time,opcache.consistency_checks) Added /dev/urandom & /dev/shm to open_basedir in PHP-FPM configuration Fixed \u00b6 Kernel tweaks were not applied without server reboot Fail2ban standalone install wo stack purge --all error due to PHP7.3 check Nginx helper configuration during plugin install for Nginx fastcgi_cache and redis-cache phpRedisAdmin stack installation Fixed Travis CI build on pull requests Nginx server_names_hash_bucket_size variable error after WordOps upgrade v3.9.6.2 - 2019-07-24 \u00b6 Changed \u00b6 Improve wo update process duration Improve package install/upgrade/remove process Fixed \u00b6 phpMyAdmin archive download link archive Arguments --letsencrypt=clean/purge Incorrect directory removal during stack upgrade v3.9.6.1 - 2019-07-23 \u00b6 Fixed \u00b6 Typo in --letsencrypt=subdomain phpMyAdmin upgrade archive extraction Error in the command wo update . Please wo update --beta as workaround v3.9.6 - 2019-07-20 \u00b6 Added \u00b6 New Nginx package on Ubuntu with Cloudflare HTTP/2 HPACK and Dynamic TLS records phpMyAdmin upgrade with wo stack upgrade --phpmyadmin Wildcard SSL Certificates support with DNS validation Let's Encrypt DNS API support (Cloudflare, DigitalOcean, etc ..) on domain, subdomain, and wildcard Flag --letsencrypt=clean to purge a previous SSL configuration Support for Debian 10 buster (testing - not ready for production) Fail2ban with custom jails to secure WordPress & SSH Variable keylength in /etc/wo/wo.conf to define letsencrypt certificate keylenght ProFTPd stack with UFW & Fail2ban configurationz Beta branch and command wo update --beta for beta releases Extra directives in wp-config.php (limit posts revisions, set max_memory, enable auto-update for minor-releases) Fixed \u00b6 Nginx was not reloaded after enabling HSTS Netdata, Composer & Fail2Ban stack remove and purge WordPress not installed by wo site update with basic php73 sites v3.9.5.4 - 2019-07-13 \u00b6 Added \u00b6 New Nginx package on Ubuntu with TLS v1.3 support (OpenSSL 1.1.1c) Netdata upgrade with wo stack upgrade --netdata Netdata stack remove/purge Changed \u00b6 phpRedisAdmin is now installed with the stack --admin Remove memcached - not required anymore Fixed \u00b6 phpRedisAdmin installation Duplicated locations /robots.txt after upgrade to v3.9.5.3 Let's Encrypt stack wo site update --letsencrypt/--letsencrypt=off pt-query-advisor dead link Netdata persistant configuration v3.9.5.3 - 2019-06-18 \u00b6 Added \u00b6 Argument --preserve with the command wo update to keep current Nginx configuration Fixed \u00b6 Nginx upgrade failure when running wo update v3.9.5.2 - 2019-06-17 \u00b6 Added \u00b6 Non-interactive install/upgrade Argument --force with the command wo update Argument -s|--silent to perform non interactive installation Changed \u00b6 robots.txt location block moved from locations-wo.conf to wpcommon(-php7).php Fixed \u00b6 WP_CACHE_KEY_SALT set twice with wpredis WordOps version check when using wo update robots.txt file download if not created PHP-FPM socket path in stub_status.conf: PR #82 v3.9.5.1 - 2019-05-10 \u00b6 Fixed \u00b6 Adminer download link v3.9.5 - 2019-05-02 \u00b6 Added \u00b6 IPv6 support with HTTPS Brotli support in Nginx Let's Encrypt support with --proxy Install script handle migration from EEv3 load-balancing on unix socket for php-fpm stub_status vhost for metrics --letsencrypt=subdomain option opcache optimization for php-fpm EasyEngine configuration backup before migration EasyEngine configuration cleanup after migration WordOps configuration backup before upgrade Previous acme.sh certs migration \"wo maintenance\" command to perform server package update & cleanup Support for Netdata on backend: https://server.hostname:22222/netdata/ New Stacks: composer and netdata additional argument for letsencrypt: --hsts Clean Theme for adminer Credits for tools shipped with WordOps Cache exception for Easy Digital Download Additional cache exceptions for Woocommerce MySQL monitoring with Netdata WordOps-dashboard on 22222, can be installed with wo stack install Extplorer filemanager in WordOps backend Enable OSCP Stapling with Let's Encrypt Compress database backup with pigz (faster than gzip) before updating sites Support for Ubuntu 19.04 (disco) - few php extensions missing Support for Raspbian 9 (stretch) - tested on Raspberry Pi 3b+ backup letsencrypt certificate before upgrade directives emergency_restart_threshold & emergency_restart_interval to restart php-fpm in case of failure EasyEngine cronjob removal during install Kernel tweaks via systctl.conf open_basedir on php-fpm process to forbid access with php outside of /var/www & /run/nginx-cache Changed \u00b6 letsencrypt stack refactored with acme.sh letsencrypt validation with webroot folder hardened nginx ssl_ecdh_curve Update phpredisadmin Increase MySQL root password size to 24 characters Increase MySQL users password size to 24 characters Nginx locations template is the same for php7.2 & 7.3 backend SSL configuration now stored in /var/www/22222/conf/nginx/ssl.conf Install Netdata with static pre-built binaries instead of having to compile it from source Nginx updated to new stable release (1.16.0) New packages (phpmyadmin, adminer, composer) are not download in /tmp anymore Fixed \u00b6 PHP 7.3 extras when php 7.2 isn't installed acme.sh installation acme.sh alias with config home variable deb.sury.org repository gpg key Nginx upgrade from previous WordOps release Force new Nginx templates during update Error message about missing my.cnf file during upgrade PHP 7.2 & PHP 7.3 pool configuration during upgrade WordOps backup directory creation before upgrade EasyEngine database sync during migration fix command \"wo info\" phpmyadmin install with composer command \"wo clean --memcached\" phpredisadmin setup --hsts flag with basic html site hsts flag on site not secure with letsencrypt fix import of previous acme.sh certificate fix proxy webroot folder creation v3.9.4 - 2019-03-15 \u00b6 Added \u00b6 Nginx module nginx_vts Migration script from nginx-ee to nginx-wo Support for Debian 9 (testing) New Nginx build v1.14.2 Changed \u00b6 Update WP-CLI version to 2.1.0 Update Adminer to 4.6.2 Update predis to v1.1.1 Refactored nginx.conf Removed HHVM Stack Removed old linux distro checks Replace wo-acme-sh by acme.sh Fixed \u00b6 Outdated Nginx ssl_ciphers suite Debian 9 nginx build v3.9.3 - 2019-03-07 \u00b6 Changed \u00b6 Updated Nginx fastcgi_cache templates Updated Nginx redis_cache templates Updated Nginx wp-super-cache templates Updated Nginx configuration for WordPress 5.0 remove --experimental args MariaDB version bumped to 10.3 Refactored Changelog Updated WO manual Updated WO bash_completion Refactored README.md Added \u00b6 Add WebP image support with Nginx mapping Add PHP 7.3 support WordPress $skip_cache variable mapping Fixed \u00b6 Nginx variable $webp_suffix on fresh install ( #21 ) wo update command ( #7 ) Fix php services management ( #12 ) Fix WP-CLI install v3.9.2 - 2018-11-30 \u00b6 Changed \u00b6 Re-branded the fork to WordOps Codebase cleanup Set PHP 7.2 as the default Included support for newer OS releases Reworked the HTTPS configuration Added more automated testing with Redis Replaced Postfix with smtp-cli Dropped mail services Dropped w3tc support","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#v3154-2022-10-25","text":"","title":"v3.15.4 - 2022-10-25"},{"location":"about/changelog/#fixed","text":"Nginx prefetch-proxy configuration Linux distribution variable not set properly","title":"Fixed"},{"location":"about/changelog/#v3153-2022-10-24","text":"","title":"v3.15.3 - 2022-10-24"},{"location":"about/changelog/#added","text":"Support for Debian 10/11","title":"Added"},{"location":"about/changelog/#changed","text":"Install redis from official repository Redis version bump to 7.0.5 WP-CLI version bump to 2.7.1 Remove outdated Nginx directives Updated repository GPG Key UFW stack detect proftpd during install","title":"Changed"},{"location":"about/changelog/#fixed_1","text":"Netdata upgrade failure on old servers MariaDB service disabled after upgrade with wo stack migrate --mariadb Proftpd install on Ubuntu 22.04 and Debian 11","title":"Fixed"},{"location":"about/changelog/#v3152-2022-09-23","text":"","title":"v3.15.2 - 2022-09-23"},{"location":"about/changelog/#added_1","text":"Add support for Chrome Privacy Preserving Prefetch Proxy Issue 440","title":"Added"},{"location":"about/changelog/#changed_1","text":"Cloudflare IP script for Nginx now fetch Cloudflare IPs using the API","title":"Changed"},{"location":"about/changelog/#fixed_2","text":"wo secure --auth on Ubuntu 22.04","title":"Fixed"},{"location":"about/changelog/#v3151-2022-09-09","text":"","title":"v3.15.1 - 2022-09-09"},{"location":"about/changelog/#fixed_3","text":"Hotfix outdated python distro package cause issues on some servers","title":"Fixed"},{"location":"about/changelog/#v3150-2022-09-09","text":"","title":"v3.15.0 - 2022-09-09"},{"location":"about/changelog/#added_2","text":"Ubuntu 22.04 LTS Support","title":"Added"},{"location":"about/changelog/#changed_2","text":"New Nginx package based on latest Nginx stable release 1.22.2 Better Referrer-Policy ( PR #434 ) MariaDB default version is now 10.6","title":"Changed"},{"location":"about/changelog/#fixed_4","text":"wo log reset --all ( PR #438 ) Outdated Nginx directives Netdata stack upgrade( PR #439 )","title":"Fixed"},{"location":"about/changelog/#v3142-2022-04-29","text":"","title":"v3.14.2 - 2022-04-29"},{"location":"about/changelog/#fixed_5","text":"Git unsafe directories issue WP_DEBUG variable in wp-config.php","title":"Fixed"},{"location":"about/changelog/#v3141-2022-02-16","text":"","title":"v3.14.1 - 2022-02-16"},{"location":"about/changelog/#fixed_6","text":"Cloudflare IP range script ( PR #422 ) Netdata stack installation Missing php upstream in WordOps backend","title":"Fixed"},{"location":"about/changelog/#v3140-2022-01-26","text":"","title":"v3.14.0 - 2022-01-26"},{"location":"about/changelog/#added_3","text":"PHP 8.0 and 8.1 support ( PR #413 ) Support arm64 architecture ( PR #392 )","title":"Added"},{"location":"about/changelog/#changed_3","text":"Update WP-CLI to v2.6.0 with PHP 8.0/8.1 support Update adminer to v4.8.1 Update Redis repository ( PR #377 ) Set PHP 8.0 as default PHP version. Can be changed in /etc/wo/wo.conf","title":"Changed"},{"location":"about/changelog/#fixed_7","text":"WordOps install script issues acme.sh issues with zero-ssl CA","title":"Fixed"},{"location":"about/changelog/#v3132-2020-10-27","text":"","title":"v3.13.2 - 2020-10-27"},{"location":"about/changelog/#fixed_8","text":"WordOps install issues on some servers MariaDB systemd service not fully enabled after upgrade","title":"Fixed"},{"location":"about/changelog/#v3131-2020-10-26","text":"","title":"v3.13.1 - 2020-10-26"},{"location":"about/changelog/#fixed_9","text":"Python virtualenv configuration Removing ssl certificate when deleting a site","title":"Fixed"},{"location":"about/changelog/#v3130-2020-10-25","text":"","title":"v3.13.0 - 2020-10-25"},{"location":"about/changelog/#added_4","text":"MariaDB 10.5 support (installed by default) Upgrade to MariaDB 10.5 with wo stack migrate --mariadb","title":"Added"},{"location":"about/changelog/#changed_4","text":"Improved Nginx caching rules to cache requests with query strings related to analytics (utm_, fbclid) WordOps is installed inside a Python virtual environment in /opt/wo to isolate it from the system's Python libraries","title":"Changed"},{"location":"about/changelog/#fixed_10","text":"Useless php-cli version removal Redis 6.0.6 not installed on Ubuntu 20.04 LTS","title":"Fixed"},{"location":"about/changelog/#v3124-2020-10-14","text":"","title":"v3.12.4 - 2020-10-14"},{"location":"about/changelog/#changed_5","text":"Redis 6.0.6 available on Ubuntu LTS","title":"Changed"},{"location":"about/changelog/#fixed_11","text":"Avif (AV1 Image Format) & WebP Nginx conditional support( PR #322 ) Sendmail initial configuration with sendmailconfig SSL certificates export encoding with utf-8 Nanorc install on Ubuntu 16.04 LTS","title":"Fixed"},{"location":"about/changelog/#v3123-2020-10-13","text":"","title":"v3.12.3 - 2020-10-13"},{"location":"about/changelog/#added_5","text":"Add avif (AV1 Image Format) support into Nginx ( PR #314 )","title":"Added"},{"location":"about/changelog/#changed_6","text":"Use zstd instead of pigz for archive compression Exclude Nginx_vts status page from traffic calculation ( PR #294 )","title":"Changed"},{"location":"about/changelog/#fixed_12","text":"fail2ban install without Nginx Grant MySQL permissions on all MySQL/MariaDB variant ( PR #285 ) PHP PECL extensions and PHP 8.0 issues","title":"Fixed"},{"location":"about/changelog/#v3122-2020-05-15","text":"","title":"v3.12.2 - 2020-05-15"},{"location":"about/changelog/#fixed_13","text":"Wrong PHP upstream for WordOps backend","title":"Fixed"},{"location":"about/changelog/#v3121-2020-05-14","text":"","title":"v3.12.1 - 2020-05-14"},{"location":"about/changelog/#fixed_14","text":"Redis repository on Ubuntu 20.04 LTS","title":"Fixed"},{"location":"about/changelog/#changed_7","text":"MariaDB offical repository available for Ubuntu 20.04 LTS","title":"Changed"},{"location":"about/changelog/#v3120-2020-05-13","text":"","title":"v3.12.0 - 2020-05-13"},{"location":"about/changelog/#added_6","text":"Set opcache.preload_user for PHP 7.4 Link to GitHub changelog after WordOps upgrade Automated PHPMyAdmin and Adminer latest release download and install Enable Let's Encrypt SSL on sites with http auth (PR #254) Ubuntu 20.04 LTS Support (experimental) New Nginx 1.18.0 package built with OpenSSL 1.1.1g Default PHP version can be set in /etc/wo/wo.conf","title":"Added"},{"location":"about/changelog/#changed_8","text":"Improved caching rules (PR #265) Default PHP version is now 7.3","title":"Changed"},{"location":"about/changelog/#fixed_15","text":"MySQL databases backup when using remote MySQL server PHPMyAdmin assets missing after installation Missing WP-CLI argument when switching site URL to https (PR #257) WordOps installation failure with pip Installation on raspberry pi 4 Fail2ban configuration when Nginx is not installed Wo-kernel systemd service start failure missing letsencrypt settings in wo.conf MariaDB issue with innodb_buffer_pool_instances","title":"Fixed"},{"location":"about/changelog/#v3114-2020-01-17","text":"","title":"v3.11.4 - 2020-01-17"},{"location":"about/changelog/#fixed_16","text":"wo secure --port variable error --letsencrypt variable error","title":"Fixed"},{"location":"about/changelog/#v3113-2020-01-16","text":"","title":"v3.11.3 - 2020-01-16"},{"location":"about/changelog/#added_7","text":"Backported Nano editor package for Debian/Ubuntu/Raspbian (which support syntax highlighting with --nanorc ) Protect Easy Digital Download files from being accessed directly (PR #222 )","title":"Added"},{"location":"about/changelog/#changed_9","text":"Improved WordOps performance by removing useless imports in wo site code Improved opcache cleaning with wo clean --opcache Force php imagick extension to be enabled after php-fpm install Netdata upgrade is now performed with fresh install script downloaded from github Update phpmyadmin to v5.0.1","title":"Changed"},{"location":"about/changelog/#fixed_17","text":"Domain IP validation when using CNAME before issuing SSL certificate Netdata stack purge/remove not working properly Do not backup all databases when purging --mysql stack with remote MySQL server Netdata upgrade failure due to missing arguments","title":"Fixed"},{"location":"about/changelog/#v3112-2019-12-07","text":"","title":"v3.11.2 - 2019-12-07"},{"location":"about/changelog/#changed_10","text":"Proxy virtualhost now include proxy_params with X-Forwarded-Proto header Acme.sh upgrade","title":"Changed"},{"location":"about/changelog/#fixed_18","text":"Issue with Nginx variables_hash_bucket_size & variables_hash_max_size Netdata MySQL user error when purging/reinstalling Netdata stack Fix wo site cd","title":"Fixed"},{"location":"about/changelog/#v3111-2019-12-04","text":"","title":"v3.11.1 - 2019-12-04"},{"location":"about/changelog/#added_8","text":"--fail2ban in wo stack upgrade","title":"Added"},{"location":"about/changelog/#fixed_19","text":"error with wo maintenance php-igbinary missing for php74 (run wo stack upgrade to install it) opcache reset with wo clean","title":"Fixed"},{"location":"about/changelog/#v3110-2019-12-03","text":"","title":"v3.11.0 - 2019-12-03"},{"location":"about/changelog/#added_9","text":"PHP 7.4 support Improved Webp images support with Cloudflare (Issue #95 ). Nginx will not serve webp images alternative with Cloudflare IP ranges. Stack upgrade for adminer Check acme.sh installation and setup acme.sh if needed before issuing certificate Add --ufw to wo stack status Add Nginx directive gzip_static on; to serve precompressed assets with Cache-Enabler or WP-Rocket. (Issue #207 )","title":"Added"},{"location":"about/changelog/#changed_11","text":"Previous --php73 & --php73=off flags are replaced by --php72 , --php73 , --php74 to switch site's php version phpMyAdmin updated to v4.9.2 Adminer updated to v4.7.5 Replace dot and dashes by underscores in database names (Issue #206 ) Increased database name length to 32 characters from domain name + 8 random characters","title":"Changed"},{"location":"about/changelog/#fixed_20","text":"typo error in motd-news script (Issue #204 ) Install Nginx before ngxblocker WordOps install/update script text color Issue with MySQL stack on Raspbian 9/10 Typo error (PR #205 ) php version in wo debug (PR #209 ) SSL certificates expiration display with shared wildcard certificates","title":"Fixed"},{"location":"about/changelog/#v3103-2019-11-11","text":"","title":"v3.10.3 - 2019-11-11"},{"location":"about/changelog/#added_10","text":"[ACME] Display warning about sudo usage when issuing certificate with DNS API validation (require sudo -E )","title":"Added"},{"location":"about/changelog/#changed_12","text":"[ACME] Resolve domain IP over HTTPS with Cloudflare DNS Resolver [CORE] Cement Framework updated to v2.10.2 [SITE] database name = 0 to 16 characters from the site name + 4 randomly generated character [SITE] database user = 0 to 12 characters from the site name + 4 randomy generated character [STACK] Improve sysctl tweak deployment","title":"Changed"},{"location":"about/changelog/#fixed_21","text":"[SITE] https redirection missing on subdomains sites Issues with digitalocean mariadb repository Cement Framework output handler issues [CLEAN] check if Nginx is installed before purging fastcgi or opcache","title":"Fixed"},{"location":"about/changelog/#v3102-2019-11-06","text":"","title":"v3.10.2 - 2019-11-06"},{"location":"about/changelog/#added_11","text":"[STACK] nanorc syntax highlighting for nano editor : --nanorc","title":"Added"},{"location":"about/changelog/#changed_13","text":"wo stack remove/purge without argument print help instead of removing main stacks","title":"Changed"},{"location":"about/changelog/#fixed_22","text":"Import rtCamp:EasyEngine GPG key to avoid issues with previous nginx repository Unable to issue certificate for a domain if a subdomain certificate exist Incorrect WP-CLI path site_url_https function wo stack upgrade --ngxblocker not working properly","title":"Fixed"},{"location":"about/changelog/#v3101-2019-10-30","text":"","title":"v3.10.1 - 2019-10-30"},{"location":"about/changelog/#fixed_23","text":"WordOps install/upgrade from PyPi","title":"Fixed"},{"location":"about/changelog/#v3100-2019-10-30","text":"","title":"v3.10.0 - 2019-10-30"},{"location":"about/changelog/#added_12","text":"WordOps is now installed inside a wheel with pip (easier, cleaner and safer) from PyPi Redis 5.0.6 package backported to Debian 8/9/10 Custom motd to display a message if a new WordOps release is available Run mysql_upgrade during MySQL upgrade with wo stack upgrade to perform migration if needed wo stack upgrade --ngxblocker to update ngxblocker blocklist","title":"Added"},{"location":"about/changelog/#changed_14","text":"Sysctl tweaks are applied during stack install and removed from install script Nginx & MariaDB systemd tweaks are removed from install script and applied during stacks install/upgrade Initial creation of .gitconfig is displayed the first time you run the command wo Added /var/lib/php/sessions/ to open_basedir to allow php sessions storage WordOps now check if a repository already exist before trying to adding it again. Improved SSL certificate error messages by displaying domain IP and server IP Version check before updating WordOps with wo update is now directly handled by wo Refactored WordOps download function with python3-requests MySQL backup path changed to /var/lib/wo-backup/mysql Do not check anymore if stack are installed with apt in wo service but only if there is a systemd service Refactored --letsencrypt=renew . Require the flag --force if certificate expiration is more than 45 days Improve netdata stack upgrade with install from source detection and updater fallback","title":"Changed"},{"location":"about/changelog/#fixed_24","text":"Incorrect PHP-FPM log path is wo log force-ssl.conf not removed after removing a site wo clean --opcache not working with invalid SSL certificate wo stack install --cheat wasn't working properly previously wo info failure depending on php-fpm pool name. ConfigParser will now detect the section name.","title":"Fixed"},{"location":"about/changelog/#v3994-2019-10-18","text":"","title":"v3.9.9.4 -  2019-10-18"},{"location":"about/changelog/#changed_15","text":"[STACK] New Nginx package built with libbrotli-dev for all linux distro supported by WordOps","title":"Changed"},{"location":"about/changelog/#fixed_25","text":"GPG keys error with previous EasyEngine Nginx repository Issue with --ngxblocker stack removal/purge Install/Update issues with python3 setup.py WordOps deploying SSL certificate even if acme.sh failed","title":"Fixed"},{"location":"about/changelog/#v3993-2019-10-15","text":"","title":"v3.9.9.3 -  2019-10-15"},{"location":"about/changelog/#added_13","text":"[STACK] Add Nginx TLS 1.3 0-RTT configuration","title":"Added"},{"location":"about/changelog/#changed_16","text":"[STACK] New Nginx package built with OpenSSL_1.1.1d and the latest ngx_brotli module","title":"Changed"},{"location":"about/changelog/#fixed_26","text":"wo stack upgrade when using nginx-ee wo secure --auth wo secure --sshport not working with default ssh config Issues after APT repositories informations changed www was added to WordPress site url with subdomains Issue #178 Issuing certificate with acme.sh for sub.sub-domains not working","title":"Fixed"},{"location":"about/changelog/#v3992-2019-10-04","text":"","title":"v3.9.9.2 - 2019-10-04"},{"location":"about/changelog/#added_14","text":"[STACK] Nginx server_names_hash_bucket_size automated fix [STACK] Nginx configuration rollback in case of failure after wo stack upgrade --nginx [STACK] Nginx ultimate bad bots blocker with wo stack install --ngxblocker [STACK] Added support for custom Nginx compiled from source [STACK] Rollback configuration with Git in case of failure during service reload/restart [SITE] Enable or disable Nginx ultimate bad bots blocker with wo site update site.tld --ngxblocker/--ngxblocker=off","title":"Added"},{"location":"about/changelog/#changed_17","text":"[CORE] Query acme.sh database directly to check if a certificate exist [SITE] --letsencrypt=renew is deprecated because not it's not required with acme.sh","title":"Changed"},{"location":"about/changelog/#fixed_27","text":"[SITE] Issues with root_domain variable with wo site update [SECURE] Wrong sftp-server path in sshd_config [SITE] Git error when using flag --vhostonly [SITE] Wrong plugin name displayed when installing Cache-Enabler","title":"Fixed"},{"location":"about/changelog/#v3991-2019-09-26","text":"","title":"v3.9.9.1 - 2019-09-26"},{"location":"about/changelog/#added_15","text":"[SECURE] Allow new ssh port with UFW when running wo secure --sshport [STACK] Additional Nginx directives to prevent access to log files or backup from web browser [CORE] apt-mirror-updater to select the fastest debian/ubuntu mirror with automatic switching between mirrors if the current mirror is being updated [SITE] add --force to force Let's Encrypt certificate issuance even if DNS check fail [STACK] check if another mta is installed before installing sendmail [SECURE] --allowpassword to allow password when using --ssh with wo secure","title":"Added"},{"location":"about/changelog/#changed_18","text":"[SECURE] Improved sshd_config template according to Mozilla Infosec guidelines [STACK] Always add stack configuration into Git before making changes to make rollback easier [STACK] Render php-fpm pools configuration from template [STACK] Adminer updated to v4.7.3","title":"Changed"},{"location":"about/changelog/#fixed_28","text":"[STACK] UFW setup after removing all stacks with wo stack purge --all [CONFIG] Invalid CORS header [STACK] PHP-FPM stack upgrade failure due to pool configuration","title":"Fixed"},{"location":"about/changelog/#v399-2019-09-24","text":"","title":"v3.9.9 - 2019-09-24"},{"location":"about/changelog/#added_16","text":"[STACK] UFW now available as a stack with flag --ufw [SECURE] wo secure --ssh to harden ssh security [SECURE] wo secure --sshport to change ssh port [SITE] check domain DNS records before issuing a new certificate without DNS API [STACK] Acme challenge with DNS Alias mode --dnsalias=aliasdomain.tld acme.sh wiki","title":"Added"},{"location":"about/changelog/#changed_19","text":"[APP] WordOps dashboard updated to v1.2, shipped as a html file, it can be used without PHP stack [STACK] Refactor Let's Encrypt with acme.sh [STACK] Log error improved with acme.sh depending on the acme challenge (DNS API or Webroot) [INSTALL] Removed UFW setup from install script [APP] phpMyAdmin updated to v4.9.1 [STACK] Commit possible Nginx configuration changes into Git before and after performing tasks (in wo secure for example) [CORE] Update deprecated handlers and hooks registration","title":"Changed"},{"location":"about/changelog/#fixed_29","text":"[STACK] wo stack purge --all failure if mysql isn't installed [INSTALL] Fix EEv3 files cleanup [SECURE] Incorrect variable usage in wo secure --port [INSTALL] Fix backup_ee function in install script","title":"Fixed"},{"location":"about/changelog/#v39812-2019-09-20","text":"","title":"v3.9.8.12 - 2019-09-20"},{"location":"about/changelog/#changed_20","text":"[APP] WP-CLI updated to v2.3.0 [CORE] Improved SSL certificates management from previous letsencrypt or certbot install [CORE] Use a separate python file for gitconfig during installation to redirect setup.py output into logs [CORE] updated cement to v2.8.2 [CORE] removed old --experimental flag [CORE] Improve and simplify install script","title":"Changed"},{"location":"about/changelog/#fixed_30","text":"htpasswd protection when migrating from EasyEngine v3 Issue #152 acme.sh install when migration from EasyEngine v3 Issue #153","title":"Fixed"},{"location":"about/changelog/#v39811-2019-09-06","text":"","title":"v3.9.8.11 - 2019-09-06"},{"location":"about/changelog/#changed_21","text":"Improved general logs display UFW configuration is only applied during initial installation if UFW is disabled","title":"Changed"},{"location":"about/changelog/#fixed_31","text":"Redis-server configuration and start Nginx upgrade with wo stack upgrade","title":"Fixed"},{"location":"about/changelog/#v39810-2019-09-04","text":"","title":"v3.9.8.10 - 2019-09-04"},{"location":"about/changelog/#changed_22","text":"Improve Let's Encrypt certificate issuance logging informations MariaDB configuration & optimization is now rendered from a template (can be protected against overwriting with .custom)","title":"Changed"},{"location":"about/changelog/#fixed_32","text":"Fix cheat.sh install PR #139 sslutils error when trying to display SSL certificate expiration Fix cheat.sh symbolic link check before creation subdomain detection with complex suffixes like com.br Fix mariadb install/upgrade when running mariadb-10.1 Fix mariadb install/upgrade on raspbian and debian 8 Fix mariadb tuning wrong pool_instance calculation","title":"Fixed"},{"location":"about/changelog/#v3989-2019-09-03","text":"","title":"v3.9.8.9 - 2019-09-03"},{"location":"about/changelog/#added_17","text":"Rate limiter on wp-cron.php and xmlrpc.php mime.types template to handle missing extension ttf try_files directive for favicon additional settings for fail2ban asynchronous installer to decrease install/update duration","title":"Added"},{"location":"about/changelog/#fixed_33","text":"Several typo or syntax errors wo site errors due to broken symlinks for access.log or error.log wo clean error due to unused memcached flag MySQL database and user variables overwrited in wo site","title":"Fixed"},{"location":"about/changelog/#v3988-2019-09-02","text":"","title":"v3.9.8.8 - 2019-09-02"},{"location":"about/changelog/#added_18","text":"Sendmail stack to send WordPress welcome email properly Backup all MySQL databases before removing/purging MySQL stack","title":"Added"},{"location":"about/changelog/#changed_23","text":"do not terminate stack install process on errors WordOps internal log rotation limit increased to 1MB","title":"Changed"},{"location":"about/changelog/#fixed_34","text":"ufw rules for proftpd not applied phpredisadmin install netdata configuration extplorer installation add LANG='en_US.UTF-8' in install script Read public_suffix list with utf8 encoding. Issue #128 Netdata uninstall script path. PR #135 SSL Certificates expiration for subdomains","title":"Fixed"},{"location":"about/changelog/#v3987-2019-08-31","text":"","title":"v3.9.8.7 - 2019-08-31"},{"location":"about/changelog/#changed_24","text":"WordPress default permalinks structure from /%year%/%monthnum%/%day%/%postname%/ -> /%postname%/","title":"Changed"},{"location":"about/changelog/#fixed_35","text":"Error with wo stack upgrade --nginx Install/update script version check clamAV stack install","title":"Fixed"},{"location":"about/changelog/#v3986-2019-08-30","text":"","title":"v3.9.8.6 - 2019-08-30"},{"location":"about/changelog/#added_19","text":"Subdomains are automatically secured with an existant Wildcard LetsEncrypt SSL certificate. (If a wildcard certificate exist, WordOps will use this certificate for subdomains instead of issuing new certificates) MySQL & Redis stack to wo stack remove/purge Dump MySQL databases before purging MySQL Stack","title":"Added"},{"location":"about/changelog/#changed_25","text":"Date format in backup name : /backup/30Aug2019035932 -> /backup/30Aug2019-03-59-32 Cleanup and update bash_completion","title":"Changed"},{"location":"about/changelog/#fixed_36","text":"cache-enabler plugin not installed and configured with wo site update site.tld --wpce possible issue with domain variable in --letsencrypt=wildcard python3-mysqldb not available on Debian 8 (Jessie) Fix mysql variable skip-name-resolved","title":"Fixed"},{"location":"about/changelog/#v3985-2019-08-30","text":"","title":"v3.9.8.5 - 2019-08-30"},{"location":"about/changelog/#changed_26","text":"updated OpCache Control Panel to v0.2.0","title":"Changed"},{"location":"about/changelog/#fixed_37","text":"Fix Netdata install on Raspbian 9/10 wo stack remove/purge confirmation Nginx error after removing a SSL certificate used to secure WordOps backend wo stack install --all ProFTPd fail2ban rules set twice if removed and reinstalled wo site update","title":"Fixed"},{"location":"about/changelog/#v3984-2019-08-28","text":"","title":"v3.9.8.4 - 2019-08-28"},{"location":"about/changelog/#added_20","text":"cht.sh stack: linux online cheatsheet. Usage: cheat <command> . Example for tar: cheat tar ClamAV anti-virus with weekly cronjob to update signatures database Internal function to add daily cronjobs Additional comment to detect previous configuration tuning (MariaDB & Redis) Domain/Subdomain detection based on public domain suffixes list for letsencrypt Increase Nginx & MariaDB systemd open_files limits Cronjob to update Cloudflare IPs list mariadb-backup to perform full and non-blocking databases backup (installation only. Backup feature will be available soon) Nginx configuration check before performing start/reload/restart (If configuration check fail, WordOps will not reload/restart Nginx anymore) Nginx mapping to proxy web-socket connections","title":"Added"},{"location":"about/changelog/#changed_27","text":"eXplorer filemanager isn't installed with WordOps dashboard anymore, and a flag --extplorer is available. But it's still installed when running the command wo stack install Template rendering function now check for a .custom file before overwriting a configuration by default. flag --letsencrypt=subdomain is not required anymore, you can use --letsencrypt or -le Simplifiy and decrease duration of apt-key GPG keys import","title":"Changed"},{"location":"about/changelog/#fixed_38","text":"typo error in wo site update : PR #126","title":"Fixed"},{"location":"about/changelog/#v3983-2019-08-22","text":"","title":"v3.9.8.3 - 2019-08-22"},{"location":"about/changelog/#changed_28","text":"Nginx package OpenSSL configuration improvements (TLS v1.3 now available on all operating systems supported by WordOps) remove user prompt for confirmation with wo update Nginx stack will not be upgraded with wo update anymore. This can be done at anytime with wo upgrade --nginx Databases name and user are now semi-randomly generated (0-8 letters from the domain + 8 random caracters)","title":"Changed"},{"location":"about/changelog/#fixed_39","text":"wo upgrade output Database name or database user length","title":"Fixed"},{"location":"about/changelog/#v3982-2019-08-20","text":"","title":"v3.9.8.2 - 2019-08-20"},{"location":"about/changelog/#added_21","text":"Additional cache expection for Easy Digital Downloads PR #120 Additional settings to support mobile with WP-Rocket Add the ability to block nginx configuration overwriting by adding a file .custom. Example with /etc/nginx/conf.d/webp.conf -> touch /etc/nginx/conf.d/webp.conf.custom If there is a custom file, WordOps will write the configuration in a file named fileconf.conf.orig to let users implement possible changes UFW minimal configuration during install. Can be disabled with the flag -w , --wufw or --without-ufw . Example: wget -qO wo wops.cc && sudo bash wo -w","title":"Added"},{"location":"about/changelog/#fixed_40","text":"WordOps internal database creation on servers running with custom setup","title":"Fixed"},{"location":"about/changelog/#v3981-2019-08-18","text":"","title":"v3.9.8.1 - 2019-08-18"},{"location":"about/changelog/#added_22","text":"WordOps backend is automatically secured by the first Let's Encrypt SSL certificate issued","title":"Added"},{"location":"about/changelog/#changed_29","text":"Extra Nginx directives moved from nginx.conf to conf.d/tweaks.conf","title":"Changed"},{"location":"about/changelog/#fixed_41","text":"MySQLTuner installation wo stack remove/purge --all variable substitution in install script wo stack upgrade --phpmyadmin/--dashboard phpmyadmin blowfish_secret key length Cement App not exiting on close in case of error","title":"Fixed"},{"location":"about/changelog/#v398-2019-08-16","text":"","title":"v3.9.8 - 2019-08-16"},{"location":"about/changelog/#added_23","text":"Allow web browser caching for json and webmanifest files nginx-core.mustache template used to render nginx.conf during stack setup APT Packages configuration step with wo stack upgrade to apply new configurations Cloudflare restore real_ip configuration WP-Rocket plugin support with the flag --wprocket Cache-Enabler plugin support with the flag --wpce Install unattended-upgrade and enable automated security updates Enable time synchronization with ntp Additional cache exception for woocommerce","title":"Added"},{"location":"about/changelog/#changed_30","text":"Do not force Nginx upgrade if a custom Nginx package compiled with nginx-ee is detected Gzip enabled again by default with configuration in /etc/nginx/conf.d/gzip.conf Brotli configuration moved in /etc/nginx/conf.d/brotli.conf.disabled (disabled by default) Moving package configuration in a new plugin stack_pref.py Cleanup templates by removing all doublons (with/without php7) and replacing them with variables Updated Nginx to v1.16.1 in response to HTTP/2 vulnerabilites discovered Disable temporary adding swap feature (not working) wo stack upgrade --nginx is now able to apply new configurations during wo update , it highly reduce upgrade duration","title":"Changed"},{"location":"about/changelog/#fixed_42","text":"Error in HSTS header syntax","title":"Fixed"},{"location":"about/changelog/#v3972-2019-08-12","text":"","title":"v3.9.7.2 - 2019-08-12"},{"location":"about/changelog/#fixed_43","text":"redis.conf permissions additional fix","title":"Fixed"},{"location":"about/changelog/#v3971-2019-08-09","text":"APT Packages configuration step with wo stack upgrade to apply new configurations Cloudflare restore real_ip configuration","title":"v3.9.7.1 - 2019-08-09"},{"location":"about/changelog/#changed_31","text":"Moving package configuration in a new plugin stack_pref.py Set WordOps backend password length from 16 to 24 Upgrade framework cement to 2.6.0 Upgrade PyMySQL to 0.9.3 Upgrade Psutil to 5.6.3","title":"Changed"},{"location":"about/changelog/#fixed_44","text":"Missing import in wo sync redis.conf incorrect permissions","title":"Fixed"},{"location":"about/changelog/#v397-2019-08-02","text":"","title":"v3.9.7 - 2019-08-02"},{"location":"about/changelog/#added_24","text":"MySQL configuration tuning Cronjob to optimize MySQL databases weekly WO-kernel systemd service to automatically apply kernel tweaks on server startup Proftpd stack now secured with TLS New Nginx package built with Brotli from operating system libraries Brotli configuration with only well compressible MIME types WordPress site url automatically updated to https://domain.tld when using -le/--letsencrypt flag More informations during certificate issuance about validation mode selected --php72 as alternative for --php Automated removal of the deprecated variable ssl on; in previous Nginx ssl.conf Project Contributing guidelines Project Code of conduct","title":"Added"},{"location":"about/changelog/#changed_32","text":"wo maintenance refactored Improved debug log Updated Nginx configuration process to not overwrite files with custom data (htpasswd-wo, acl.conf etc..) Adminer updated to v4.7.2 eXtplorer updated to v2.1.13 Removed WordOps version from the Nginx header X-Powered-By to avoid possible security issues Several code quality improvements to speed up WordOps execution Few adjustements on PHP-FPM configuration (max_input_time,opcache.consistency_checks) Added /dev/urandom & /dev/shm to open_basedir in PHP-FPM configuration","title":"Changed"},{"location":"about/changelog/#fixed_45","text":"Kernel tweaks were not applied without server reboot Fail2ban standalone install wo stack purge --all error due to PHP7.3 check Nginx helper configuration during plugin install for Nginx fastcgi_cache and redis-cache phpRedisAdmin stack installation Fixed Travis CI build on pull requests Nginx server_names_hash_bucket_size variable error after WordOps upgrade","title":"Fixed"},{"location":"about/changelog/#v3962-2019-07-24","text":"","title":"v3.9.6.2 - 2019-07-24"},{"location":"about/changelog/#changed_33","text":"Improve wo update process duration Improve package install/upgrade/remove process","title":"Changed"},{"location":"about/changelog/#fixed_46","text":"phpMyAdmin archive download link archive Arguments --letsencrypt=clean/purge Incorrect directory removal during stack upgrade","title":"Fixed"},{"location":"about/changelog/#v3961-2019-07-23","text":"","title":"v3.9.6.1 - 2019-07-23"},{"location":"about/changelog/#fixed_47","text":"Typo in --letsencrypt=subdomain phpMyAdmin upgrade archive extraction Error in the command wo update . Please wo update --beta as workaround","title":"Fixed"},{"location":"about/changelog/#v396-2019-07-20","text":"","title":"v3.9.6 - 2019-07-20"},{"location":"about/changelog/#added_25","text":"New Nginx package on Ubuntu with Cloudflare HTTP/2 HPACK and Dynamic TLS records phpMyAdmin upgrade with wo stack upgrade --phpmyadmin Wildcard SSL Certificates support with DNS validation Let's Encrypt DNS API support (Cloudflare, DigitalOcean, etc ..) on domain, subdomain, and wildcard Flag --letsencrypt=clean to purge a previous SSL configuration Support for Debian 10 buster (testing - not ready for production) Fail2ban with custom jails to secure WordPress & SSH Variable keylength in /etc/wo/wo.conf to define letsencrypt certificate keylenght ProFTPd stack with UFW & Fail2ban configurationz Beta branch and command wo update --beta for beta releases Extra directives in wp-config.php (limit posts revisions, set max_memory, enable auto-update for minor-releases)","title":"Added"},{"location":"about/changelog/#fixed_48","text":"Nginx was not reloaded after enabling HSTS Netdata, Composer & Fail2Ban stack remove and purge WordPress not installed by wo site update with basic php73 sites","title":"Fixed"},{"location":"about/changelog/#v3954-2019-07-13","text":"","title":"v3.9.5.4 - 2019-07-13"},{"location":"about/changelog/#added_26","text":"New Nginx package on Ubuntu with TLS v1.3 support (OpenSSL 1.1.1c) Netdata upgrade with wo stack upgrade --netdata Netdata stack remove/purge","title":"Added"},{"location":"about/changelog/#changed_34","text":"phpRedisAdmin is now installed with the stack --admin Remove memcached - not required anymore","title":"Changed"},{"location":"about/changelog/#fixed_49","text":"phpRedisAdmin installation Duplicated locations /robots.txt after upgrade to v3.9.5.3 Let's Encrypt stack wo site update --letsencrypt/--letsencrypt=off pt-query-advisor dead link Netdata persistant configuration","title":"Fixed"},{"location":"about/changelog/#v3953-2019-06-18","text":"","title":"v3.9.5.3 - 2019-06-18"},{"location":"about/changelog/#added_27","text":"Argument --preserve with the command wo update to keep current Nginx configuration","title":"Added"},{"location":"about/changelog/#fixed_50","text":"Nginx upgrade failure when running wo update","title":"Fixed"},{"location":"about/changelog/#v3952-2019-06-17","text":"","title":"v3.9.5.2 - 2019-06-17"},{"location":"about/changelog/#added_28","text":"Non-interactive install/upgrade Argument --force with the command wo update Argument -s|--silent to perform non interactive installation","title":"Added"},{"location":"about/changelog/#changed_35","text":"robots.txt location block moved from locations-wo.conf to wpcommon(-php7).php","title":"Changed"},{"location":"about/changelog/#fixed_51","text":"WP_CACHE_KEY_SALT set twice with wpredis WordOps version check when using wo update robots.txt file download if not created PHP-FPM socket path in stub_status.conf: PR #82","title":"Fixed"},{"location":"about/changelog/#v3951-2019-05-10","text":"","title":"v3.9.5.1 - 2019-05-10"},{"location":"about/changelog/#fixed_52","text":"Adminer download link","title":"Fixed"},{"location":"about/changelog/#v395-2019-05-02","text":"","title":"v3.9.5 - 2019-05-02"},{"location":"about/changelog/#added_29","text":"IPv6 support with HTTPS Brotli support in Nginx Let's Encrypt support with --proxy Install script handle migration from EEv3 load-balancing on unix socket for php-fpm stub_status vhost for metrics --letsencrypt=subdomain option opcache optimization for php-fpm EasyEngine configuration backup before migration EasyEngine configuration cleanup after migration WordOps configuration backup before upgrade Previous acme.sh certs migration \"wo maintenance\" command to perform server package update & cleanup Support for Netdata on backend: https://server.hostname:22222/netdata/ New Stacks: composer and netdata additional argument for letsencrypt: --hsts Clean Theme for adminer Credits for tools shipped with WordOps Cache exception for Easy Digital Download Additional cache exceptions for Woocommerce MySQL monitoring with Netdata WordOps-dashboard on 22222, can be installed with wo stack install Extplorer filemanager in WordOps backend Enable OSCP Stapling with Let's Encrypt Compress database backup with pigz (faster than gzip) before updating sites Support for Ubuntu 19.04 (disco) - few php extensions missing Support for Raspbian 9 (stretch) - tested on Raspberry Pi 3b+ backup letsencrypt certificate before upgrade directives emergency_restart_threshold & emergency_restart_interval to restart php-fpm in case of failure EasyEngine cronjob removal during install Kernel tweaks via systctl.conf open_basedir on php-fpm process to forbid access with php outside of /var/www & /run/nginx-cache","title":"Added"},{"location":"about/changelog/#changed_36","text":"letsencrypt stack refactored with acme.sh letsencrypt validation with webroot folder hardened nginx ssl_ecdh_curve Update phpredisadmin Increase MySQL root password size to 24 characters Increase MySQL users password size to 24 characters Nginx locations template is the same for php7.2 & 7.3 backend SSL configuration now stored in /var/www/22222/conf/nginx/ssl.conf Install Netdata with static pre-built binaries instead of having to compile it from source Nginx updated to new stable release (1.16.0) New packages (phpmyadmin, adminer, composer) are not download in /tmp anymore","title":"Changed"},{"location":"about/changelog/#fixed_53","text":"PHP 7.3 extras when php 7.2 isn't installed acme.sh installation acme.sh alias with config home variable deb.sury.org repository gpg key Nginx upgrade from previous WordOps release Force new Nginx templates during update Error message about missing my.cnf file during upgrade PHP 7.2 & PHP 7.3 pool configuration during upgrade WordOps backup directory creation before upgrade EasyEngine database sync during migration fix command \"wo info\" phpmyadmin install with composer command \"wo clean --memcached\" phpredisadmin setup --hsts flag with basic html site hsts flag on site not secure with letsencrypt fix import of previous acme.sh certificate fix proxy webroot folder creation","title":"Fixed"},{"location":"about/changelog/#v394-2019-03-15","text":"","title":"v3.9.4 - 2019-03-15"},{"location":"about/changelog/#added_30","text":"Nginx module nginx_vts Migration script from nginx-ee to nginx-wo Support for Debian 9 (testing) New Nginx build v1.14.2","title":"Added"},{"location":"about/changelog/#changed_37","text":"Update WP-CLI version to 2.1.0 Update Adminer to 4.6.2 Update predis to v1.1.1 Refactored nginx.conf Removed HHVM Stack Removed old linux distro checks Replace wo-acme-sh by acme.sh","title":"Changed"},{"location":"about/changelog/#fixed_54","text":"Outdated Nginx ssl_ciphers suite Debian 9 nginx build","title":"Fixed"},{"location":"about/changelog/#v393-2019-03-07","text":"","title":"v3.9.3 - 2019-03-07"},{"location":"about/changelog/#changed_38","text":"Updated Nginx fastcgi_cache templates Updated Nginx redis_cache templates Updated Nginx wp-super-cache templates Updated Nginx configuration for WordPress 5.0 remove --experimental args MariaDB version bumped to 10.3 Refactored Changelog Updated WO manual Updated WO bash_completion Refactored README.md","title":"Changed"},{"location":"about/changelog/#added_31","text":"Add WebP image support with Nginx mapping Add PHP 7.3 support WordPress $skip_cache variable mapping","title":"Added"},{"location":"about/changelog/#fixed_55","text":"Nginx variable $webp_suffix on fresh install ( #21 ) wo update command ( #7 ) Fix php services management ( #12 ) Fix WP-CLI install","title":"Fixed"},{"location":"about/changelog/#v392-2018-11-30","text":"","title":"v3.9.2 - 2018-11-30"},{"location":"about/changelog/#changed_39","text":"Re-branded the fork to WordOps Codebase cleanup Set PHP 7.2 as the default Included support for newer OS releases Reworked the HTTPS configuration Added more automated testing with Redis Replaced Postfix with smtp-cli Dropped mail services Dropped w3tc support","title":"Changed"},{"location":"about/code-of-conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team lead at contact@wordops.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html","title":"Code of conduct"},{"location":"about/code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"about/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"about/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"about/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"about/code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"about/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team lead at contact@wordops.io . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"about/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html","title":"Attribution"},{"location":"about/contributing/","text":"Contributing \u00b6 Thank you for considering contributing to WordOps. We love to receive contributions. Maintaining a CLI tool for deploying WordPress with Nginx with a few key strokes require to have enough knowledge for each stack configuration and to work with non-interactive operations. We rely on community contributions and user feedback to continue providing the best CLI tool to deploy WordPress with Nginx, PHP-FPM, MariaDB and Redis. There are many ways to contribute, with varying requirements of skills, explained in detail in the following sections. All WordOps Users \u00b6 Give WordOps a GitHub star \u00b6 This is the minimum open-source users should contribute back to the projects they use. Github stars help the project gain visibility, stand out. So, if you use WordOps, consider pressing that button. It really matters . Spread the word \u00b6 Community growth allows the project to attract new talent willing to contribute. This talent is then developing new features and improves the project. These new features and improvements attract more users and so on. It is a loop. So, post about WordOps, add a review or suggest it as an alternative to another app on alternativeto.net , present it to local meetups you attend, let your online social network or twitter, facebook, reddit, etc. know you are using it. The more people involved, the faster the project evolves . Provide feedback \u00b6 Is there anything that bothers you about WordOps? Did you experience an issue while installing it or using it? Would you like to see it evolve to you need? Let us know. Open a github issue to discuss it or open a thread on our Community Forum . Feedback is very important for open-source projects. We can't commit we will do everything, but your feedback influences our road-map significantly. Experienced Users \u00b6 Help other users \u00b6 As the project grows, an increasing share of our time is spent on supporting this community of users in terms of answering questions, of helping users understand how WordOps works and find their way with it. Helping other users is crucial. It allows the developers and maintainers of the project to focus on improving it. Improve documentation \u00b6 All of our documentation is in markdown (.md) files inside the WordOps GitHub project. All of our HTML documentation is generated from these files. At the top right of each documentation page you will see a pencil, that leads you directly to the markdown file that was used to generated it. Don't be afraid to click it and edit any of these documents and submit a GitHub Pull Request with your corrections/additions. Developers \u00b6 Languages and Libraries \u00b6 WordOps is built with the CLI Framework Cement, with the release v2.8.0 currently. Python Version \u00b6 WordOps source code is fully developed in python 3.x version. Coding Format \u00b6 We are following PEP8 style guide for coding WordOps. Libraries \u00b6 Here is the List of Libraries we used for WordOps pystache python-apt pynginxconfig PyMySQL psutil sh SQLAlchemy requests distro Structure \u00b6 WordOps application can be found in the wo directory of the github repository Here the structure of WordOps with additional comments wo \u251c\u2500\u2500 cli # the main directory of the application \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 bootstrap.py # Cement framework \u2502 \u251c\u2500\u2500 controllers # Cement framework \u2502 \u251c\u2500\u2500 ext # Cement framework \u2502 \u251c\u2500\u2500 main.py # Cement framework \u2502 \u251c\u2500\u2500 plugins # WordOps commands (stack, site, update .. etc) \u2502 \u2514\u2500\u2500 templates # WordOps configuration template \u251c\u2500\u2500 core # main functions used in WordOps plugins \u2514\u2500\u2500 utils # testing helper Plugins Directory: Here the list of plugins with the related command or a short description \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 clean.py # wo clean \u2502 \u251c\u2500\u2500 debug.py # wo debug \u2502 \u251c\u2500\u2500 import_slow_log.py # wo import-slow-log (from EE v3) \u2502 \u251c\u2500\u2500 info.py # wo info \u2502 \u251c\u2500\u2500 log.py # wo log \u2502 \u251c\u2500\u2500 maintenance.py # wo maintenance \u2502 \u251c\u2500\u2500 models.py # site information structure for WO internal DB \u2502 \u251c\u2500\u2500 secure.py # wo secure \u2502 \u251c\u2500\u2500 site.py # wo site \u2502 \u251c\u2500\u2500 site_functions.py # functions used by site.py \u2502 \u251c\u2500\u2500 sitedb.py # WO internal SQlite3 database functions \u2502 \u251c\u2500\u2500 stack.py # wo stack install/remove/purge \u2502 \u251c\u2500\u2500 stack_migrate.py # wo stack migrate \u2502 \u251c\u2500\u2500 stack_pref.py # stack configuration used by stack.py & stack_upgrade.py \u2502 \u251c\u2500\u2500 stack_services.py # wo stack start/stop/restart/reload \u2502 \u251c\u2500\u2500 stack_upgrade.py # wo stack upgrade \u2502 \u251c\u2500\u2500 sync.py # wo sync \u2502 \u2514\u2500\u2500 update.py # wo update Development Environnment \u00b6 Contributions Ground Rules \u00b6 Code of Conduct and CLA \u00b6 We expect all contributors to abide by the Contributor Covenant Code of Conduct .","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Thank you for considering contributing to WordOps. We love to receive contributions. Maintaining a CLI tool for deploying WordPress with Nginx with a few key strokes require to have enough knowledge for each stack configuration and to work with non-interactive operations. We rely on community contributions and user feedback to continue providing the best CLI tool to deploy WordPress with Nginx, PHP-FPM, MariaDB and Redis. There are many ways to contribute, with varying requirements of skills, explained in detail in the following sections.","title":"Contributing"},{"location":"about/contributing/#all-wordops-users","text":"","title":"All WordOps Users"},{"location":"about/contributing/#give-wordops-a-github-star","text":"This is the minimum open-source users should contribute back to the projects they use. Github stars help the project gain visibility, stand out. So, if you use WordOps, consider pressing that button. It really matters .","title":"Give WordOps a GitHub star"},{"location":"about/contributing/#spread-the-word","text":"Community growth allows the project to attract new talent willing to contribute. This talent is then developing new features and improves the project. These new features and improvements attract more users and so on. It is a loop. So, post about WordOps, add a review or suggest it as an alternative to another app on alternativeto.net , present it to local meetups you attend, let your online social network or twitter, facebook, reddit, etc. know you are using it. The more people involved, the faster the project evolves .","title":"Spread the word"},{"location":"about/contributing/#provide-feedback","text":"Is there anything that bothers you about WordOps? Did you experience an issue while installing it or using it? Would you like to see it evolve to you need? Let us know. Open a github issue to discuss it or open a thread on our Community Forum . Feedback is very important for open-source projects. We can't commit we will do everything, but your feedback influences our road-map significantly.","title":"Provide feedback"},{"location":"about/contributing/#experienced-users","text":"","title":"Experienced Users"},{"location":"about/contributing/#help-other-users","text":"As the project grows, an increasing share of our time is spent on supporting this community of users in terms of answering questions, of helping users understand how WordOps works and find their way with it. Helping other users is crucial. It allows the developers and maintainers of the project to focus on improving it.","title":"Help other users"},{"location":"about/contributing/#improve-documentation","text":"All of our documentation is in markdown (.md) files inside the WordOps GitHub project. All of our HTML documentation is generated from these files. At the top right of each documentation page you will see a pencil, that leads you directly to the markdown file that was used to generated it. Don't be afraid to click it and edit any of these documents and submit a GitHub Pull Request with your corrections/additions.","title":"Improve documentation"},{"location":"about/contributing/#developers","text":"","title":"Developers"},{"location":"about/contributing/#languages-and-libraries","text":"WordOps is built with the CLI Framework Cement, with the release v2.8.0 currently.","title":"Languages and Libraries"},{"location":"about/contributing/#python-version","text":"WordOps source code is fully developed in python 3.x version.","title":"Python Version"},{"location":"about/contributing/#coding-format","text":"We are following PEP8 style guide for coding WordOps.","title":"Coding Format"},{"location":"about/contributing/#libraries","text":"Here is the List of Libraries we used for WordOps pystache python-apt pynginxconfig PyMySQL psutil sh SQLAlchemy requests distro","title":"Libraries"},{"location":"about/contributing/#structure","text":"WordOps application can be found in the wo directory of the github repository Here the structure of WordOps with additional comments wo \u251c\u2500\u2500 cli # the main directory of the application \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 bootstrap.py # Cement framework \u2502 \u251c\u2500\u2500 controllers # Cement framework \u2502 \u251c\u2500\u2500 ext # Cement framework \u2502 \u251c\u2500\u2500 main.py # Cement framework \u2502 \u251c\u2500\u2500 plugins # WordOps commands (stack, site, update .. etc) \u2502 \u2514\u2500\u2500 templates # WordOps configuration template \u251c\u2500\u2500 core # main functions used in WordOps plugins \u2514\u2500\u2500 utils # testing helper Plugins Directory: Here the list of plugins with the related command or a short description \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 clean.py # wo clean \u2502 \u251c\u2500\u2500 debug.py # wo debug \u2502 \u251c\u2500\u2500 import_slow_log.py # wo import-slow-log (from EE v3) \u2502 \u251c\u2500\u2500 info.py # wo info \u2502 \u251c\u2500\u2500 log.py # wo log \u2502 \u251c\u2500\u2500 maintenance.py # wo maintenance \u2502 \u251c\u2500\u2500 models.py # site information structure for WO internal DB \u2502 \u251c\u2500\u2500 secure.py # wo secure \u2502 \u251c\u2500\u2500 site.py # wo site \u2502 \u251c\u2500\u2500 site_functions.py # functions used by site.py \u2502 \u251c\u2500\u2500 sitedb.py # WO internal SQlite3 database functions \u2502 \u251c\u2500\u2500 stack.py # wo stack install/remove/purge \u2502 \u251c\u2500\u2500 stack_migrate.py # wo stack migrate \u2502 \u251c\u2500\u2500 stack_pref.py # stack configuration used by stack.py & stack_upgrade.py \u2502 \u251c\u2500\u2500 stack_services.py # wo stack start/stop/restart/reload \u2502 \u251c\u2500\u2500 stack_upgrade.py # wo stack upgrade \u2502 \u251c\u2500\u2500 sync.py # wo sync \u2502 \u2514\u2500\u2500 update.py # wo update","title":"Structure"},{"location":"about/contributing/#development-environnment","text":"","title":"Development Environnment"},{"location":"about/contributing/#contributions-ground-rules","text":"","title":"Contributions Ground Rules"},{"location":"about/contributing/#code-of-conduct-and-cla","text":"We expect all contributors to abide by the Contributor Covenant Code of Conduct .","title":"Code of Conduct and CLA"},{"location":"about/from-easyengine-to-wordops/","text":"From EasyEngine to WordOps \u00b6 WordOps was forked from EasyEngine v3, with the objective of providing an up-to-date version of EasyEngine v3, stable and ready for production. It also include several features missing in EEv3 but we want to keep WordOps as stable as possible and that's why we are not going to add new features in each new release. Fundamental changes \u00b6 We've deprecated the mail stack. As an alternative, you can take a look at Mail-in-a-Box , iRedMail or Caesonia . As Roundcube alternative, there is Rainloop or Afterlogic WebMail Support for W3TC is dropped as a security precaution. PHP 5.6 and 7.0 has been replaced by PHP 7.2 and PHP 7.3. Nginx-ee package has been replaced by Nginx-wo (based on Nginx stable v1.16.1 with Brotli support) HHVM stack has been removed Memcached stack has been removed Let's Encrypt stack isn't based on letsencrypt-auto anymore, we use acme.sh to handle SSL certificates If you are going to migrate from EasyEngine v3, here is some important information: Previous PHP upstreams in Nginx will not be overwritted PHP 5.6 and PHP 7.0 will not be removed or uninstalled Previous Nginx common configurations will not be overwritted","title":"From EasyEngine to WordOps"},{"location":"about/from-easyengine-to-wordops/#from-easyengine-to-wordops","text":"WordOps was forked from EasyEngine v3, with the objective of providing an up-to-date version of EasyEngine v3, stable and ready for production. It also include several features missing in EEv3 but we want to keep WordOps as stable as possible and that's why we are not going to add new features in each new release.","title":"From EasyEngine to WordOps"},{"location":"about/from-easyengine-to-wordops/#fundamental-changes","text":"We've deprecated the mail stack. As an alternative, you can take a look at Mail-in-a-Box , iRedMail or Caesonia . As Roundcube alternative, there is Rainloop or Afterlogic WebMail Support for W3TC is dropped as a security precaution. PHP 5.6 and 7.0 has been replaced by PHP 7.2 and PHP 7.3. Nginx-ee package has been replaced by Nginx-wo (based on Nginx stable v1.16.1 with Brotli support) HHVM stack has been removed Memcached stack has been removed Let's Encrypt stack isn't based on letsencrypt-auto anymore, we use acme.sh to handle SSL certificates If you are going to migrate from EasyEngine v3, here is some important information: Previous PHP upstreams in Nginx will not be overwritted PHP 5.6 and PHP 7.0 will not be removed or uninstalled Previous Nginx common configurations will not be overwritted","title":"Fundamental changes"},{"location":"about/give-wordops-github-star/","text":"Give WordOps a Github star \u00b6 Github stars are very important to give more visibility to WordOps, and attract people with skills willing to contribute to it. It's also a source of motivation for us, because that mean people found our work useful. WordOps stable was released only few month ago, but we added several new features since the first release as well as many improvements and bugfixes. To keep this fast release cycle, we will need more users, more suggestions, more bug reports and more contributions. So give WordOps a Github star, by following the link at the top right of this site, if you enjoyed using WordOps.","title":"Give WordOps a Github star"},{"location":"about/give-wordops-github-star/#give-wordops-a-github-star","text":"Github stars are very important to give more visibility to WordOps, and attract people with skills willing to contribute to it. It's also a source of motivation for us, because that mean people found our work useful. WordOps stable was released only few month ago, but we added several new features since the first release as well as many improvements and bugfixes. To keep this fast release cycle, we will need more users, more suggestions, more bug reports and more contributions. So give WordOps a Github star, by following the link at the top right of this site, if you enjoyed using WordOps.","title":"Give WordOps a Github star"},{"location":"about/redistributed/","text":"Redistributed Software \u00b6 WordOps redistribute the following third-party software: -","title":"Redistributed Software"},{"location":"about/redistributed/#redistributed-software","text":"WordOps redistribute the following third-party software: -","title":"Redistributed Software"},{"location":"about/what-is-wordops/","text":"What is WordOps ? \u00b6 WordOps is a command-line server control panel. It's a lightweight solution to deploy an highly optimized LNMP stack.","title":"What is WordOps ?"},{"location":"about/what-is-wordops/#what-is-wordops","text":"WordOps is a command-line server control panel. It's a lightweight solution to deploy an highly optimized LNMP stack.","title":"What is WordOps ?"},{"location":"commands/clean/","text":"clean \u00b6 Clean NGINX FastCGI cache, Opcache, Redis Cache Usage: wo clean [ options ] If options are empty, default is --fastcgi . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean Redis cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/clean/#clean","text":"Clean NGINX FastCGI cache, Opcache, Redis Cache Usage: wo clean [ options ] If options are empty, default is --fastcgi . optional arguments description --fastcgi clean Nginx fastcgi_cache --redis clean Redis cache --opcache clean opcache --all clean all cache","title":"clean"},{"location":"commands/debug/","text":"debug \u00b6 Used for server level debugging Usage: wo debug [ options ]","title":"debug"},{"location":"commands/debug/#debug","text":"Used for server level debugging Usage: wo debug [ options ]","title":"debug"},{"location":"commands/info/","text":"info \u00b6 Display configuration information related to Nginx, PHP and MySQL Usage: wo info [ options ] Without any option, wo info will display all informations. optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --php74 Get PHP 7.4 configuration information --php80 Get PHP 8.0 configuration information --php81 Get PHP 8.1 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/info/#info","text":"Display configuration information related to Nginx, PHP and MySQL Usage: wo info [ options ] Without any option, wo info will display all informations. optional arguments description --nginx Get Nginx configuration information --php Get PHP 7.2 configuration information --php73 Get PHP 7.3 configuration information --php74 Get PHP 7.4 configuration information --php80 Get PHP 8.0 configuration information --php81 Get PHP 8.1 configuration information --mysql Get MySQL configuration information","title":"info"},{"location":"commands/log/","text":"log \u00b6 Perform operations on Nginx, PHP and MySQL log files Usage: wo log [ <site_name> ] [ options ] subcommand description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file log show \u00b6 Show Nginx, PHP, MySQL log file Usage: wo log show [ <site_name> ] [ options ] </site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log"},{"location":"commands/log/#log","text":"Perform operations on Nginx, PHP and MySQL log files Usage: wo log [ <site_name> ] [ options ] subcommand description gzip GZip Nginx, PHP, MySQL log file mail Mail Nginx, PHP, MySQL log file show Show Nginx, PHP, MySQL log file reset Reset Nginx, PHP, MySQL log file","title":"log"},{"location":"commands/log/#log-show","text":"Show Nginx, PHP, MySQL log file Usage: wo log show [ <site_name> ] [ options ] </site_name> optional arguments description --nginx Show Nginx Error logs file --php Show PHP Error logs file --mysql Show MySQL logs file --wp Show Site specific WordPress logs file","title":"log show"},{"location":"commands/maintenance/","text":"maintenance \u00b6 Update apt-cache and upgrade packages. Usage: wo maintenance This command is equivalent to: apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/maintenance/#maintenance","text":"Update apt-cache and upgrade packages. Usage: wo maintenance This command is equivalent to: apt update apt dist-upgrade apt autoremove --purge apt autoclean Package update is performed in a non-interactive way, with the \"--force-confold\" policy, to never overwrite packages configurations.","title":"maintenance"},{"location":"commands/secure/","text":"Secure \u00b6 Secure command secure WordOps backend auth, ip and port Usage: wo secure [ options ] Options: argument description --auth Set backend user credentials (user and) --port Set backend port (default: 22222) --ip Set the list of IP(s) allowed to access without authentification --ssh Harden SSH security --sshport Set custom ssh port (default: 22) --allowpassword Allow password authentification when hardening SSH security --force Force hardening SSH security without being prompt for confirmation WordOps uses Basic Auth to protect the backend from unauthorize people. To change the authorization method, backend's port,... You can use wo secure command. Change backend credential \u00b6 The user name and password of WordOps backend is showed when you create a first site. If you don't remember and want to reset, please use below command. wo secure --auth Provide HTTP authentication user name [ admin ] :master Provide HTTP authentication password [ 5zVFELjHjShPPFr7qkoMzavP ] : Short hand: wo secure --auth YourUsername aSecurePassword Change backend port \u00b6 In case you want to change WordOps backend port from 22222 , use this command: wo secure --port WordOps admin port [ 22222 ] :23456 Reload: nginx [ OK ] Successfully port changed 23456 Change whitelist IPs \u00b6 By default , WordOps only allow IP 127.0.0.1 to connect to their backend. To allow your IP (ex. 1.1.1.1 ), use below command: wo secure --ip Enter the comma separated IP addresses to white list [ 127 .0.0.1 ] :1.1.1.1 Successfully added IP address in acl.conf file You can also edit directly the file /etc/nginx/common/acl.conf Harden SSH security \u00b6 Warning To harden SSH security, WordOps render the configuration sshd_config from a template. In this template, root authentification with password is forbidden and by default password authentification is disabled. You can use the flag --allowpassword with --ssh to allow password authentification, but before running this command please make sure you will not be locked out of your server. Using password-less authentification with SSH keys is highly recommended. To harden SSH security you can use the command : wo secure --ssh Additionally, if you want to allow password authentification (not recommended), you can use : wo secure --ssh --allowpassword Change SSH port \u00b6 To avoid bruteforce on SSH, it's recommended to use another port than the default port (22). Usage : wo secure --sshport <port> Exemple : wo secure --sshport 2022 WordOps will automatically allow the new SSH port if UFW is enabled.","title":"secure"},{"location":"commands/secure/#secure","text":"Secure command secure WordOps backend auth, ip and port Usage: wo secure [ options ] Options: argument description --auth Set backend user credentials (user and) --port Set backend port (default: 22222) --ip Set the list of IP(s) allowed to access without authentification --ssh Harden SSH security --sshport Set custom ssh port (default: 22) --allowpassword Allow password authentification when hardening SSH security --force Force hardening SSH security without being prompt for confirmation WordOps uses Basic Auth to protect the backend from unauthorize people. To change the authorization method, backend's port,... You can use wo secure command.","title":"Secure"},{"location":"commands/secure/#change-backend-credential","text":"The user name and password of WordOps backend is showed when you create a first site. If you don't remember and want to reset, please use below command. wo secure --auth Provide HTTP authentication user name [ admin ] :master Provide HTTP authentication password [ 5zVFELjHjShPPFr7qkoMzavP ] : Short hand: wo secure --auth YourUsername aSecurePassword","title":"Change backend credential"},{"location":"commands/secure/#change-backend-port","text":"In case you want to change WordOps backend port from 22222 , use this command: wo secure --port WordOps admin port [ 22222 ] :23456 Reload: nginx [ OK ] Successfully port changed 23456","title":"Change backend port"},{"location":"commands/secure/#change-whitelist-ips","text":"By default , WordOps only allow IP 127.0.0.1 to connect to their backend. To allow your IP (ex. 1.1.1.1 ), use below command: wo secure --ip Enter the comma separated IP addresses to white list [ 127 .0.0.1 ] :1.1.1.1 Successfully added IP address in acl.conf file You can also edit directly the file /etc/nginx/common/acl.conf","title":"Change whitelist IPs"},{"location":"commands/secure/#harden-ssh-security","text":"Warning To harden SSH security, WordOps render the configuration sshd_config from a template. In this template, root authentification with password is forbidden and by default password authentification is disabled. You can use the flag --allowpassword with --ssh to allow password authentification, but before running this command please make sure you will not be locked out of your server. Using password-less authentification with SSH keys is highly recommended. To harden SSH security you can use the command : wo secure --ssh Additionally, if you want to allow password authentification (not recommended), you can use : wo secure --ssh --allowpassword","title":"Harden SSH security"},{"location":"commands/secure/#change-ssh-port","text":"To avoid bruteforce on SSH, it's recommended to use another port than the default port (22). Usage : wo secure --sshport <port> Exemple : wo secure --sshport 2022 WordOps will automatically allow the new SSH port if UFW is enabled.","title":"Change SSH port"},{"location":"commands/site/","text":"site \u00b6 Performs website specific operations Usage: wo site ( command ) [ options ] subcommand description create Create site with WordOps update Update site type or configuration info Get site information show Show site Nginx configuration edit Edit site Nginx configuration delete Delete site list List all sites enable Enable site in Nginx disable Disable site in Nginx cd Move into site webroot directory site create \u00b6 Usage \u00b6 wo site create [ <site_name> ] [ options ] Basic sites \u00b6 HTML site \u00b6 To create simple html website use this command. wo site create site.tld --html PHP site \u00b6 To create simple php website with no database use this command. wo site create site.tld --php PHP+MySQL site \u00b6 To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in /var/www/site.tld/wo-config.php . Proxy site \u00b6 To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy = 127 .0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port: 80. WordPress \u00b6 Following are the WordPress website types you can create website based on Cache Mechanism Standard WordPress site wo site create site.tld --wp WordPress site + Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site + Redis cache wo site create site.tld --wpredis WordPress site + WP-Super-cache wo site create site.tld --wpsc WordPress site + WP-Rocket cache wo site create site.tld --wprocket WordPress site + Cache enabler wo site create site.tld --wpce Enable Ultimate Nginx bad blocker on new site wo site create site.tld --ngxblocker Cheatsheet \u00b6 Cache single site multisite w/ subdir multisite w/ subdom NO Cache --wp --wpsubdir --wpsubdomain WP Super Cache plugin --wpsc --wpsubdir --wpsc --wpsubdomain --wpsc Nginx fastcgi_cache --wpfc --wpsubdir --wpfc --wpsubdomain --wpfc Redis cache --wpredis --wpsubdir --wpredis --wpsubdomain --wpredis WP-Rocket plugin --wprocket --wpsubdir --wprocket --wpsubdomain --wprocket Cache-Enabler plugin --wpce --wpsubdir --wpce --wpsubdomain --wpce Extra settings \u00b6 Define WordPress administrator user \u00b6 To define WordPress administrator user during site creation use wo site create site.tld --user = admin This will create admin as administrator user in WordPress during installation. If not defined it will take git user name. Define WordPress administrator password \u00b6 To define WordPress administrator password during site creation use wo site create site.tld --pass = password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this: --pass = 'my$secret&' Define WordPress administrator email \u00b6 To define WordPress administrator email during site creation use wo site create site.tld --email = wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email. Virtual host only \u00b6 To create WordPress site and database without installing it, you can use --vhostonly during site creation For example, you can only create vhost and database without installing WordPress using following command: wo site create site.tld --wp --vhostonly Additional features \u00b6 Let's Encrypt \u00b6 WordOps supports Let's Encrypt out of the box. Domain \u00b6 wo site create site.tld --wp --letsencrypt This command will issue a certificate for site.tld + www.site.tld . Subdomain \u00b6 You can also issue Let's Encrypt certificates with subdomains. wo site create sub.site.tld --wp --letsencrypt Since the release v3.9.8.4 , WordOps will automatically detect if the site is a domain or a subdomain, and will not issue a certificate for www alias with subdomains Wildcard \u00b6 Since the release v3.9.6 , WordOps supports Let's Encrypt Wildcard SSL certificates with DNS API validation. Before issuing a wildcard certificate, it require to define the DNS API crendentials for acme.sh. Example with Cloudflare DNS: export CF_Key = \"d7eab56a903f25dd4xxxxxxxxxxxxxxxxxxxx\" export CF_Email = \"email@domain.com\" Info More example in our guide about DNS API configuration After you define those variables with the command export , you can issue your certificate with wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --dns=dns_cf can be replaced with another DNS provider supported by acme.sh. For DigitalOcean, it would be --dns=dns_dgon HSTS \u00b6 Additionally you can enable HSTS on your site by adding the flag --hsts with --letsencrypt wo site create site.tld --wp --letsencrypt --hsts PHP 7.3 & PHP 7.4 \u00b6 To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 For a WordPress site running on PHP 7.4: wo site create site.tld --wp --php74 To create simple php site running with PHP 7.3 with no database, you can use this command: wo site create site.tld --php73 This is the same with PHP 7.4: wo site create site.tld --php74 site update \u00b6 Update site configuration Pre-update policy \u00b6 wo site update command follows following procedure while updating current site. Before Updating any site: Creates nginx configuration backup for site. Moves htdocs to backup while updating HTML/PHP/MySQL site. Creates database dump in backup. While updating current MySQL site WordOps uses same database for installing WordPress tables. All these backup are stored outside htdocs, in backup directory. WordOps possible Update Options \u00b6 .ritz .waffle a{color:inherit}.ritz .waffle .s2{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s10{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#f3f3f3;text-align:center;color:#6aa84f;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s11{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:center;color:#cc4125;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s9{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#f3f3f3;text-align:center;color:#cc4125;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s3{border-right:none;border-bottom:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s1{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:left;color:#000;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s4{border-left:none;border-right:none;border-bottom:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s6{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:center;color:#000;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s5{border-left:none;border-bottom:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s8{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#f3f3f3;text-align:center;color:#000;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s0{border-bottom:1px SOLID #000;background-color:#fff;text-align:center;font-weight:bold;color:#20124d;font-family:'Arial';font-size:12pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s7{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:center;color:#6aa84f;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px} WordOps Possible Site Update Options html php mysql wp wpfc wpsc wpredis wpsubdom wpsubdom + wpfc wpsubdom + wpsc wpsubdir wpsubdir + wpfc wpsubdir + wpsc wpsubdir + wpsc html - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 php \u2718 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 mysql \u2718 \u2718 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wp \u2718 \u2718 \u2718 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpfc \u2718 \u2718 \u2718 \u2714 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpsc \u2718 \u2718 \u2718 \u2714 \u2714 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpredis \u2718 \u2718 \u2718 \u2714 \u2714 \u2714 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpsubdom \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 - \u2714 \u2714 \u2718 \u2718 \u2718 \u2718 wpsubdom+wpfc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 - \u2714 \u2718 \u2718 \u2718 \u2718 wpsubdom+wpsc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 \u2714 \u2718 \u2718 \u2718 \u2718 wpsubdom+wpredis \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 - \u2718 \u2718 \u2718 \u2718 wpsubdir \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 - \u2714 \u2714 \u2714 wpsubdir+wpfc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 - \u2714 \u2714 wpsubdir+wpsc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 - \u2714 wpsubdir+wpredis \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 \u2714 - function posObj(sheet,id,row,col,x,y) { var rtl=false; var sheetElement=document.getElementById(sheet); if(!sheetElement) { sheetElement=document.getElementById(sheet+'-grid-container'); } if(sheetElement) { rtl=sheetElement.getAttribute('dir')=='rtl'; } var r=document.getElementById(sheet+'R'+row); var c=document.getElementById(sheet+'C'+col); if(r&&c) { var objElement=document.getElementById(id); var s=objElement.style; var t=y; while(r&&r!=sheetElement) { t+=r.offsetTop; r=r.offsetParent; } var offsetX=x; while(c&&c!=sheetElement) { offsetX+=c.offsetLeft; c=c.offsetParent; } if(rtl) { offsetX-=objElement.offsetWidth; } s.left=offsetX+'px'; s.top=t+'px'; s.display='block'; s.border='1px solid #000000'; } }; function posObjs() { }; posObjs(); Example: updating site from basic wp to wp + fastcgi_cache: Usage \u00b6 Usage: wo site update [ <site_name> ] [ options ] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php72 update site to PHP 7.2 --php73 update site to PHP 7.3 --php74 update site to PHP 7.4 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache plugin --wpredis update site to WordPress with redis-cache --wprocket update site to WordPress with WP-Rocket plugin --wpce update site to WordPress with Cache-Enabler plugin --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , -le secure site with Let's Encrypt SSL certificate --letsencrypt=wildcard secure site/multisite with a wildcard SSL certificates --letsencrypt=off disable Let's Encrypt SSL certificate --dns , --dns=<dns api provider> issue Let's Encrypt certificate with DNS validation. default: dns_cf --hsts , --hsts=off Enable or disable HSTS on site secured with Let's Encrypt --ngxblocker , --ngxblocker=off Enable or disable Ultimate Nginx bad blocker Examples \u00b6 Update a WordPress site without cache ( --wp ), to WordPress with Nginx fastcgi_cache wo site update site.tld --wpfc Update a WordPress site running with PHP 7.2 to PHP 7.3 wo site update site.tld --php73 Update a site running with PHP 7.3 to PHP 7.2 wo site update site.tld --php72 Update a site running with PHP 7.2 or PHP 7.3 to PHP 7.4 wo site update site.tld --php74 Update a WordPress site with Nginx fastcgi_cache to WordPress with redis-cache wo site update site.tld --wpredis site info \u00b6 Get site information including cache backend, PHP version or user database credentials Usage: wo site info [ <site_name> ] site delete \u00b6 Delete site including webroot and database: Usage: wo site delete [ <site_name> ] [ options ] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database site edit \u00b6 Edit site Nginx configuration Usage: wo site edit [ <site_name> ] You will be prompted to choose the text editor you prefer. Nano is highly recommended for beginners. site cd \u00b6 Move into a site webroot directory Usage: wo site cd [ <site_name> ] site list \u00b6 List all sites managed with WordOps Usage: wo site list site show \u00b6 Display site Nginx configuration Usage: wo site show [ <site_name> ] site disable \u00b6 Disable site Nginx vhost Usage: wo site disable [ <site_name> ] site enable \u00b6 Enable site Nginx vhost Usage: wo site enable [ <site_name> ]","title":"site"},{"location":"commands/site/#site","text":"Performs website specific operations Usage: wo site ( command ) [ options ] subcommand description create Create site with WordOps update Update site type or configuration info Get site information show Show site Nginx configuration edit Edit site Nginx configuration delete Delete site list List all sites enable Enable site in Nginx disable Disable site in Nginx cd Move into site webroot directory","title":"site"},{"location":"commands/site/#site-create","text":"","title":"site create"},{"location":"commands/site/#usage","text":"wo site create [ <site_name> ] [ options ]","title":"Usage"},{"location":"commands/site/#basic-sites","text":"","title":"Basic sites"},{"location":"commands/site/#html-site","text":"To create simple html website use this command. wo site create site.tld --html","title":"HTML site"},{"location":"commands/site/#php-site","text":"To create simple php website with no database use this command. wo site create site.tld --php","title":"PHP site"},{"location":"commands/site/#phpmysql-site","text":"To create simple php website with database use this command. wo site create site.tld --mysql NOTE: You can find MySQL database details in /var/www/site.tld/wo-config.php .","title":"PHP+MySQL site"},{"location":"commands/site/#proxy-site","text":"To create site with Proxy configuration you can use --proxy during site creation wo site create site.tld --proxy = 127 .0.0.1:3000 This will create proxy site site.tld with proxy destination as 127.0.0.1:3000. Port is optional. Default port: 80.","title":"Proxy site"},{"location":"commands/site/#wordpress","text":"Following are the WordPress website types you can create website based on Cache Mechanism Standard WordPress site wo site create site.tld --wp WordPress site + Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site + Redis cache wo site create site.tld --wpredis WordPress site + WP-Super-cache wo site create site.tld --wpsc WordPress site + WP-Rocket cache wo site create site.tld --wprocket WordPress site + Cache enabler wo site create site.tld --wpce Enable Ultimate Nginx bad blocker on new site wo site create site.tld --ngxblocker","title":"WordPress"},{"location":"commands/site/#cheatsheet","text":"Cache single site multisite w/ subdir multisite w/ subdom NO Cache --wp --wpsubdir --wpsubdomain WP Super Cache plugin --wpsc --wpsubdir --wpsc --wpsubdomain --wpsc Nginx fastcgi_cache --wpfc --wpsubdir --wpfc --wpsubdomain --wpfc Redis cache --wpredis --wpsubdir --wpredis --wpsubdomain --wpredis WP-Rocket plugin --wprocket --wpsubdir --wprocket --wpsubdomain --wprocket Cache-Enabler plugin --wpce --wpsubdir --wpce --wpsubdomain --wpce","title":"Cheatsheet"},{"location":"commands/site/#extra-settings","text":"","title":"Extra settings"},{"location":"commands/site/#define-wordpress-administrator-user","text":"To define WordPress administrator user during site creation use wo site create site.tld --user = admin This will create admin as administrator user in WordPress during installation. If not defined it will take git user name.","title":"Define WordPress administrator user"},{"location":"commands/site/#define-wordpress-administrator-password","text":"To define WordPress administrator password during site creation use wo site create site.tld --pass = password This will set defined password as administrator password. If not defined it will generate random pasword for administrator. If you have special characters, you can quote them using single quotes like this: --pass = 'my$secret&'","title":"Define WordPress administrator password"},{"location":"commands/site/#define-wordpress-administrator-email","text":"To define WordPress administrator email during site creation use wo site create site.tld --email = wo@site.tld This will set defined email as administrator email. If not defined it will set git email as administrator email.","title":"Define WordPress administrator email"},{"location":"commands/site/#virtual-host-only","text":"To create WordPress site and database without installing it, you can use --vhostonly during site creation For example, you can only create vhost and database without installing WordPress using following command: wo site create site.tld --wp --vhostonly","title":"Virtual host only"},{"location":"commands/site/#additional-features","text":"","title":"Additional features"},{"location":"commands/site/#lets-encrypt","text":"WordOps supports Let's Encrypt out of the box.","title":"Let's Encrypt"},{"location":"commands/site/#domain","text":"wo site create site.tld --wp --letsencrypt This command will issue a certificate for site.tld + www.site.tld .","title":"Domain"},{"location":"commands/site/#subdomain","text":"You can also issue Let's Encrypt certificates with subdomains. wo site create sub.site.tld --wp --letsencrypt Since the release v3.9.8.4 , WordOps will automatically detect if the site is a domain or a subdomain, and will not issue a certificate for www alias with subdomains","title":"Subdomain"},{"location":"commands/site/#wildcard","text":"Since the release v3.9.6 , WordOps supports Let's Encrypt Wildcard SSL certificates with DNS API validation. Before issuing a wildcard certificate, it require to define the DNS API crendentials for acme.sh. Example with Cloudflare DNS: export CF_Key = \"d7eab56a903f25dd4xxxxxxxxxxxxxxxxxxxx\" export CF_Email = \"email@domain.com\" Info More example in our guide about DNS API configuration After you define those variables with the command export , you can issue your certificate with wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --dns=dns_cf can be replaced with another DNS provider supported by acme.sh. For DigitalOcean, it would be --dns=dns_dgon","title":"Wildcard"},{"location":"commands/site/#hsts","text":"Additionally you can enable HSTS on your site by adding the flag --hsts with --letsencrypt wo site create site.tld --wp --letsencrypt --hsts","title":"HSTS"},{"location":"commands/site/#php-73-php-74","text":"To create site with PHP 7.3 you can use --php73 during site creation For example, you can create WordPress site running on PHP 7.3 using following command: wo site create site.tld --wp --php73 For a WordPress site running on PHP 7.4: wo site create site.tld --wp --php74 To create simple php site running with PHP 7.3 with no database, you can use this command: wo site create site.tld --php73 This is the same with PHP 7.4: wo site create site.tld --php74","title":"PHP 7.3 &amp; PHP 7.4"},{"location":"commands/site/#site-update","text":"Update site configuration","title":"site update"},{"location":"commands/site/#pre-update-policy","text":"wo site update command follows following procedure while updating current site. Before Updating any site: Creates nginx configuration backup for site. Moves htdocs to backup while updating HTML/PHP/MySQL site. Creates database dump in backup. While updating current MySQL site WordOps uses same database for installing WordPress tables. All these backup are stored outside htdocs, in backup directory.","title":"Pre-update policy"},{"location":"commands/site/#wordops-possible-update-options","text":".ritz .waffle a{color:inherit}.ritz .waffle .s2{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s10{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#f3f3f3;text-align:center;color:#6aa84f;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s11{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:center;color:#cc4125;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s9{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#f3f3f3;text-align:center;color:#cc4125;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s3{border-right:none;border-bottom:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s1{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:left;color:#000;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s4{border-left:none;border-right:none;border-bottom:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s6{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:center;color:#000;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s5{border-left:none;border-bottom:1px SOLID #000;background-color:#666;text-align:center;color:#fff;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s8{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#f3f3f3;text-align:center;color:#000;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s0{border-bottom:1px SOLID #000;background-color:#fff;text-align:center;font-weight:bold;color:#20124d;font-family:'Arial';font-size:12pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px}.ritz .waffle .s7{border-bottom:1px SOLID #000;border-right:1px SOLID #000;background-color:#fff;text-align:center;color:#6aa84f;font-family:'Arial';font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px} WordOps Possible Site Update Options html php mysql wp wpfc wpsc wpredis wpsubdom wpsubdom + wpfc wpsubdom + wpsc wpsubdir wpsubdir + wpfc wpsubdir + wpsc wpsubdir + wpsc html - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 php \u2718 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 mysql \u2718 \u2718 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wp \u2718 \u2718 \u2718 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpfc \u2718 \u2718 \u2718 \u2714 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpsc \u2718 \u2718 \u2718 \u2714 \u2714 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpredis \u2718 \u2718 \u2718 \u2714 \u2714 \u2714 - \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 \u2714 wpsubdom \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 - \u2714 \u2714 \u2718 \u2718 \u2718 \u2718 wpsubdom+wpfc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 - \u2714 \u2718 \u2718 \u2718 \u2718 wpsubdom+wpsc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 \u2714 \u2718 \u2718 \u2718 \u2718 wpsubdom+wpredis \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 - \u2718 \u2718 \u2718 \u2718 wpsubdir \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 - \u2714 \u2714 \u2714 wpsubdir+wpfc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 - \u2714 \u2714 wpsubdir+wpsc \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 - \u2714 wpsubdir+wpredis \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2718 \u2714 \u2714 \u2714 - function posObj(sheet,id,row,col,x,y) { var rtl=false; var sheetElement=document.getElementById(sheet); if(!sheetElement) { sheetElement=document.getElementById(sheet+'-grid-container'); } if(sheetElement) { rtl=sheetElement.getAttribute('dir')=='rtl'; } var r=document.getElementById(sheet+'R'+row); var c=document.getElementById(sheet+'C'+col); if(r&&c) { var objElement=document.getElementById(id); var s=objElement.style; var t=y; while(r&&r!=sheetElement) { t+=r.offsetTop; r=r.offsetParent; } var offsetX=x; while(c&&c!=sheetElement) { offsetX+=c.offsetLeft; c=c.offsetParent; } if(rtl) { offsetX-=objElement.offsetWidth; } s.left=offsetX+'px'; s.top=t+'px'; s.display='block'; s.border='1px solid #000000'; } }; function posObjs() { }; posObjs(); Example: updating site from basic wp to wp + fastcgi_cache:","title":"WordOps possible Update Options"},{"location":"commands/site/#usage_1","text":"Usage: wo site update [ <site_name> ] [ options ] options description --html update to html site --php update to php site --mysql update to MySQL + PHP site --php72 update site to PHP 7.2 --php73 update site to PHP 7.3 --php74 update site to PHP 7.4 --wp update site to WordPress without cache --wpfc update site to WordPress with fastcgi_cache --wpsc update site to WordPress with wp-super-cache plugin --wpredis update site to WordPress with redis-cache --wprocket update site to WordPress with WP-Rocket plugin --wpce update site to WordPress with Cache-Enabler plugin --wpsubdir update site to WordPress multisite on subdirectories --wpsubdomain update site to WordPress multisite on subdomains --password update admin password for a WordPress site --letsencrypt , -le secure site with Let's Encrypt SSL certificate --letsencrypt=wildcard secure site/multisite with a wildcard SSL certificates --letsencrypt=off disable Let's Encrypt SSL certificate --dns , --dns=<dns api provider> issue Let's Encrypt certificate with DNS validation. default: dns_cf --hsts , --hsts=off Enable or disable HSTS on site secured with Let's Encrypt --ngxblocker , --ngxblocker=off Enable or disable Ultimate Nginx bad blocker","title":"Usage"},{"location":"commands/site/#examples","text":"Update a WordPress site without cache ( --wp ), to WordPress with Nginx fastcgi_cache wo site update site.tld --wpfc Update a WordPress site running with PHP 7.2 to PHP 7.3 wo site update site.tld --php73 Update a site running with PHP 7.3 to PHP 7.2 wo site update site.tld --php72 Update a site running with PHP 7.2 or PHP 7.3 to PHP 7.4 wo site update site.tld --php74 Update a WordPress site with Nginx fastcgi_cache to WordPress with redis-cache wo site update site.tld --wpredis","title":"Examples"},{"location":"commands/site/#site-info","text":"Get site information including cache backend, PHP version or user database credentials Usage: wo site info [ <site_name> ]","title":"site info"},{"location":"commands/site/#site-delete","text":"Delete site including webroot and database: Usage: wo site delete [ <site_name> ] [ options ] options description --no-prompt delete website without confirmation prompt --files delete only website files --db delete only database","title":"site delete"},{"location":"commands/site/#site-edit","text":"Edit site Nginx configuration Usage: wo site edit [ <site_name> ] You will be prompted to choose the text editor you prefer. Nano is highly recommended for beginners.","title":"site edit"},{"location":"commands/site/#site-cd","text":"Move into a site webroot directory Usage: wo site cd [ <site_name> ]","title":"site cd"},{"location":"commands/site/#site-list","text":"List all sites managed with WordOps Usage: wo site list","title":"site list"},{"location":"commands/site/#site-show","text":"Display site Nginx configuration Usage: wo site show [ <site_name> ]","title":"site show"},{"location":"commands/site/#site-disable","text":"Disable site Nginx vhost Usage: wo site disable [ <site_name> ]","title":"site disable"},{"location":"commands/site/#site-enable","text":"Enable site Nginx vhost Usage: wo site enable [ <site_name> ]","title":"site enable"},{"location":"commands/stack/","text":"stack \u00b6 Manage server stack operations Usage: wo stack ( command ) [ options ] subcommand description install Install WordOps stacks upgrade Upgrade WordOps stack migrate Upgrade MariaDB stack remove Uninstall packages purge Uninstall & purge packages reload Reload WordOps stack restart Restart WordOps stack stop Stop WordOps stack start Start WordOps stack Info Options are the same for wo stack install , wo stack remove and wo stack purge Stack available are: options type description --web Group Nginx, PHP, MySQL, WP-CLI --admin Group phpMyAdmin, Adminer, Dashboard, Netdata, MySQLTuner ... --utils Group OpcacheGUI, Webgrind, Anemometer --nginx APT package nginx stack --php APT package PHP8.0-FPM stack --php73 APT package PHP7.3-FPM stack --php74 APT package PHP7.4-FPM stack --php80 APT package PHP8.0-FPM stack --php81 APT package PHP8.1-FPM stack --mysql APT package MariaDB stack --redis APT package Redis stack --wpcli Binary WP-CLI : WordPress CLI --phpmyadmin Web App phpMyAdmin : Web interface for MySQL --composer Binary Composer : PHP dependencies manager --netdata Binary Netdata : Real-time monitoring suite --dashboard Web App WordOps dashboard --extplorer Web App eXtplorer Filemanager --adminer Web App adminer (phpmyadmin alternative) --fail2ban APT package Fail2ban : Bruteforce protection --phpredisadmin Web App phpredisadmin : Web interface for Redis --proftpd APT package proftpd stack : FTP server --mysqltuner Binary MySQLTuner stack : MySQL tuning tool --ufw APT package UFW : Firewall --sendmail APT package Sendmail MTA --ngxblocker Binary Ultimate Nginx bad bots blocker --nanorc Binary Nano editor syntax highlighting Packages types \u00b6 APT package are debian packages installed from APT repositories Binaries are simple executables Web App are php based applications stack install \u00b6 Usage: wo stack install [ options ] Without options, the stack --web , --admin , --utils will be installed Recommended install \u00b6 wo stack install This will install the --web stack and --admin stack. Nginx, PHP 8.0, MariaDB, Netdata, Fail2Ban, WordOps dashboard, phpMyAdmin, Adminer, MySQLtuner, OpcacheGUI Web \u00b6 wo stack install --web This will install Nginx, PHP 8.0, MariaDB Admin tools \u00b6 WordOps backend with WordOps-Dashboard, PHPmyAdmin, Adminer, OpcacheGUI etc.. wo stack install --admin After installing the Admin stack, WordOps dashboard will be available on https://YOUR.SERVER.IP:22222 with the credentials displayed during the stack installation. stack upgrade \u00b6 Upgrade stack safely and apply new configurations and optimizations Usage: wo stack upgrade [ options ] options description --all Upgrade all stack --web Upgrade web stack --admin Upgrade admin tools stack --nginx Upgrade Nginx stack --php Upgrade PHP 7.2 stack --php73 Upgrade PHP 7.3 stack --php74 Upgrade PHP 7.4 stack --php80 Upgrade PHP 8.0 stack --php81 Upgrade PHP 8.1 stack --mysql Upgrade MySQL stack --wpcli Upgrade WPCLI --redis Upgrade Redis --netdata Upgrade Netdata --dashboard Upgrade WordOps Dashboard --composer Upgrade Composer --phpmyadmin Upgrade phpMyAdmin --adminer Upgrade Adminer --no-prompt Upgrade Packages without any prompt --force Force Packages upgrade without any prompt wo stack upgrade make sure packages repositories are properly added, then it upgrade packages and for main stacks (Nginx, PHP-FPM & MySQL, Redis), it also update configurations from the templates included in the current WordOps release and apply optimizations (especially for MySQL & Redis) Currently wo stack upgrade --mysql will only update the package from the current MariaDB repository, but will not perform upgrades between major releases (10.1 -> 10.3). For upgrade MariaDB, use wo stack migrate --mariadb . stack migrate \u00b6 Upgrade MariaDB to the latest stable release (10.6) Usage : wo stack migrate --mariadb [ options ] Options : --force : perform MariaDB upgrade without prompting for confirmation stack remove \u00b6 Remove stacks (without removing configurations or data for APT packages) Usage: wo stack remove <stack> [ options ] options description --all Remove all stacks at once --force Force install/remove/purge without prompt For APT packages, wo stack remove will just uninstall package without deleting their configurations or data. For binaries or web app, it will do the same than wo stack purge stack purge \u00b6 Remove and purge stacks (including configurations and data) Warning Please be careful when using wo stack purge because it will remove APT packages but also purge all configurations or data, including MySQL databases, Redis databases or Nginx vhosts. Usage: wo stack purge <stack> [ options ] options description --all Remove all stacks at once --force Force install/remove/purge without prompt stack restart \u00b6 Restart Stack service Usage: wo stack restart [ options ] stack reload \u00b6 Reload Stack service Usage: wo stack reload [ options ] stack start \u00b6 Start Stack service Usage: wo stack start [ options ] stack stop \u00b6 Stop Stack service Usage: wo stack stop [ options ] stack status \u00b6 Display Stack service status Usage: wo stack status [ options ]","title":"stack"},{"location":"commands/stack/#stack","text":"Manage server stack operations Usage: wo stack ( command ) [ options ] subcommand description install Install WordOps stacks upgrade Upgrade WordOps stack migrate Upgrade MariaDB stack remove Uninstall packages purge Uninstall & purge packages reload Reload WordOps stack restart Restart WordOps stack stop Stop WordOps stack start Start WordOps stack Info Options are the same for wo stack install , wo stack remove and wo stack purge Stack available are: options type description --web Group Nginx, PHP, MySQL, WP-CLI --admin Group phpMyAdmin, Adminer, Dashboard, Netdata, MySQLTuner ... --utils Group OpcacheGUI, Webgrind, Anemometer --nginx APT package nginx stack --php APT package PHP8.0-FPM stack --php73 APT package PHP7.3-FPM stack --php74 APT package PHP7.4-FPM stack --php80 APT package PHP8.0-FPM stack --php81 APT package PHP8.1-FPM stack --mysql APT package MariaDB stack --redis APT package Redis stack --wpcli Binary WP-CLI : WordPress CLI --phpmyadmin Web App phpMyAdmin : Web interface for MySQL --composer Binary Composer : PHP dependencies manager --netdata Binary Netdata : Real-time monitoring suite --dashboard Web App WordOps dashboard --extplorer Web App eXtplorer Filemanager --adminer Web App adminer (phpmyadmin alternative) --fail2ban APT package Fail2ban : Bruteforce protection --phpredisadmin Web App phpredisadmin : Web interface for Redis --proftpd APT package proftpd stack : FTP server --mysqltuner Binary MySQLTuner stack : MySQL tuning tool --ufw APT package UFW : Firewall --sendmail APT package Sendmail MTA --ngxblocker Binary Ultimate Nginx bad bots blocker --nanorc Binary Nano editor syntax highlighting","title":"stack"},{"location":"commands/stack/#packages-types","text":"APT package are debian packages installed from APT repositories Binaries are simple executables Web App are php based applications","title":"Packages types"},{"location":"commands/stack/#stack-install","text":"Usage: wo stack install [ options ] Without options, the stack --web , --admin , --utils will be installed","title":"stack install"},{"location":"commands/stack/#recommended-install","text":"wo stack install This will install the --web stack and --admin stack. Nginx, PHP 8.0, MariaDB, Netdata, Fail2Ban, WordOps dashboard, phpMyAdmin, Adminer, MySQLtuner, OpcacheGUI","title":"Recommended install"},{"location":"commands/stack/#web","text":"wo stack install --web This will install Nginx, PHP 8.0, MariaDB","title":"Web"},{"location":"commands/stack/#admin-tools","text":"WordOps backend with WordOps-Dashboard, PHPmyAdmin, Adminer, OpcacheGUI etc.. wo stack install --admin After installing the Admin stack, WordOps dashboard will be available on https://YOUR.SERVER.IP:22222 with the credentials displayed during the stack installation.","title":"Admin tools"},{"location":"commands/stack/#stack-upgrade","text":"Upgrade stack safely and apply new configurations and optimizations Usage: wo stack upgrade [ options ] options description --all Upgrade all stack --web Upgrade web stack --admin Upgrade admin tools stack --nginx Upgrade Nginx stack --php Upgrade PHP 7.2 stack --php73 Upgrade PHP 7.3 stack --php74 Upgrade PHP 7.4 stack --php80 Upgrade PHP 8.0 stack --php81 Upgrade PHP 8.1 stack --mysql Upgrade MySQL stack --wpcli Upgrade WPCLI --redis Upgrade Redis --netdata Upgrade Netdata --dashboard Upgrade WordOps Dashboard --composer Upgrade Composer --phpmyadmin Upgrade phpMyAdmin --adminer Upgrade Adminer --no-prompt Upgrade Packages without any prompt --force Force Packages upgrade without any prompt wo stack upgrade make sure packages repositories are properly added, then it upgrade packages and for main stacks (Nginx, PHP-FPM & MySQL, Redis), it also update configurations from the templates included in the current WordOps release and apply optimizations (especially for MySQL & Redis) Currently wo stack upgrade --mysql will only update the package from the current MariaDB repository, but will not perform upgrades between major releases (10.1 -> 10.3). For upgrade MariaDB, use wo stack migrate --mariadb .","title":"stack upgrade"},{"location":"commands/stack/#stack-migrate","text":"Upgrade MariaDB to the latest stable release (10.6) Usage : wo stack migrate --mariadb [ options ] Options : --force : perform MariaDB upgrade without prompting for confirmation","title":"stack migrate"},{"location":"commands/stack/#stack-remove","text":"Remove stacks (without removing configurations or data for APT packages) Usage: wo stack remove <stack> [ options ] options description --all Remove all stacks at once --force Force install/remove/purge without prompt For APT packages, wo stack remove will just uninstall package without deleting their configurations or data. For binaries or web app, it will do the same than wo stack purge","title":"stack remove"},{"location":"commands/stack/#stack-purge","text":"Remove and purge stacks (including configurations and data) Warning Please be careful when using wo stack purge because it will remove APT packages but also purge all configurations or data, including MySQL databases, Redis databases or Nginx vhosts. Usage: wo stack purge <stack> [ options ] options description --all Remove all stacks at once --force Force install/remove/purge without prompt","title":"stack purge"},{"location":"commands/stack/#stack-restart","text":"Restart Stack service Usage: wo stack restart [ options ]","title":"stack restart"},{"location":"commands/stack/#stack-reload","text":"Reload Stack service Usage: wo stack reload [ options ]","title":"stack reload"},{"location":"commands/stack/#stack-start","text":"Start Stack service Usage: wo stack start [ options ]","title":"stack start"},{"location":"commands/stack/#stack-stop","text":"Stop Stack service Usage: wo stack stop [ options ]","title":"stack stop"},{"location":"commands/stack/#stack-status","text":"Display Stack service status Usage: wo stack status [ options ]","title":"stack status"},{"location":"commands/update/","text":"update \u00b6 Update WordOps to the latest release available Usage: wo update [ options ] Without argument, the command wo update will update WordOps only if a newer version is available. optional arguments description --force Force WordOps update to the last release","title":"update"},{"location":"commands/update/#update","text":"Update WordOps to the latest release available Usage: wo update [ options ] Without argument, the command wo update will update WordOps only if a newer version is available. optional arguments description --force Force WordOps update to the last release","title":"update"},{"location":"getting-started/creating-sites/","text":"Creating site \u00b6 You can create site with WordOps by using the command wo site create . WordOps will always: install required stack if needed configure Nginx vhost create site directory WordOps can also: create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create Additional information \u00b6 Component Path Site files /var/www/site.tld/htdocs wp-config.php /var/www/site.tld/wp-config.php Additional Nginx conf /var/www/site.tld/conf/nginx/ Site access/error logs /var/www/site.tld/logs Examples \u00b6 Basic site \u00b6 Basic html site wo site create site.tld --html Simple PHP site wo site create site.tld --php Simple PHP + MySQL site wo site create site.tld --mysql WordPress site \u00b6 Simple WordPress site wo site create site.tld --wp WordPress site with Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site with Redis cache wo site create site.tld --wpredis PHP 8.1 \u00b6 Simple PHP 8.1 + MySQL site wo site create site.tld --mysql --php81 Simple PHP 8.1 site wo site create site.tld --php81 Simple WordPress site with PHP 8.1 wo site create site.tld --wp --php81 Let's Encrypt \u00b6 WordPress site secured with Let's Encrypt wo site create site.tld --wp -le WordPress site on subdomain secure with Let's Encrypt wo site create sub.site.tld --wp -le Since the release v3.9.8.4 , WordOps will automatically detect if the site is a domain or a subdomain, and will not issue a certificate for www alias with subdomains WordPress site with PHP 8.1 and secured by Let's Encrypt wo site create site.tld --wp --php81 -le Create WordPress subdomain multisite secured with a Let's Encrypt Wildcard SSL certificate Info More information about wildcard SSL certificates our guide about DNS API configuration wo site create site.tld --wpsubdomain --letsencrypt = wildcard --dns = dns_cf","title":"Creating sites"},{"location":"getting-started/creating-sites/#creating-site","text":"You can create site with WordOps by using the command wo site create . WordOps will always: install required stack if needed configure Nginx vhost create site directory WordOps can also: create the site database install WordPress (with or without caching) secure site with Let's Encrypt SSL certificate You can see all the options available to create site in the command list site create","title":"Creating site"},{"location":"getting-started/creating-sites/#additional-information","text":"Component Path Site files /var/www/site.tld/htdocs wp-config.php /var/www/site.tld/wp-config.php Additional Nginx conf /var/www/site.tld/conf/nginx/ Site access/error logs /var/www/site.tld/logs","title":"Additional information"},{"location":"getting-started/creating-sites/#examples","text":"","title":"Examples"},{"location":"getting-started/creating-sites/#basic-site","text":"Basic html site wo site create site.tld --html Simple PHP site wo site create site.tld --php Simple PHP + MySQL site wo site create site.tld --mysql","title":"Basic site"},{"location":"getting-started/creating-sites/#wordpress-site","text":"Simple WordPress site wo site create site.tld --wp WordPress site with Nginx fastcgi_cache wo site create site.tld --wpfc WordPress site with Redis cache wo site create site.tld --wpredis","title":"WordPress site"},{"location":"getting-started/creating-sites/#php-81","text":"Simple PHP 8.1 + MySQL site wo site create site.tld --mysql --php81 Simple PHP 8.1 site wo site create site.tld --php81 Simple WordPress site with PHP 8.1 wo site create site.tld --wp --php81","title":"PHP 8.1"},{"location":"getting-started/creating-sites/#lets-encrypt","text":"WordPress site secured with Let's Encrypt wo site create site.tld --wp -le WordPress site on subdomain secure with Let's Encrypt wo site create sub.site.tld --wp -le Since the release v3.9.8.4 , WordOps will automatically detect if the site is a domain or a subdomain, and will not issue a certificate for www alias with subdomains WordPress site with PHP 8.1 and secured by Let's Encrypt wo site create site.tld --wp --php81 -le Create WordPress subdomain multisite secured with a Let's Encrypt Wildcard SSL certificate Info More information about wildcard SSL certificates our guide about DNS API configuration wo site create site.tld --wpsubdomain --letsencrypt = wildcard --dns = dns_cf","title":"Let's Encrypt"},{"location":"getting-started/installation-guide/","text":"Installation \u00b6 One-Step Automated Install \u00b6 We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command: wget -qO wo wops.cc && sudo bash wo What are the tasks performed by the install script ? Installing WordOps dependencies Enabling automated security updates with unattended-upgrades Enabling NTP World Time Synchronization Detecting a previous EasyEngine or WordOps installation Importing existant sites into WordOps Installing WP-CLI Installing Acme.sh Installing Wordops Alternative: Clone Github repository and run \u00b6 git clone https://github.com/WordOps/WordOps.git cd WordOps/ sudo bash install Info During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig. Manual Installation \u00b6 If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually. deprecated Manual installation instructions are outdated and should not be used to install WordOps. We are now using Python virtualenv to avoid conflicts with other Python packages installed on your server. Install WordOps dependencies \u00b6 # update packages list apt-get update # On Ubuntu apt-get -option = Dpkg::options:: = --force-confmiss --option = Dpkg::options:: = --force-confold --assume-yes install \\ build-essential curl gzip python3-pip python3-wheel python3-apt python3-setuptools python3-dev sqlite3 git tar software-properties-common pigz \\ gnupg2 cron ccze rsync apt-transport-https tree haveged ufw unattended-upgrades tzdata ntp # On Debian apt-get -option = Dpkg::options:: = --force-confmiss --option = Dpkg::options:: = --force-confold --assume-yes install \\ build-essential curl gzip dirmngr sudo python3-pip python3-wheel python3-apt python3-setuptools python3-dev ca-certificates sqlite3 git tar \\ software-properties-common pigz apt-transport-https gnupg2 cron ccze rsync tree haveged ufw unattended-upgrades tzdata ntp create WordOps directories \u00b6 mkdir -p /var/log/wo /var/lib/wo/tmp /var/lib/wo-backup Update PIP \u00b6 python3 -m pip install -U pip python3 -m pip install -U setuptools wheel Install WordOps \u00b6 # install wordops from PyPi python3 -m pip install -U wordops # copy configuration cp -rf /usr/local/lib/python3.*/dist-packages/usr/* /usr/ cp -rn /usr/local/lib/python3.*/dist-packages/etc/* /etc/ cp -f /usr/local/lib/python3.*/dist-packages/etc/bash_completion.d/wo_auto.rc /etc/bash_completion.d/wo_auto.rc Install acme.sh \u00b6 # clone the repository git clone https://github.com/Neilpang/acme.sh.git /opt/acme.sh -q # create conf directory mkdir -p /etc/letsencrypt/ { config,live,renewal } # install acme.sh cd /opt/acme.sh ./acme.sh --install \\ --home /etc/letsencrypt \\ --config-home /etc/letsencrypt/config \\ --cert-home /etc/letsencrypt/renewal # enable auto-upgrade /etc/letsencrypt/acme.sh --config-home '/etc/letsencrypt/config' --upgrade --auto-upgrade # create .well-known directory mkdir -p /var/www/html/.well-known/acme-challenge # set www-data as owner chown -R www-data:www-data /var/www/html /var/www/html/.well-known # set permissions chmod 750 /var/www/html /var/www/html/.well-known Install WP-CLI \u00b6 wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x /usr/local/bin/wp","title":"Installation"},{"location":"getting-started/installation-guide/#installation","text":"","title":"Installation"},{"location":"getting-started/installation-guide/#one-step-automated-install","text":"We provide an installer script which install the required dependencies, before setting-up WordOps. It can be installed with the following command: wget -qO wo wops.cc && sudo bash wo What are the tasks performed by the install script ? Installing WordOps dependencies Enabling automated security updates with unattended-upgrades Enabling NTP World Time Synchronization Detecting a previous EasyEngine or WordOps installation Importing existant sites into WordOps Installing WP-CLI Installing Acme.sh Installing Wordops","title":"One-Step Automated Install"},{"location":"getting-started/installation-guide/#alternative-clone-github-repository-and-run","text":"git clone https://github.com/WordOps/WordOps.git cd WordOps/ sudo bash install Info During the installation, you will be prompt for an username and an email address. WordOps need those informations to configure Git version control and to use it for saving server configurations. Your informations will only be stored in the file .gitconfig.","title":"Alternative: Clone Github repository and run"},{"location":"getting-started/installation-guide/#manual-installation","text":"If you prefer to perform yourself the same steps than our installer script, here how to install WordOps manually. deprecated Manual installation instructions are outdated and should not be used to install WordOps. We are now using Python virtualenv to avoid conflicts with other Python packages installed on your server.","title":"Manual Installation"},{"location":"getting-started/installation-guide/#install-wordops-dependencies","text":"# update packages list apt-get update # On Ubuntu apt-get -option = Dpkg::options:: = --force-confmiss --option = Dpkg::options:: = --force-confold --assume-yes install \\ build-essential curl gzip python3-pip python3-wheel python3-apt python3-setuptools python3-dev sqlite3 git tar software-properties-common pigz \\ gnupg2 cron ccze rsync apt-transport-https tree haveged ufw unattended-upgrades tzdata ntp # On Debian apt-get -option = Dpkg::options:: = --force-confmiss --option = Dpkg::options:: = --force-confold --assume-yes install \\ build-essential curl gzip dirmngr sudo python3-pip python3-wheel python3-apt python3-setuptools python3-dev ca-certificates sqlite3 git tar \\ software-properties-common pigz apt-transport-https gnupg2 cron ccze rsync tree haveged ufw unattended-upgrades tzdata ntp","title":"Install WordOps dependencies"},{"location":"getting-started/installation-guide/#create-wordops-directories","text":"mkdir -p /var/log/wo /var/lib/wo/tmp /var/lib/wo-backup","title":"create WordOps directories"},{"location":"getting-started/installation-guide/#update-pip","text":"python3 -m pip install -U pip python3 -m pip install -U setuptools wheel","title":"Update PIP"},{"location":"getting-started/installation-guide/#install-wordops","text":"# install wordops from PyPi python3 -m pip install -U wordops # copy configuration cp -rf /usr/local/lib/python3.*/dist-packages/usr/* /usr/ cp -rn /usr/local/lib/python3.*/dist-packages/etc/* /etc/ cp -f /usr/local/lib/python3.*/dist-packages/etc/bash_completion.d/wo_auto.rc /etc/bash_completion.d/wo_auto.rc","title":"Install WordOps"},{"location":"getting-started/installation-guide/#install-acmesh","text":"# clone the repository git clone https://github.com/Neilpang/acme.sh.git /opt/acme.sh -q # create conf directory mkdir -p /etc/letsencrypt/ { config,live,renewal } # install acme.sh cd /opt/acme.sh ./acme.sh --install \\ --home /etc/letsencrypt \\ --config-home /etc/letsencrypt/config \\ --cert-home /etc/letsencrypt/renewal # enable auto-upgrade /etc/letsencrypt/acme.sh --config-home '/etc/letsencrypt/config' --upgrade --auto-upgrade # create .well-known directory mkdir -p /var/www/html/.well-known/acme-challenge # set www-data as owner chown -R www-data:www-data /var/www/html /var/www/html/.well-known # set permissions chmod 750 /var/www/html /var/www/html/.well-known","title":"Install acme.sh"},{"location":"getting-started/installation-guide/#install-wp-cli","text":"wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x /usr/local/bin/wp","title":"Install WP-CLI"},{"location":"getting-started/post-install-steps/","text":"Post-install Steps \u00b6 These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide . Enable bash_completion \u00b6 To enable WordOps commands auto-completion, run the following command after WordOps installation: source /etc/bash_completion.d/wo_auto.rc Creating an alias for sudo wo \u00b6 If you want to be able to use directly the command wo as non-root user, you can add a bash alias to automatically add sudo in front of the command wo . Use the following command to add the alias : echo -e \"alias wo='sudo -E wo'\" >> $HOME /.bashrc Then apply it with source $HOME/.bashrc Installing WordOps stacks (optional) \u00b6 You can install WordOps main stacks with the following command before creating your first site, or create directly a site and WordOps will install required stacks. Installing WordOps main stacks wo stack install Here the list of WordOps components installed with the above command: Packages type Description Nginx APT package WordOps web server PHP 8.0 APT package PHP8.0-FPM MariaDB 10.6 APT package Open-source version of MySQL WP-CLI Binary The WordPress command-line tool Composer Binary PHP packages manager MySQLTuner Binary Command-line tool to tune MySQL Fail2ban APT package Authentication bruteforce protection phpMyAdmin Web App MySQL server web interface Adminer Web App lightweight phpMyAdmin alternative OpcacheGUI Web App web interface for Opcache monitoring Netdata Binary Monitoring suite Anemometer Web App MySQL Slow Query Monitor WordOps dashboard Web App Bootstrap template for WordOps backend eXtplorer Web App Web File manager cheat.sh Binary Command-line Linux cheatsheet Sendmail APT package Sendmail MTA Packages types \u00b6 APT package are Debian packages installed from APT repositories Binaries are simple executables (do not use any server resources when you are not running them) Web App are PHP based applications WordOps backend \u00b6 After installing Nginx, WordOps will display your login credentials to access to WordOps backend. You haven't saved them ? Don't worry, you can change them at anytime with the command : wo secure --auth You will be prompted for a username and a password. If empty, WordOps will use the default username set during the installation and will generate a random password. You should now be able to access WordOps backend on https://YOUR.SERVER.IP:22222 or https://yourserver.hostname.tld:22222 . You will probably be warned about the SSL certificate, but you can learn how to secure WordOps backend with a valid SSL certificate in the next part. Securing WordOps backend \u00b6 To secure WordOps backend with a valid SSL certificate, you just have to create a basic site with the domain/subdomain of your choice. WordOps will automatically use the first SSL certificate issued to secure the backend. Example : wo site create server.domain.tld -le Then you will be able to access to the backend with : https://server.domain.tld:22222 Enabling UFW Firewall \u00b6 If you haven't already configured a firewall on your server, you can use WordOps to automatically configure UFW with a minimal rules set for WordOps. wo stack install --ufw","title":"Post-install steps"},{"location":"getting-started/post-install-steps/#post-install-steps","text":"These are the first steps after you install WordOps. If you haven't installed it already, please check the installation guide .","title":"Post-install Steps"},{"location":"getting-started/post-install-steps/#enable-bash_completion","text":"To enable WordOps commands auto-completion, run the following command after WordOps installation: source /etc/bash_completion.d/wo_auto.rc","title":"Enable bash_completion"},{"location":"getting-started/post-install-steps/#creating-an-alias-for-sudo-wo","text":"If you want to be able to use directly the command wo as non-root user, you can add a bash alias to automatically add sudo in front of the command wo . Use the following command to add the alias : echo -e \"alias wo='sudo -E wo'\" >> $HOME /.bashrc Then apply it with source $HOME/.bashrc","title":"Creating an alias for sudo wo"},{"location":"getting-started/post-install-steps/#installing-wordops-stacks-optional","text":"You can install WordOps main stacks with the following command before creating your first site, or create directly a site and WordOps will install required stacks. Installing WordOps main stacks wo stack install Here the list of WordOps components installed with the above command: Packages type Description Nginx APT package WordOps web server PHP 8.0 APT package PHP8.0-FPM MariaDB 10.6 APT package Open-source version of MySQL WP-CLI Binary The WordPress command-line tool Composer Binary PHP packages manager MySQLTuner Binary Command-line tool to tune MySQL Fail2ban APT package Authentication bruteforce protection phpMyAdmin Web App MySQL server web interface Adminer Web App lightweight phpMyAdmin alternative OpcacheGUI Web App web interface for Opcache monitoring Netdata Binary Monitoring suite Anemometer Web App MySQL Slow Query Monitor WordOps dashboard Web App Bootstrap template for WordOps backend eXtplorer Web App Web File manager cheat.sh Binary Command-line Linux cheatsheet Sendmail APT package Sendmail MTA","title":"Installing WordOps stacks (optional)"},{"location":"getting-started/post-install-steps/#packages-types","text":"APT package are Debian packages installed from APT repositories Binaries are simple executables (do not use any server resources when you are not running them) Web App are PHP based applications","title":"Packages types"},{"location":"getting-started/post-install-steps/#wordops-backend","text":"After installing Nginx, WordOps will display your login credentials to access to WordOps backend. You haven't saved them ? Don't worry, you can change them at anytime with the command : wo secure --auth You will be prompted for a username and a password. If empty, WordOps will use the default username set during the installation and will generate a random password. You should now be able to access WordOps backend on https://YOUR.SERVER.IP:22222 or https://yourserver.hostname.tld:22222 . You will probably be warned about the SSL certificate, but you can learn how to secure WordOps backend with a valid SSL certificate in the next part.","title":"WordOps backend"},{"location":"getting-started/post-install-steps/#securing-wordops-backend","text":"To secure WordOps backend with a valid SSL certificate, you just have to create a basic site with the domain/subdomain of your choice. WordOps will automatically use the first SSL certificate issued to secure the backend. Example : wo site create server.domain.tld -le Then you will be able to access to the backend with : https://server.domain.tld:22222","title":"Securing WordOps backend"},{"location":"getting-started/post-install-steps/#enabling-ufw-firewall","text":"If you haven't already configured a firewall on your server, you can use WordOps to automatically configure UFW with a minimal rules set for WordOps. wo stack install --ufw","title":"Enabling UFW Firewall"},{"location":"getting-started/prerequesites/","text":"Prerequesites \u00b6 Hardware requirements \u00b6 Resources \u00b6 Minimum \u00b6 WordOps is very lightweight, it doesn't require a lot of resources and can be installed on low end devices like Raspberry PI. Minimum requirements are: ~100MB of storage 512MB RAM Recommended \u00b6 However, if you are going to use WordOps in production, some services like MySQL or Redis may need more resources, and running WordOps stacks without enough resources could impact your sites performance. Resources usage also highly depend on your site traffic. Here our recommended hardware configuration for production: Multi-core CPU 20GB SSD storage 2GB RAM Virtualization \u00b6 The following virtualization platforms are supported: VMware XEN OpenVZ KVM Hyper-V LXC / LXD WordOps is also compatible with Ubuntu running on Windows Linux Subsystem (WSL). Software requirements \u00b6 Operating Systems \u00b6 The following operating systems are supported: Distribution Release Architecture Ubuntu 22.04 LTS (focal) x86_64 20.04 LTS (bionic) x86_64 18.04 LTS (xenial) x86_64 Debian 10 (buster) x86_64 11 (bullseye) x86_64 Raspbian 10 (buster) armv7l 11 (bullseye) armv7l Ports \u00b6 Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 SSH default or custom port HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys. Server configuration recommendations \u00b6 Set a valid server hostname (see below) Proper server hostname configuration Server hostname isn't only a name, it's the server public identity on the network. If your server is directly connected to internet(not behind a NAT), it should have a valid hostname. A valid hostname should looks like : myservername.yourdomain.tld myservername is the server name yourdomain.tld is one of your domains To edit hostname properly, use the command : hostnamectl set-hostname <yourserver.hostname.tld> To apply the new hostname, a reboot is required. The last step and the most important, you should create the proper DNS records to make the subdomain myservername.yourdomain.tld pointing to your server IP.","title":"Prerequisites"},{"location":"getting-started/prerequesites/#prerequesites","text":"","title":"Prerequesites"},{"location":"getting-started/prerequesites/#hardware-requirements","text":"","title":"Hardware requirements"},{"location":"getting-started/prerequesites/#resources","text":"","title":"Resources"},{"location":"getting-started/prerequesites/#minimum","text":"WordOps is very lightweight, it doesn't require a lot of resources and can be installed on low end devices like Raspberry PI. Minimum requirements are: ~100MB of storage 512MB RAM","title":"Minimum"},{"location":"getting-started/prerequesites/#recommended","text":"However, if you are going to use WordOps in production, some services like MySQL or Redis may need more resources, and running WordOps stacks without enough resources could impact your sites performance. Resources usage also highly depend on your site traffic. Here our recommended hardware configuration for production: Multi-core CPU 20GB SSD storage 2GB RAM","title":"Recommended"},{"location":"getting-started/prerequesites/#virtualization","text":"The following virtualization platforms are supported: VMware XEN OpenVZ KVM Hyper-V LXC / LXD WordOps is also compatible with Ubuntu running on Windows Linux Subsystem (WSL).","title":"Virtualization"},{"location":"getting-started/prerequesites/#software-requirements","text":"","title":"Software requirements"},{"location":"getting-started/prerequesites/#operating-systems","text":"The following operating systems are supported: Distribution Release Architecture Ubuntu 22.04 LTS (focal) x86_64 20.04 LTS (bionic) x86_64 18.04 LTS (xenial) x86_64 Debian 10 (buster) x86_64 11 (bullseye) x86_64 Raspbian 10 (buster) armv7l 11 (bullseye) armv7l","title":"Operating Systems"},{"location":"getting-started/prerequesites/#ports","text":"Service Port Inbound Outbound Notes SSH 22 \u2713 \u2713 SSH default or custom port HTTP 80 \u2713 \u2713 Nginx listen on port 80 HTTPS 443 \u2713 \u2713 Nginx listen on port 443 WordOps Backend 22222 \u2713 \u2713 WordOps backend is available on port 22222 and is password protected GnuPG 1137 \u2713 Required to import APT repositories GPG keys.","title":"Ports"},{"location":"getting-started/prerequesites/#server-configuration-recommendations","text":"Set a valid server hostname (see below) Proper server hostname configuration Server hostname isn't only a name, it's the server public identity on the network. If your server is directly connected to internet(not behind a NAT), it should have a valid hostname. A valid hostname should looks like : myservername.yourdomain.tld myservername is the server name yourdomain.tld is one of your domains To edit hostname properly, use the command : hostnamectl set-hostname <yourserver.hostname.tld> To apply the new hostname, a reboot is required. The last step and the most important, you should create the proper DNS records to make the subdomain myservername.yourdomain.tld pointing to your server IP.","title":"Server configuration recommendations"},{"location":"getting-started/wordops-structure/","text":"WordOps structure \u00b6 WordOps directories \u00b6 Path Description /etc/wo General configuration /var/lib/wo/dbase.db WordOps sites databases /var/lib/wo/tmp tmp directory /usr/lib/wo/templates WordOps templates acme.sh - letsencrypt integration \u00b6 Path Description /etc/letsencrypt acme.sh directory letsencrypt \u251c\u2500\u2500 acme.sh # acme executable \u251c\u2500\u2500 acme.sh.env # env configuration \u251c\u2500\u2500 config/ # acme.sh configuration \u251c\u2500\u2500 deploy/ # internal \u251c\u2500\u2500 dnsapi/ # internal \u251c\u2500\u2500 live/ # live SSL certificates \u251c\u2500\u2500 notify/ # internal \u2514\u2500\u2500 renewal/ # certificates configuration","title":"WordOps structure"},{"location":"getting-started/wordops-structure/#wordops-structure","text":"","title":"WordOps structure"},{"location":"getting-started/wordops-structure/#wordops-directories","text":"Path Description /etc/wo General configuration /var/lib/wo/dbase.db WordOps sites databases /var/lib/wo/tmp tmp directory /usr/lib/wo/templates WordOps templates","title":"WordOps directories"},{"location":"getting-started/wordops-structure/#acmesh-letsencrypt-integration","text":"Path Description /etc/letsencrypt acme.sh directory letsencrypt \u251c\u2500\u2500 acme.sh # acme executable \u251c\u2500\u2500 acme.sh.env # env configuration \u251c\u2500\u2500 config/ # acme.sh configuration \u251c\u2500\u2500 deploy/ # internal \u251c\u2500\u2500 dnsapi/ # internal \u251c\u2500\u2500 live/ # live SSL certificates \u251c\u2500\u2500 notify/ # internal \u2514\u2500\u2500 renewal/ # certificates configuration","title":"acme.sh - letsencrypt integration"},{"location":"guides/enable-live-kernel-patching/","text":"Enable live kernel patching on Ubuntu \u00b6 On linux servers, kernel updates usually require a reboot to apply the last security patches. But there are several live kernel patching solutions available and in this short guide we will see how to enable Canonical Livepatch to apply critical kernel security fixes on your Ubuntu LTS server without rebooting. Requirements \u00b6 Canonical Livepatch service is available on Ubuntu 14.04 LTS, 16.04 LTS, and 18.04 LTS. This service is free for up to 3 machines (server, desktop or cloud). Setup \u00b6 Get your Livepatch token on https://auth.livepatch.canonical.com/ Install the Livepatch daemon : sudo snap install canonical-livepatch Enable Canonical Livepatch with your token : sudo canonical-livepatch enable [TOKEN]","title":"Enable live kernel patching on Ubuntu"},{"location":"guides/enable-live-kernel-patching/#enable-live-kernel-patching-on-ubuntu","text":"On linux servers, kernel updates usually require a reboot to apply the last security patches. But there are several live kernel patching solutions available and in this short guide we will see how to enable Canonical Livepatch to apply critical kernel security fixes on your Ubuntu LTS server without rebooting.","title":"Enable live kernel patching on Ubuntu"},{"location":"guides/enable-live-kernel-patching/#requirements","text":"Canonical Livepatch service is available on Ubuntu 14.04 LTS, 16.04 LTS, and 18.04 LTS. This service is free for up to 3 machines (server, desktop or cloud).","title":"Requirements"},{"location":"guides/enable-live-kernel-patching/#setup","text":"Get your Livepatch token on https://auth.livepatch.canonical.com/ Install the Livepatch daemon : sudo snap install canonical-livepatch Enable Canonical Livepatch with your token : sudo canonical-livepatch enable [TOKEN]","title":"Setup"},{"location":"guides/manage-ssl-certificates/","text":"Manage Let's Encrypt SSL certificates \u00b6 In this guide, we will explain how to issue a Let's Encrypt SSL certificate to secure your site and the different options available. To issue a SSL certificate with WordOps, you can use the following arguments with the commands: wo site create wo site update options description --letsencrypt / -le issue a SSL certificate for domain or subdomain --letsencrypt=wildcard issue a wildcard SSL certificate: domain.tld + *.domain.tld --dns / --dns=<dns_api> use DNS API validation for Acme challenge. required for wildcard certificates -le is an alias for --letsencrypt . You can use this alias with all letsencrypt commands. For example, --letsencrypt=wildcard is the same than -le=wildcard Issuing a certificate \u00b6 Webroot mode \u00b6 By default WordOps use the Webroot mode to validate the domain. This mode doesn't require any additional configuration. domain + www.domain.tld \u00b6 To create a new site: wo site create site.tld --wp -le To secure an existant site: wo site update site.tld -le sub-domain \u00b6 To create a new site: wo site create sub.site.tld --wp -le To secure an existant site: wo site update sub.site.tld -le DNS API mode \u00b6 Warning Read first our guide about DNS API configuration domain or subdomain \u00b6 To create a new site with Cloudflare DNS API: wo site create site.tld --wp -le --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update sub.site.tld -le --dns = dns_dgon wildcard \u00b6 To create a new site with Cloudflare DNS API: wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update site.tld -le = wildcard --dns = dns_dgon","title":"LetsEncrypt SSL certificates"},{"location":"guides/manage-ssl-certificates/#manage-lets-encrypt-ssl-certificates","text":"In this guide, we will explain how to issue a Let's Encrypt SSL certificate to secure your site and the different options available. To issue a SSL certificate with WordOps, you can use the following arguments with the commands: wo site create wo site update options description --letsencrypt / -le issue a SSL certificate for domain or subdomain --letsencrypt=wildcard issue a wildcard SSL certificate: domain.tld + *.domain.tld --dns / --dns=<dns_api> use DNS API validation for Acme challenge. required for wildcard certificates -le is an alias for --letsencrypt . You can use this alias with all letsencrypt commands. For example, --letsencrypt=wildcard is the same than -le=wildcard","title":"Manage Let's Encrypt SSL certificates"},{"location":"guides/manage-ssl-certificates/#issuing-a-certificate","text":"","title":"Issuing a certificate"},{"location":"guides/manage-ssl-certificates/#webroot-mode","text":"By default WordOps use the Webroot mode to validate the domain. This mode doesn't require any additional configuration.","title":"Webroot mode"},{"location":"guides/manage-ssl-certificates/#domain-wwwdomaintld","text":"To create a new site: wo site create site.tld --wp -le To secure an existant site: wo site update site.tld -le","title":"domain + www.domain.tld"},{"location":"guides/manage-ssl-certificates/#sub-domain","text":"To create a new site: wo site create sub.site.tld --wp -le To secure an existant site: wo site update sub.site.tld -le","title":"sub-domain"},{"location":"guides/manage-ssl-certificates/#dns-api-mode","text":"Warning Read first our guide about DNS API configuration","title":"DNS API mode"},{"location":"guides/manage-ssl-certificates/#domain-or-subdomain","text":"To create a new site with Cloudflare DNS API: wo site create site.tld --wp -le --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update sub.site.tld -le --dns = dns_dgon","title":"domain or subdomain"},{"location":"guides/manage-ssl-certificates/#wildcard","text":"To create a new site with Cloudflare DNS API: wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf To secure an existant site with DigitalOcean DNS API: wo site update site.tld -le = wildcard --dns = dns_dgon","title":"wildcard"},{"location":"guides/migration-from-easyengine/","text":"Migration from EasyEngine v3 \u00b6 Running WordOps install script \u00b6 The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command: wget -qO wo wops.cc && sudo bash wo Info Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in /var/lib/wo-backup . It will also create all new Nginx configurations before syncing the old nginx directory with the new one. This way, if you have added custom Nginx configuration, you will find them at the same place than before the migration. Post installation steps \u00b6 After installing WordOps, if all your sites are still working properly, you can start using WordOps the same way as EasyEngine. For sites previously created with EasyEngine, you will have to change some settings in their configuration to use WordOps new configurations. This can be done with the command wo site update or by editing manually their configuration with the command wo site edit . Warning If some sites are still using php5.6 or php7.0 and are not compatible with newer PHP versions, do not change their vhost configuration. WordOps minimum and default PHP version is PHP 7.2. Additionally, sites previously created with --w3tc will have to use another cache option as we deprecated this stack. Updating site configuration \u00b6 You have the choice between two methods to update your site configuration: With the command wo site update (recommended) Manually with the command wo site edit Using the command wo site update \u00b6 The easiest way to update your site with the new WordOps configurations is to use the command: wo site update site.tld <options> To update your sites configuration, you can enable PHP 7.3 on your site with the argument --php73 and then disable it with the argument --php72 to use PHP 7.2. This will regenerate your site Nginx vhost and apply the new configuration. Example : # enable PHP 7.3 to regenerate site configuration wo site update site.tld --php73 # disable PHP 7.3 to use PHP 7.2 (optional) wo site update site.tld --php72 Manually editing site configuration \u00b6 You can edit sites configuration with the command: wo site edit site.tld Info You will be prompted to choose a text editor, if you are new to linux, we recommend you to choose nano. In Nginx vhost configuration, you will find several lines beginning with include . To use the new WordOps configuration, you just have to replace the path of the configuration set after include . For example include common/locations.conf; has to be replaced by include common/locations-wo.conf; . Warning Make sure to not remove the ; at the end of the line when updating Nginx configuration. For all WordPress related configuration files like wpsc.conf or wpfc-php7.conf , new configurations files are just named wpsc-php72.conf or wpfc-php72.conf . There are some exceptions, list here: Previous configuration New configuration common/locations.conf common/locations-wo.conf common/locations-php7.conf common/locations-wo.conf common/php.conf common/php72.conf common/php7.conf common/php72.conf Removing previous PHP version \u00b6 If you do not need php5.6 and php7.0 anymore, you can safely remove them with the following commands: # php5.6 apt-get -y autoremove php5.6-fpm php5.6-common --purge # php7.0 apt-get -y autoremove php7.0-fpm php7.0-common --purge Upgrading MariaDB to 10.3 \u00b6 Warning Before upgrading MariaDB, we strongly recommend you to perform a backup of your MySQL databases. Backup your databases \u00b6 You can backup your MySQL databases with this simple bash script: wget https://git.io/JeGSb -O mysqldump.sh chmod +x mysqldump.sh Then perform a full backup: ./mysqldump.sh --full This will backup the whole MySQL server and store the gzipped dump in /var/www/mysqldump Additionally you can make a copy of the /var/lib/mysql directory: sudo service mysql stop sudo cp -rf /var/lib/mysql /var/lib/mysql-bak sudo service mysql start Upgrading MariaDB \u00b6 At first, you need to remove the current MariaDB-server installed. To do so, use the command: sudo apt-get autoremove mariadb-server -y Then you can reinstall the latest MariaDB-server version with WordOps: wo stack install --mysql And finally make sure any database table structure upgrades are applied: wo stack upgrade --mysql","title":"EasyEngine Migration"},{"location":"guides/migration-from-easyengine/#migration-from-easyengine-v3","text":"","title":"Migration from EasyEngine v3"},{"location":"guides/migration-from-easyengine/#running-wordops-install-script","text":"The first step to migrate from EasyEngine to WordOps is to run WordOps install script with the command: wget -qO wo wops.cc && sudo bash wo Info Before installing WordOps, the install script will backup all previous EasyEngine configurations. You will find them after the installation in /var/lib/wo-backup . It will also create all new Nginx configurations before syncing the old nginx directory with the new one. This way, if you have added custom Nginx configuration, you will find them at the same place than before the migration.","title":"Running WordOps install script"},{"location":"guides/migration-from-easyengine/#post-installation-steps","text":"After installing WordOps, if all your sites are still working properly, you can start using WordOps the same way as EasyEngine. For sites previously created with EasyEngine, you will have to change some settings in their configuration to use WordOps new configurations. This can be done with the command wo site update or by editing manually their configuration with the command wo site edit . Warning If some sites are still using php5.6 or php7.0 and are not compatible with newer PHP versions, do not change their vhost configuration. WordOps minimum and default PHP version is PHP 7.2. Additionally, sites previously created with --w3tc will have to use another cache option as we deprecated this stack.","title":"Post installation steps"},{"location":"guides/migration-from-easyengine/#updating-site-configuration","text":"You have the choice between two methods to update your site configuration: With the command wo site update (recommended) Manually with the command wo site edit","title":"Updating site configuration"},{"location":"guides/migration-from-easyengine/#using-the-command-wo-site-update","text":"The easiest way to update your site with the new WordOps configurations is to use the command: wo site update site.tld <options> To update your sites configuration, you can enable PHP 7.3 on your site with the argument --php73 and then disable it with the argument --php72 to use PHP 7.2. This will regenerate your site Nginx vhost and apply the new configuration. Example : # enable PHP 7.3 to regenerate site configuration wo site update site.tld --php73 # disable PHP 7.3 to use PHP 7.2 (optional) wo site update site.tld --php72","title":"Using the command wo site update"},{"location":"guides/migration-from-easyengine/#manually-editing-site-configuration","text":"You can edit sites configuration with the command: wo site edit site.tld Info You will be prompted to choose a text editor, if you are new to linux, we recommend you to choose nano. In Nginx vhost configuration, you will find several lines beginning with include . To use the new WordOps configuration, you just have to replace the path of the configuration set after include . For example include common/locations.conf; has to be replaced by include common/locations-wo.conf; . Warning Make sure to not remove the ; at the end of the line when updating Nginx configuration. For all WordPress related configuration files like wpsc.conf or wpfc-php7.conf , new configurations files are just named wpsc-php72.conf or wpfc-php72.conf . There are some exceptions, list here: Previous configuration New configuration common/locations.conf common/locations-wo.conf common/locations-php7.conf common/locations-wo.conf common/php.conf common/php72.conf common/php7.conf common/php72.conf","title":"Manually editing site configuration"},{"location":"guides/migration-from-easyengine/#removing-previous-php-version","text":"If you do not need php5.6 and php7.0 anymore, you can safely remove them with the following commands: # php5.6 apt-get -y autoremove php5.6-fpm php5.6-common --purge # php7.0 apt-get -y autoremove php7.0-fpm php7.0-common --purge","title":"Removing previous PHP version"},{"location":"guides/migration-from-easyengine/#upgrading-mariadb-to-103","text":"Warning Before upgrading MariaDB, we strongly recommend you to perform a backup of your MySQL databases.","title":"Upgrading MariaDB to 10.3"},{"location":"guides/migration-from-easyengine/#backup-your-databases","text":"You can backup your MySQL databases with this simple bash script: wget https://git.io/JeGSb -O mysqldump.sh chmod +x mysqldump.sh Then perform a full backup: ./mysqldump.sh --full This will backup the whole MySQL server and store the gzipped dump in /var/www/mysqldump Additionally you can make a copy of the /var/lib/mysql directory: sudo service mysql stop sudo cp -rf /var/lib/mysql /var/lib/mysql-bak sudo service mysql start","title":"Backup your databases"},{"location":"guides/migration-from-easyengine/#upgrading-mariadb","text":"At first, you need to remove the current MariaDB-server installed. To do so, use the command: sudo apt-get autoremove mariadb-server -y Then you can reinstall the latest MariaDB-server version with WordOps: wo stack install --mysql And finally make sure any database table structure upgrades are applied: wo stack upgrade --mysql","title":"Upgrading MariaDB"},{"location":"guides/wordops-with-digitalocean-volume/","text":"Use WordOps with DigitalOcean's volume \u00b6 This is assuming you start with a brand new droplet and a brand new volume. Getting Started \u00b6 1) Create Droplet. 2) Add volume \u2013> Automatically format and mount This guide is based as if your volume would be named: YOUR-VOLUME 3) Login to the droplet from the console, will ask for root password change. 4) Create directory /var/www where we will mount the volume and WordOps will be installed. mkdir -p /var/www Mounting the volume \u00b6 Steps 5 and 6 are according to DigitalOcean -> Volumes -> 'More' tab of YOUR-VOLUME -> Config instructions 5) Mount Digital Ocean's volume in /var/www mount -o discard,defaults,noatime /dev/disk/by-id/scsi-0DO_Volume_YOUR-VOLUME /var/www 6) Change fstab so the volume will be mounted after a reboot echo '/dev/disk/by-id/scsi-0DO_Volume_YOUR-VOLUME /var/www ext4 defaults,nofail,discard 0 0' | sudo tee -a /etc/fstab Installing WordOps \u00b6 7) Install WordOps According to One-Step Automated WordOps Install wget -qO wo wops.cc && sudo bash wo You can enable autocomplete right after install with: source /etc/bash_completion.d/wo_auto.rc 8) Install WordOps stacks (optional) wo stack install And that's it! Notes \u00b6 Just check with df -h or in netdata if /var/www/ is shown with the correct size of your volume.","title":"WordOps With DigitalOcean volumes"},{"location":"guides/wordops-with-digitalocean-volume/#use-wordops-with-digitaloceans-volume","text":"This is assuming you start with a brand new droplet and a brand new volume.","title":"Use WordOps with DigitalOcean's volume"},{"location":"guides/wordops-with-digitalocean-volume/#getting-started","text":"1) Create Droplet. 2) Add volume \u2013> Automatically format and mount This guide is based as if your volume would be named: YOUR-VOLUME 3) Login to the droplet from the console, will ask for root password change. 4) Create directory /var/www where we will mount the volume and WordOps will be installed. mkdir -p /var/www","title":"Getting Started"},{"location":"guides/wordops-with-digitalocean-volume/#mounting-the-volume","text":"Steps 5 and 6 are according to DigitalOcean -> Volumes -> 'More' tab of YOUR-VOLUME -> Config instructions 5) Mount Digital Ocean's volume in /var/www mount -o discard,defaults,noatime /dev/disk/by-id/scsi-0DO_Volume_YOUR-VOLUME /var/www 6) Change fstab so the volume will be mounted after a reboot echo '/dev/disk/by-id/scsi-0DO_Volume_YOUR-VOLUME /var/www ext4 defaults,nofail,discard 0 0' | sudo tee -a /etc/fstab","title":"Mounting the volume"},{"location":"guides/wordops-with-digitalocean-volume/#installing-wordops","text":"7) Install WordOps According to One-Step Automated WordOps Install wget -qO wo wops.cc && sudo bash wo You can enable autocomplete right after install with: source /etc/bash_completion.d/wo_auto.rc 8) Install WordOps stacks (optional) wo stack install And that's it!","title":"Installing WordOps"},{"location":"guides/wordops-with-digitalocean-volume/#notes","text":"Just check with df -h or in netdata if /var/www/ is shown with the correct size of your volume.","title":"Notes"},{"location":"guides/wordpress-migration/","text":"WordPress sites migration \u00b6 Context \u00b6 You want to migrate a WordPress site hosted on a server running EEv3 or WordOps to a new one running with WordOps. The site you want to migrate was created with the flag --wpredis In our example : new server name is NEW-SRV with IP 10.0.0.1 the previous server is OLD-SRV with IP 192.168.0.1 site domain is mydomain.tld On the previous server (OLD-SRV) \u00b6 Dump WordPress database \u00b6 Go into your site directory and dump WordPress database with WP-CLI cd /var/www/mydomain.tld/htdocs wp db export --allow-root Info If WP-CLI isn't installed on your server, you can get it by running the following commands : curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x wp-cli.phar sudo mv wp-cli.phar /usr/local/bin/wp On the new server (NEW-SRV) \u00b6 Initial server update \u00b6 apt-get update && apt-get dist-upgrade -y && apt-get autoremove --purge -y && apt-get autoclean Install WordOps and main stacks \u00b6 wget -qO wo wops.cc && sudo bash wo wo stack install Create wordpress site with same domain \u00b6 wo site create mydomain.tld --wpredis Cleanup default WP database and remove files \u00b6 sudo -u www-data -H wp db clean --yes --path = /var/www/mydomain.tld/htdocs rm -rf /var/www/mydomain.tld/htdocs/* Setup a password-less ssh access between your servers \u00b6 Generate SSH-Keys \u00b6 If the user on the new server do not have ssh-keys yet, you can generate them with the following command : ssh-keygen -t ed25519 Then just press enter to confirm ssh key path. Your public ssh key should be available in the directory ~/.ssh/ ( /root/.ssh/ if you are logged in as root ) Add SSH Public key to OLD-SRV \u00b6 You can use the following command to automatically add the public SSH Key to the server : ssh-copy-id root@192.168.0.1 Otherwise, you can still display the public ssh-key with the command cat ~/.ssh/id_ed25519.pub and copy it manually in the file ~/.ssh/authorized_keys of the other server. SSH Login without password \u00b6 You should now be able to login from the server where you generated the SSH Keys to the other one without password : ssh root@192.168.0.1 SSH Alias and config \u00b6 If you prefer to use an alias to login to OLD-SRV rather than using the IP, or if you want to define a custom SSH port, you just have to create/edit the file ~/.ssh/config and to define settings this way : Host OLD-SRV Hostname 192 .168.0.1 Port 12345 Then you will be able to login with : ssh root@OLD-SRV or even with ssh OLD-SRV Transfer files from OLD-SRV to NEW-SRV \u00b6 To safely migrate files from OLD-SRV to NEW-SRV, we will use rsync because it's fast and secure (files transfer is done over SSH). If you have configured password-less SSH login with the previous steps, and defined an alias into ~/.ssh/config you can use the following command to copy files from OLD-SRV to NEW-SRV rsync -avzh --progress --ignore-existing \\ root@OLD-SRV:/var/www/mydomain.tld/htdocs/ \\ /var/www/mydomain.tld/htdocs/ If you haven't created the file ~/.ssh/config and use custom SSH ports, you can define SSH port with rsync by using the following command : rsync -avzh -e \"ssh -p 12345\" \\ --progress --ignore-existing \\ root@old_server_IP:/var/www/mydomain.tld/htdocs/ \\ /var/www/mydomain.tld/htdocs/ Do not copy the file wp-config.php \u00b6 With WordOps or EasyEngine v3, wp-config.php default path is /var/www/mydomain.tld . If you moved it into htdocs directory, it was probably transfered with rsync during the previous step. In this case remove it or rename it before importing the database on the new server, otherwise WP-CLI may not be able to login into MySQL. Command example to keep previous wp-config.php file as backup : mv /var/www/mydomain.tld/htdocs/wp-config.php /var/www/mydomain.tld/wp-config.php.bak Restore the database on NEW-SRV \u00b6 We will use WP-CLI to easily import the database dump we have previously created on OLD-SRV. cd /var/www/mydomain.tld/htdocs wp db import my_domain_tld-2019-07-25-XX44z4.sql --allow-root rm mydomain_co-2019-07-25-XX44z4.sql Let's Encrypt \u00b6 If your site was secured with a Let's Encrypt SSL certificate, you can issue a new certificate on NEW-SRV with the command : wo site update mydomain.tld -le","title":"WordPress sites migration"},{"location":"guides/wordpress-migration/#wordpress-sites-migration","text":"","title":"WordPress sites migration"},{"location":"guides/wordpress-migration/#context","text":"You want to migrate a WordPress site hosted on a server running EEv3 or WordOps to a new one running with WordOps. The site you want to migrate was created with the flag --wpredis In our example : new server name is NEW-SRV with IP 10.0.0.1 the previous server is OLD-SRV with IP 192.168.0.1 site domain is mydomain.tld","title":"Context"},{"location":"guides/wordpress-migration/#on-the-previous-server-old-srv","text":"","title":"On the previous server (OLD-SRV)"},{"location":"guides/wordpress-migration/#dump-wordpress-database","text":"Go into your site directory and dump WordPress database with WP-CLI cd /var/www/mydomain.tld/htdocs wp db export --allow-root Info If WP-CLI isn't installed on your server, you can get it by running the following commands : curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar chmod +x wp-cli.phar sudo mv wp-cli.phar /usr/local/bin/wp","title":"Dump WordPress database"},{"location":"guides/wordpress-migration/#on-the-new-server-new-srv","text":"","title":"On the new server (NEW-SRV)"},{"location":"guides/wordpress-migration/#initial-server-update","text":"apt-get update && apt-get dist-upgrade -y && apt-get autoremove --purge -y && apt-get autoclean","title":"Initial server update"},{"location":"guides/wordpress-migration/#install-wordops-and-main-stacks","text":"wget -qO wo wops.cc && sudo bash wo wo stack install","title":"Install WordOps and main stacks"},{"location":"guides/wordpress-migration/#create-wordpress-site-with-same-domain","text":"wo site create mydomain.tld --wpredis","title":"Create wordpress site with same domain"},{"location":"guides/wordpress-migration/#cleanup-default-wp-database-and-remove-files","text":"sudo -u www-data -H wp db clean --yes --path = /var/www/mydomain.tld/htdocs rm -rf /var/www/mydomain.tld/htdocs/*","title":"Cleanup default WP database and remove files"},{"location":"guides/wordpress-migration/#setup-a-password-less-ssh-access-between-your-servers","text":"","title":"Setup a password-less ssh access between your servers"},{"location":"guides/wordpress-migration/#generate-ssh-keys","text":"If the user on the new server do not have ssh-keys yet, you can generate them with the following command : ssh-keygen -t ed25519 Then just press enter to confirm ssh key path. Your public ssh key should be available in the directory ~/.ssh/ ( /root/.ssh/ if you are logged in as root )","title":"Generate SSH-Keys"},{"location":"guides/wordpress-migration/#add-ssh-public-key-to-old-srv","text":"You can use the following command to automatically add the public SSH Key to the server : ssh-copy-id root@192.168.0.1 Otherwise, you can still display the public ssh-key with the command cat ~/.ssh/id_ed25519.pub and copy it manually in the file ~/.ssh/authorized_keys of the other server.","title":"Add SSH Public key to OLD-SRV"},{"location":"guides/wordpress-migration/#ssh-login-without-password","text":"You should now be able to login from the server where you generated the SSH Keys to the other one without password : ssh root@192.168.0.1","title":"SSH Login without password"},{"location":"guides/wordpress-migration/#ssh-alias-and-config","text":"If you prefer to use an alias to login to OLD-SRV rather than using the IP, or if you want to define a custom SSH port, you just have to create/edit the file ~/.ssh/config and to define settings this way : Host OLD-SRV Hostname 192 .168.0.1 Port 12345 Then you will be able to login with : ssh root@OLD-SRV or even with ssh OLD-SRV","title":"SSH Alias and config"},{"location":"guides/wordpress-migration/#transfer-files-from-old-srv-to-new-srv","text":"To safely migrate files from OLD-SRV to NEW-SRV, we will use rsync because it's fast and secure (files transfer is done over SSH). If you have configured password-less SSH login with the previous steps, and defined an alias into ~/.ssh/config you can use the following command to copy files from OLD-SRV to NEW-SRV rsync -avzh --progress --ignore-existing \\ root@OLD-SRV:/var/www/mydomain.tld/htdocs/ \\ /var/www/mydomain.tld/htdocs/ If you haven't created the file ~/.ssh/config and use custom SSH ports, you can define SSH port with rsync by using the following command : rsync -avzh -e \"ssh -p 12345\" \\ --progress --ignore-existing \\ root@old_server_IP:/var/www/mydomain.tld/htdocs/ \\ /var/www/mydomain.tld/htdocs/","title":"Transfer files from OLD-SRV to NEW-SRV"},{"location":"guides/wordpress-migration/#do-not-copy-the-file-wp-configphp","text":"With WordOps or EasyEngine v3, wp-config.php default path is /var/www/mydomain.tld . If you moved it into htdocs directory, it was probably transfered with rsync during the previous step. In this case remove it or rename it before importing the database on the new server, otherwise WP-CLI may not be able to login into MySQL. Command example to keep previous wp-config.php file as backup : mv /var/www/mydomain.tld/htdocs/wp-config.php /var/www/mydomain.tld/wp-config.php.bak","title":"Do not copy the file wp-config.php"},{"location":"guides/wordpress-migration/#restore-the-database-on-new-srv","text":"We will use WP-CLI to easily import the database dump we have previously created on OLD-SRV. cd /var/www/mydomain.tld/htdocs wp db import my_domain_tld-2019-07-25-XX44z4.sql --allow-root rm mydomain_co-2019-07-25-XX44z4.sql","title":"Restore the database on NEW-SRV"},{"location":"guides/wordpress-migration/#lets-encrypt","text":"If your site was secured with a Let's Encrypt SSL certificate, you can issue a new certificate on NEW-SRV with the command : wo site update mydomain.tld -le","title":"Let's Encrypt"},{"location":"how-to/add-ftp-users/","text":"How to add FTP users \u00b6 WordOps ProFTPd stack provide the ability to install and configure automatically ProFTPd and to secure it with a self-signed certificates (same encryption level than any other valid certificate). You can install it with : wo stack install --proftpd But WordOps do not provide an easy way to add FTP users yet. So this short guide will explain how to add a new FTP user. Info This guide explain how to add new users safely, which means : users will not be able to login via SSH or any shell users will only have access to a single site files Adding a new user \u00b6 In this example we will add a new user named wordops , and he will only be able to access to all files of the site wordops.net : adduser --home /var/www/wordops.net/htdocs/ \\ --shell /bin/false --ingroup www-data wordops There is another step to allow our new user to upload/edit files : chmod -R g+rw /var/www/wordops.net/htdocs","title":"Add FTP users"},{"location":"how-to/add-ftp-users/#how-to-add-ftp-users","text":"WordOps ProFTPd stack provide the ability to install and configure automatically ProFTPd and to secure it with a self-signed certificates (same encryption level than any other valid certificate). You can install it with : wo stack install --proftpd But WordOps do not provide an easy way to add FTP users yet. So this short guide will explain how to add a new FTP user. Info This guide explain how to add new users safely, which means : users will not be able to login via SSH or any shell users will only have access to a single site files","title":"How to add FTP users"},{"location":"how-to/add-ftp-users/#adding-a-new-user","text":"In this example we will add a new user named wordops , and he will only be able to access to all files of the site wordops.net : adduser --home /var/www/wordops.net/htdocs/ \\ --shell /bin/false --ingroup www-data wordops There is another step to allow our new user to upload/edit files : chmod -R g+rw /var/www/wordops.net/htdocs","title":"Adding a new user"},{"location":"how-to/allow-zip-gzip-files-download/","text":"Allow zip & gzip files download \u00b6 By default, WordOps deny access to zip, gzip and other archives format to avoid unwanted access to users's backup. If you absolutely need to download those files, you can customize WordOps Nginx configuration. Edit Nginx configuration \u00b6 For all sites \u00b6 For both WordPress and non-WordPress sites, the first file to edit is /etc/nginx/common/locations-wo.conf : nano /etc/nginx/common/locations-wo.conf You will find the following directive : # Deny backup extensions & log files and return 403 forbidden location ~ * \"\\.(old|orig|original|php #|php~|php_bak|save|swo|aspx?|tpl|sh|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf|gz|zip|bz2|7z|pem|asc|conf|dump)$\" { deny all ; } You just have to remove the files extensions you want to download. Then save your changes, and reload Nginx with wo stack reload --nginx . To make sure your configuration will not be overwritted later, you have to create an empty file /etc/nginx/common/locations-wo.conf.custom : touch /etc/nginx/common/locations-wo.conf.custom For WordPress sites \u00b6 For WordPress sites, there is an additional configuration in /etc/nginx/common/wpcommon-php7x.conf where 7x is the PHP version, it can be 72 , 73 or 74 . Example, for a site running with PHP 7.4 : nano /etc/nginx/common/wpcommon-php74.conf You will find the following directive : location ~ * \\.(php|gz|log|zip|tar|rar|xz) $ { #Prevent Direct Access Of PHP Files & Backups from Web Browsers deny all ; } Do the same than in the previous example, by removing files extensions you want to download, reload Nginx and create an empty .custom file to make sure your custom configuration will not be overwritted.","title":"How to allow zip & gzip files download"},{"location":"how-to/allow-zip-gzip-files-download/#allow-zip-gzip-files-download","text":"By default, WordOps deny access to zip, gzip and other archives format to avoid unwanted access to users's backup. If you absolutely need to download those files, you can customize WordOps Nginx configuration.","title":"Allow zip &amp; gzip files download"},{"location":"how-to/allow-zip-gzip-files-download/#edit-nginx-configuration","text":"","title":"Edit Nginx configuration"},{"location":"how-to/allow-zip-gzip-files-download/#for-all-sites","text":"For both WordPress and non-WordPress sites, the first file to edit is /etc/nginx/common/locations-wo.conf : nano /etc/nginx/common/locations-wo.conf You will find the following directive : # Deny backup extensions & log files and return 403 forbidden location ~ * \"\\.(old|orig|original|php #|php~|php_bak|save|swo|aspx?|tpl|sh|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf|gz|zip|bz2|7z|pem|asc|conf|dump)$\" { deny all ; } You just have to remove the files extensions you want to download. Then save your changes, and reload Nginx with wo stack reload --nginx . To make sure your configuration will not be overwritted later, you have to create an empty file /etc/nginx/common/locations-wo.conf.custom : touch /etc/nginx/common/locations-wo.conf.custom","title":"For all sites"},{"location":"how-to/allow-zip-gzip-files-download/#for-wordpress-sites","text":"For WordPress sites, there is an additional configuration in /etc/nginx/common/wpcommon-php7x.conf where 7x is the PHP version, it can be 72 , 73 or 74 . Example, for a site running with PHP 7.4 : nano /etc/nginx/common/wpcommon-php74.conf You will find the following directive : location ~ * \\.(php|gz|log|zip|tar|rar|xz) $ { #Prevent Direct Access Of PHP Files & Backups from Web Browsers deny all ; } Do the same than in the previous example, by removing files extensions you want to download, reload Nginx and create an empty .custom file to make sure your custom configuration will not be overwritted.","title":"For WordPress sites"},{"location":"how-to/automate-wordops-install/","text":"How to automate WordOps installation \u00b6 During WordOps installation, you will be prompted for a username and an email (required for git configuration). But it's pretty easy to make WordOps installation non-interactive. Method 1 : using the --force flag \u00b6 To allow users to perform non-interactive installation of WordOps, we added the flag --force into our install script. This way you just have to use the following command to install WordOps without being prompted : wget -qO wo wops.cc && sudo bash wo --force Method 2 : using the .gitconfig file \u00b6 If you prefer to configure manually git before installing WordOps, this can be done by creating a .gitconfig file in your user home directory. You can use the command git config --global --edit to create this file and edit it with your preferred text editor. It should look like the following example : [user] name = user email = user@domain.tld","title":"Automate WordOps installation"},{"location":"how-to/automate-wordops-install/#how-to-automate-wordops-installation","text":"During WordOps installation, you will be prompted for a username and an email (required for git configuration). But it's pretty easy to make WordOps installation non-interactive.","title":"How to automate WordOps installation"},{"location":"how-to/automate-wordops-install/#method-1-using-the-force-flag","text":"To allow users to perform non-interactive installation of WordOps, we added the flag --force into our install script. This way you just have to use the following command to install WordOps without being prompted : wget -qO wo wops.cc && sudo bash wo --force","title":"Method 1 : using the --force flag"},{"location":"how-to/automate-wordops-install/#method-2-using-the-gitconfig-file","text":"If you prefer to configure manually git before installing WordOps, this can be done by creating a .gitconfig file in your user home directory. You can use the command git config --global --edit to create this file and edit it with your preferred text editor. It should look like the following example : [user] name = user email = user@domain.tld","title":"Method 2 : using the .gitconfig file"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/","text":"How to bypass fastcgi_cache cache on specific URLs \u00b6 Here is a couple of ways to bypass fastcgi_cache (sites created with --wpfc ) on specific URLs. 1. Via custom nginx config \u00b6 The cache rules for fastcgi_cache are defined in /etc/nginx/conf.d/map-wp-fastcgi-cache.conf . First, create an empty map-wp-fastcgi-cache.conf.custom so that your custom rules does not get overwritten in future WordOps updates: touch /etc/nginx/conf.d/map-wp-fastcgi-cache.conf.custom Then edit map-wp-fastcgi-cache.conf with your custom page slugs in the map $request_uri $uri_no_cache block: map $request_uri $uri_no_cache { .... \"~*/resetpass/\" 1 ; \"~*/my-page-slug/\" 1 ; } Reload nginx: nginx -t && systemctl reload nginx 2. Via cookie \u00b6 A possible easier way is to set a custom cookie. As defined in /etc/nginx/conf.d/map-wp-fastcgi-cache.conf , cache is bypassed if certain cookies are present, for example wordpress_no_cache . To take advantage of this, consider the following snippet placed in a plugin or in your theme's functions.php : function set_bypass_cache_cookie() { setcookie('wordpress_no_cache', '1', 0, '/my-page-slug/'); } add_action( 'init', 'set_bypass_cache_cookie'); Note that this method bypasses cache in all subfolders too, for example /my-page-slug/subfolder/another-subfolder/ . If you would like an user interface (screenshot below) for managing URLs using the method above, take a look at this plugin .","title":"Bypass fastcgi_cache on specific URLs"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/#how-to-bypass-fastcgi_cache-cache-on-specific-urls","text":"Here is a couple of ways to bypass fastcgi_cache (sites created with --wpfc ) on specific URLs.","title":"How to bypass fastcgi_cache cache on specific URLs"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/#1-via-custom-nginx-config","text":"The cache rules for fastcgi_cache are defined in /etc/nginx/conf.d/map-wp-fastcgi-cache.conf . First, create an empty map-wp-fastcgi-cache.conf.custom so that your custom rules does not get overwritten in future WordOps updates: touch /etc/nginx/conf.d/map-wp-fastcgi-cache.conf.custom Then edit map-wp-fastcgi-cache.conf with your custom page slugs in the map $request_uri $uri_no_cache block: map $request_uri $uri_no_cache { .... \"~*/resetpass/\" 1 ; \"~*/my-page-slug/\" 1 ; } Reload nginx: nginx -t && systemctl reload nginx","title":"1. Via custom nginx config"},{"location":"how-to/bypass-fastcgi-cache-on-specific-urls/#2-via-cookie","text":"A possible easier way is to set a custom cookie. As defined in /etc/nginx/conf.d/map-wp-fastcgi-cache.conf , cache is bypassed if certain cookies are present, for example wordpress_no_cache . To take advantage of this, consider the following snippet placed in a plugin or in your theme's functions.php : function set_bypass_cache_cookie() { setcookie('wordpress_no_cache', '1', 0, '/my-page-slug/'); } add_action( 'init', 'set_bypass_cache_cookie'); Note that this method bypasses cache in all subfolders too, for example /my-page-slug/subfolder/another-subfolder/ . If you would like an user interface (screenshot below) for managing URLs using the method above, take a look at this plugin .","title":"2. Via cookie"},{"location":"how-to/configure-letsencrypt-dns-api-validation/","text":"Let's Encrypt DNS API configuration \u00b6 WordOps use acme.sh to handle SSL certificates, which supports domain validation using DNS API. This feature is optional to issue domain and subdomain certificates, but is required to issue wildcard certificates. DNS API configuration \u00b6 WordOps use the Acme client acme.sh to handle Let's Encrypt SSL certificates. It support DNS API with the most part of popular DNS providers, including Cloudflare, DigitalOcean, OVH, Amazon Route53, Linode, Gandi and many others. In this example, we will configure Cloudflare DNS API, but configuration will be pretty similar with other DNS providers. Info DNS providers list and configurations are available in acme.sh wiki Step 1: get your API credentials \u00b6 Requirements: your Cloudflare account email address your Global API Key available in your Cloudflare profile Step 2: set your credentials with acme.sh variables \u00b6 Before issuing your first SSL certificate with DNS API, you have to define your API credentials with the command export : Example for Cloudflare: export CF_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email = \"xxxx@sss.com\" CF_Key: Cloudflare Global API key available in your Cloudflare profile CF_Email: Your Cloudflare account email address Example with DigitalOcean: export DO_API_KEY = \"75310dc4ca779ac39a19f6355db573b49ce92ae126553ebd61ac3a3ae34834cc\" Example with GoDaddy: export GD_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export GD_Secret = \"asdfsdafdsfdsfdsfdsfdsafd\" Info DNS providers list and configurations are available in Acme.sh Wiki Step 3: issue your certificate \u00b6 For a new site secured with a wildcard SSL certificates with Cloudflare DNS API Warning If you are using sudo to run wo commands, you need to use sudo -E to keep DNS API crendentials variables available for acme.sh So just put sudo -E before the following commands instead of just sudo . wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --letsencrypt=wildcard : issue a wildcard certificate domain.tld + *.domain.tld --dns=dns_cf : enable DNS API mode with Cloudflare. For an existant secured with a simple SSL certificate (site + www.site.tld ) with DigitalOcean DNS API wo site update site.tld -le --dns = dns_dgon -le : issue a certificate for domain.tld + www.domain.tld --dns=dns_dgon : enable DNS API mode with DigitalOcean Informations \u00b6 You can also use DNS API to issue domain and subdomain certificates. --dns=dns_cf define the DNS provider to use. With DigitalOcean, it would be --dns=dns_dgon After issuing a first certificate using DNS API, your API credentials will be saved in /etc/letsencrypt/config/account.conf . You do not need to define them anymore.","title":"Configure LetsEncrypt DNS API"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#lets-encrypt-dns-api-configuration","text":"WordOps use acme.sh to handle SSL certificates, which supports domain validation using DNS API. This feature is optional to issue domain and subdomain certificates, but is required to issue wildcard certificates.","title":"Let's Encrypt DNS API configuration"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#dns-api-configuration","text":"WordOps use the Acme client acme.sh to handle Let's Encrypt SSL certificates. It support DNS API with the most part of popular DNS providers, including Cloudflare, DigitalOcean, OVH, Amazon Route53, Linode, Gandi and many others. In this example, we will configure Cloudflare DNS API, but configuration will be pretty similar with other DNS providers. Info DNS providers list and configurations are available in acme.sh wiki","title":"DNS API configuration"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-1-get-your-api-credentials","text":"Requirements: your Cloudflare account email address your Global API Key available in your Cloudflare profile","title":"Step 1: get your API credentials"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-2-set-your-credentials-with-acmesh-variables","text":"Before issuing your first SSL certificate with DNS API, you have to define your API credentials with the command export : Example for Cloudflare: export CF_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email = \"xxxx@sss.com\" CF_Key: Cloudflare Global API key available in your Cloudflare profile CF_Email: Your Cloudflare account email address Example with DigitalOcean: export DO_API_KEY = \"75310dc4ca779ac39a19f6355db573b49ce92ae126553ebd61ac3a3ae34834cc\" Example with GoDaddy: export GD_Key = \"sdfsdfsdfljlbjkljlkjsdfoiwje\" export GD_Secret = \"asdfsdafdsfdsfdsfdsfdsafd\" Info DNS providers list and configurations are available in Acme.sh Wiki","title":"Step 2: set your credentials with acme.sh variables"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#step-3-issue-your-certificate","text":"For a new site secured with a wildcard SSL certificates with Cloudflare DNS API Warning If you are using sudo to run wo commands, you need to use sudo -E to keep DNS API crendentials variables available for acme.sh So just put sudo -E before the following commands instead of just sudo . wo site create site.tld --wp --letsencrypt = wildcard --dns = dns_cf --letsencrypt=wildcard : issue a wildcard certificate domain.tld + *.domain.tld --dns=dns_cf : enable DNS API mode with Cloudflare. For an existant secured with a simple SSL certificate (site + www.site.tld ) with DigitalOcean DNS API wo site update site.tld -le --dns = dns_dgon -le : issue a certificate for domain.tld + www.domain.tld --dns=dns_dgon : enable DNS API mode with DigitalOcean","title":"Step 3: issue your certificate"},{"location":"how-to/configure-letsencrypt-dns-api-validation/#informations","text":"You can also use DNS API to issue domain and subdomain certificates. --dns=dns_cf define the DNS provider to use. With DigitalOcean, it would be --dns=dns_dgon After issuing a first certificate using DNS API, your API credentials will be saved in /etc/letsencrypt/config/account.conf . You do not need to define them anymore.","title":"Informations"},{"location":"how-to/configure-ufw-firewall/","text":"How to configure UFW Firewall \u00b6 Install UFW \u00b6 sudo apt update && sudo apt install ufw -y Check what is your SSH Port \u00b6 grep \"Port\" /etc/ssh/sshd_config Add default rules \u00b6 ## enable logging sudo ufw logging low ## Use the default rules to allow outgoing traffic and to deny all incoming traffic. sudo ufw default allow outgoing sudo ufw default deny incoming # UFW Custom SSH Port CURRENT_SSH_PORT = $( grep \"Port\" /etc/ssh/sshd_config | awk -F \" \" '{print $2}' ) ufw limit \" $CURRENT_SSH_PORT \" ## allow SSH - DNS - HTTP and HTTPS - NTP sudo ufw limit 22 sudo ufw allow http sudo ufw allow https sudo ufw allow 123 ## WordOps backend sudo ufw limit 22222 ## FTP stack sudo ufw allow 21 sudo ufw allow 49000 :50000/tcp You can check what ports are currently used on your server with the following command: sudo netstat -tulpn Enabling UFW \u00b6 sudo ufw --force enable","title":"How to configure UFW Firewall"},{"location":"how-to/configure-ufw-firewall/#how-to-configure-ufw-firewall","text":"","title":"How to configure UFW Firewall"},{"location":"how-to/configure-ufw-firewall/#install-ufw","text":"sudo apt update && sudo apt install ufw -y","title":"Install UFW"},{"location":"how-to/configure-ufw-firewall/#check-what-is-your-ssh-port","text":"grep \"Port\" /etc/ssh/sshd_config","title":"Check what is your SSH Port"},{"location":"how-to/configure-ufw-firewall/#add-default-rules","text":"## enable logging sudo ufw logging low ## Use the default rules to allow outgoing traffic and to deny all incoming traffic. sudo ufw default allow outgoing sudo ufw default deny incoming # UFW Custom SSH Port CURRENT_SSH_PORT = $( grep \"Port\" /etc/ssh/sshd_config | awk -F \" \" '{print $2}' ) ufw limit \" $CURRENT_SSH_PORT \" ## allow SSH - DNS - HTTP and HTTPS - NTP sudo ufw limit 22 sudo ufw allow http sudo ufw allow https sudo ufw allow 123 ## WordOps backend sudo ufw limit 22222 ## FTP stack sudo ufw allow 21 sudo ufw allow 49000 :50000/tcp You can check what ports are currently used on your server with the following command: sudo netstat -tulpn","title":"Add default rules"},{"location":"how-to/configure-ufw-firewall/#enabling-ufw","text":"sudo ufw --force enable","title":"Enabling UFW"},{"location":"how-to/get-a-plus-grade-ssllabs/","text":"How to get an A+ Grade on ssllabs with WordOps \u00b6 This tutorial describe how to get the best SSL grade on ssllabs.com. To get an A+, it require to enable HSTS (HTTP Strict Transport Security). HSTS allows web servers to declare that web browsers should only interact with it using HTTPS connections and never via the insecure HTTP protocol. Warning Make sure your site/domain and subdomains will never need to use HTTP again, because after accessing a single time to your site with HSTS enabled, your web browser will not allow you to access it over http if you remove the SSL certificate for example. Issue an ssl certificate with WordOps and enable HSTS \u00b6 For a new site \u00b6 For a domain or a subdomain wo site create site.tld --wp -le --hsts For a multisite wo site create site.tld --wpsubdom -le = wildcard --hsts For an existant site without SSL \u00b6 For a domain or a subdomain wo site update site.tld -le --hsts For a multisite wo site update site.tld -le = wildcard --hsts For an existant site already secured with Let's Encrypt \u00b6 For a domain or a subdomain wo site update site.tld --hsts For a multisite wo site update site.tld --hsts Congratulations, you can now check your grade on https://www.ssllabs.com/ssltest/ Switching HSTS off \u00b6 It's not recommended to disable HSTS because web browser will store the HSTS directive for a long time (6 months) and will not allow access over HTTP even after disabling HSTS on the server. However, if you absolutely need to disable HSTS, you can use the following command: wo site update site.tld --hsts = off Hardening HSTS \u00b6 You can increase even more your site security by enabling HSTS preloading on your domain. It's the same than HSTS, but this time your domain will be directly added into the hstspreload.org list and web browsers will enable HSTS even without accessing to your site. This can be done on https://hstspreload.org","title":"Get A+ grade on ssllabs"},{"location":"how-to/get-a-plus-grade-ssllabs/#how-to-get-an-a-grade-on-ssllabs-with-wordops","text":"This tutorial describe how to get the best SSL grade on ssllabs.com. To get an A+, it require to enable HSTS (HTTP Strict Transport Security). HSTS allows web servers to declare that web browsers should only interact with it using HTTPS connections and never via the insecure HTTP protocol. Warning Make sure your site/domain and subdomains will never need to use HTTP again, because after accessing a single time to your site with HSTS enabled, your web browser will not allow you to access it over http if you remove the SSL certificate for example.","title":"How to get an A+ Grade on ssllabs with WordOps"},{"location":"how-to/get-a-plus-grade-ssllabs/#issue-an-ssl-certificate-with-wordops-and-enable-hsts","text":"","title":"Issue an ssl certificate with WordOps and enable HSTS"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-a-new-site","text":"For a domain or a subdomain wo site create site.tld --wp -le --hsts For a multisite wo site create site.tld --wpsubdom -le = wildcard --hsts","title":"For a new site"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-an-existant-site-without-ssl","text":"For a domain or a subdomain wo site update site.tld -le --hsts For a multisite wo site update site.tld -le = wildcard --hsts","title":"For an existant site without SSL"},{"location":"how-to/get-a-plus-grade-ssllabs/#for-an-existant-site-already-secured-with-lets-encrypt","text":"For a domain or a subdomain wo site update site.tld --hsts For a multisite wo site update site.tld --hsts Congratulations, you can now check your grade on https://www.ssllabs.com/ssltest/","title":"For an existant site already secured with Let's Encrypt"},{"location":"how-to/get-a-plus-grade-ssllabs/#switching-hsts-off","text":"It's not recommended to disable HSTS because web browser will store the HSTS directive for a long time (6 months) and will not allow access over HTTP even after disabling HSTS on the server. However, if you absolutely need to disable HSTS, you can use the following command: wo site update site.tld --hsts = off","title":"Switching HSTS off"},{"location":"how-to/get-a-plus-grade-ssllabs/#hardening-hsts","text":"You can increase even more your site security by enabling HSTS preloading on your domain. It's the same than HSTS, but this time your domain will be directly added into the hstspreload.org list and web browsers will enable HSTS even without accessing to your site. This can be done on https://hstspreload.org","title":"Hardening HSTS"},{"location":"how-to/issue-wildcard-ssl-certificate/","text":"How to issue a wildcard SSL certificate ? \u00b6","title":"How to issue a wildcard SSL certificate ?"},{"location":"how-to/issue-wildcard-ssl-certificate/#how-to-issue-a-wildcard-ssl-certificate","text":"","title":"How to issue a wildcard SSL certificate ?"},{"location":"how-to/microcaching-with-nginx/","text":"Microcaching with Nginx \u00b6 Context \u00b6 This guide applies to WordPress sites with Nginx fastcgi_cache (created with --wpfc ). WordOps cache pages for 24 hours, as set in /etc/nginx/conf.d/fastcgi.conf : fastcgi_cache_valid 200 24h ; This works very well on pages where you have content that rarely changes. But what if you have a page (or pages) with dynamic content? What if you have a page that queries an external API and stores the result somewhere? Looking for an alternative to WordPress Transients API? One solution is to use microcaching in Nginx where the page only is cached for a couple of minutes. This way your server can handle bursts of traffic while still serving dynamic content. Getting started \u00b6 Nginx lets you set dynamic cache expiration times with the X-Accel-Expires header. So if you have a specific page you want to microcache, consider this snippet placed in a plugin or in your theme's functions.php : function add_expires_header( $headers, $wp ) { if ( 0 === strpos( $wp->request, 'sample-page' ) ) { $headers['X-Accel-Expires'] = '120'; } return $headers; } add_filter( 'wp_headers', 'add_expires_header', 10, 2 ); This sets the TTL (time to live) on the URL https://domain.tld/sample-page for 2 minutes (120 seconds). Remember to purge any existing cache so that the new X-Accel-Expires header is registered by Nginx: wp nginx-helper purge-all --path = /var/www/domain.tld/htdocs Testing \u00b6 On the first request, Nginx returns x-fastcgi-cache: MISS , caches the page, and registers the TTL. Note that X-Accel-Expires is an internal header, and does not get outputted in the header: curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: MISS On the next request, Nginx returns x-fastcgi-cache: HIT : curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: HIT After 2 minutes, Nginx returns x-fastcgi-cache: STALE , which means it begins to fetch a new version in the background : curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: STALE Any requests before Nginx is finished, gets served with the old cached version, returning x-fastcgi-cache: UPDATING : curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: UPDATING When Nginx is done fetching in the background, the cache is updated with the new version of the page, and returns x-fastcgi-cache: HIT once again. This technique is superuseful , especially on slow pages with dynamic content. WordPress REST API \u00b6 Microcaching is also very effective if you have a custom REST API endpoint serving dynamic data. But you have to use a different filter since wp_headers is not used for API requests. For example: function add_expires_header( $served, $result, $request ) { if ( strpos( $request->get_route(), '/custom_endpoint' ) === 0 ) { header('X-Accel-Expires: 120'); } } add_filter( 'rest_pre_serve_request', 'add_expires_header', 10, 3 );","title":"Microcaching with Nginx"},{"location":"how-to/microcaching-with-nginx/#microcaching-with-nginx","text":"","title":"Microcaching with Nginx"},{"location":"how-to/microcaching-with-nginx/#context","text":"This guide applies to WordPress sites with Nginx fastcgi_cache (created with --wpfc ). WordOps cache pages for 24 hours, as set in /etc/nginx/conf.d/fastcgi.conf : fastcgi_cache_valid 200 24h ; This works very well on pages where you have content that rarely changes. But what if you have a page (or pages) with dynamic content? What if you have a page that queries an external API and stores the result somewhere? Looking for an alternative to WordPress Transients API? One solution is to use microcaching in Nginx where the page only is cached for a couple of minutes. This way your server can handle bursts of traffic while still serving dynamic content.","title":"Context"},{"location":"how-to/microcaching-with-nginx/#getting-started","text":"Nginx lets you set dynamic cache expiration times with the X-Accel-Expires header. So if you have a specific page you want to microcache, consider this snippet placed in a plugin or in your theme's functions.php : function add_expires_header( $headers, $wp ) { if ( 0 === strpos( $wp->request, 'sample-page' ) ) { $headers['X-Accel-Expires'] = '120'; } return $headers; } add_filter( 'wp_headers', 'add_expires_header', 10, 2 ); This sets the TTL (time to live) on the URL https://domain.tld/sample-page for 2 minutes (120 seconds). Remember to purge any existing cache so that the new X-Accel-Expires header is registered by Nginx: wp nginx-helper purge-all --path = /var/www/domain.tld/htdocs","title":"Getting started"},{"location":"how-to/microcaching-with-nginx/#testing","text":"On the first request, Nginx returns x-fastcgi-cache: MISS , caches the page, and registers the TTL. Note that X-Accel-Expires is an internal header, and does not get outputted in the header: curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: MISS On the next request, Nginx returns x-fastcgi-cache: HIT : curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: HIT After 2 minutes, Nginx returns x-fastcgi-cache: STALE , which means it begins to fetch a new version in the background : curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: STALE Any requests before Nginx is finished, gets served with the old cached version, returning x-fastcgi-cache: UPDATING : curl -Ik https://domain.tld/sample-page/ HTTP/2 200 server: nginx ... x-fastcgi-cache: UPDATING When Nginx is done fetching in the background, the cache is updated with the new version of the page, and returns x-fastcgi-cache: HIT once again. This technique is superuseful , especially on slow pages with dynamic content.","title":"Testing"},{"location":"how-to/microcaching-with-nginx/#wordpress-rest-api","text":"Microcaching is also very effective if you have a custom REST API endpoint serving dynamic data. But you have to use a different filter since wp_headers is not used for API requests. For example: function add_expires_header( $served, $result, $request ) { if ( strpos( $request->get_route(), '/custom_endpoint' ) === 0 ) { header('X-Accel-Expires: 120'); } } add_filter( 'rest_pre_serve_request', 'add_expires_header', 10, 3 );","title":"WordPress REST API"},{"location":"how-to/post-install-wp/","text":"There are multiple, viable approaches to automate post-installation of a WordPress blog using WordOps, without the need of adding new commands or increasing overall complexity. For this tutorial, we're going to show how to automatically install plugins and themes from official WordPress repository, as well as how to install custom plugins and themes, not available at wordpress.org. First thing first: configuring the \"custom\" repository \u00b6 The custom plugins and themes you're going to install on your newly installed blogs must be publicly available on a particular location of your knowledge. It's from there that our script will fetch them to add to WordPress. For example, one could store their custom plugins and themes in a GitHub repository. Or they could be available through public links in Google Drive, Dropbox, or even in a website set up just for serving this purpose \u2014 this is the approach this tutorial will cover. We'll save our plugins and themes in zip format, just following the standard. For this example, assume the subdomain downloads.sarmento.org is our repository, and the files are saved at the root level. Examples: https://downloads.sarmento.org/customplugin.zip https://downloads.sarmento.org/awesometheme.zip The script itself \u00b6 Save your script at an easy to remember location, e.g. /scripts/post-wp-install.sh and give it execution permission: chmod +x /scripts/post-wp-install.sh The contents of the script should be something like this, adapted to your own needs, of course: #! /bin/bash DOM = $1 if test -z $DOM ; then echo \"ERROR: no domain informed!\" exit 1 fi if [ ! -e \"/var/www/ ${ DOM } /wp-config.php\" ] ; then echo \"ERROR: ${ DOM } does not appear to be a valid WordPress!\" exit 1 fi cd \"/var/www/ ${ DOM } /htdocs\" || exit 1 ### Install plugins from official repository wp plugin install wordpress-seo --allow-root --activate wp plugin install wordpress-hide-login --allow-root --activate ### Install custom plugin wp plugin install https://downloads.sarmento.org/customplugin.zip --allow-root wp plugin activate customplugin --allow-root ### Install custom theme wp theme install https://downloads.sarmento.org/awesometheme.zip --allow-root wp theme activate awesometheme --allow-root ### Fix permissions chown www-data:www-data wp-content -R cd - exit 0 Example of how to use the script \u00b6 # install the blog wo site create thedomain.com --wpredis --php73 # run the script /scripts/post-wp-install.sh thedomain.com Notes about the script \u00b6 Except for the two \"ifs\" that check whether the domain was informed as a parameter and whether it is a valid WordPress, there is no complicated logic, just a sequence of commands. It is the most simple and effective way of standardizing the post installation of blogs using the tools already included in WordOps.","title":"Automate WordPress post-install"},{"location":"how-to/post-install-wp/#first-thing-first-configuring-the-custom-repository","text":"The custom plugins and themes you're going to install on your newly installed blogs must be publicly available on a particular location of your knowledge. It's from there that our script will fetch them to add to WordPress. For example, one could store their custom plugins and themes in a GitHub repository. Or they could be available through public links in Google Drive, Dropbox, or even in a website set up just for serving this purpose \u2014 this is the approach this tutorial will cover. We'll save our plugins and themes in zip format, just following the standard. For this example, assume the subdomain downloads.sarmento.org is our repository, and the files are saved at the root level. Examples: https://downloads.sarmento.org/customplugin.zip https://downloads.sarmento.org/awesometheme.zip","title":"First thing first: configuring the \"custom\" repository"},{"location":"how-to/post-install-wp/#the-script-itself","text":"Save your script at an easy to remember location, e.g. /scripts/post-wp-install.sh and give it execution permission: chmod +x /scripts/post-wp-install.sh The contents of the script should be something like this, adapted to your own needs, of course: #! /bin/bash DOM = $1 if test -z $DOM ; then echo \"ERROR: no domain informed!\" exit 1 fi if [ ! -e \"/var/www/ ${ DOM } /wp-config.php\" ] ; then echo \"ERROR: ${ DOM } does not appear to be a valid WordPress!\" exit 1 fi cd \"/var/www/ ${ DOM } /htdocs\" || exit 1 ### Install plugins from official repository wp plugin install wordpress-seo --allow-root --activate wp plugin install wordpress-hide-login --allow-root --activate ### Install custom plugin wp plugin install https://downloads.sarmento.org/customplugin.zip --allow-root wp plugin activate customplugin --allow-root ### Install custom theme wp theme install https://downloads.sarmento.org/awesometheme.zip --allow-root wp theme activate awesometheme --allow-root ### Fix permissions chown www-data:www-data wp-content -R cd - exit 0","title":"The script itself"},{"location":"how-to/post-install-wp/#example-of-how-to-use-the-script","text":"# install the blog wo site create thedomain.com --wpredis --php73 # run the script /scripts/post-wp-install.sh thedomain.com","title":"Example of how to use the script"},{"location":"how-to/post-install-wp/#notes-about-the-script","text":"Except for the two \"ifs\" that check whether the domain was informed as a parameter and whether it is a valid WordPress, there is no complicated logic, just a sequence of commands. It is the most simple and effective way of standardizing the post installation of blogs using the tools already included in WordOps.","title":"Notes about the script"},{"location":"how-to/remote-mysql-server/","text":"Use WordOps with a remote MySQL server \u00b6 By default, if there is no local MySQl server available, WordOps will install MySQL stack for any site that require a MySQL database. But you can easily configure WordOps to use a remote MySQL server. Here the steps to follow. Install MySQL client \u00b6 This can be done with the command : wo stack install --mysqlclient Allow remote root connection on the remote server \u00b6 Login into your remote MySQL server and grant privileges to root from a remote address : # allow root from any address with % mysql -e \"grant all privileges on *.* to 'root'@'%' IDENTIFIED BY 'your-very-strong-password' with grant option;\" # allow root access from a specific address (192.168.1.60) mysql -e \"grant all privileges on *.* to 'root'@'192.168.1.60' IDENTIFIED BY 'your-very-strong-password' with grant option;\" Then apply changes with : # flush privileges to appply changes mysql -e \"flush privileges;\" Also make sure the line bind 127.0.0.1 is commented in /etc/mysql/my.cnf. Otherwise, comment it and restart mysql. Set remote MySQL server credentials \u00b6 On your WordOps server, create the file /etc/mysql/conf.d/my.cnf and set your remote MySQL server crendentials, it should look like this example : [ client ] host = 192 .168.1.10 user = root password = your-very-strong-password Update Wordops configuration \u00b6 This is the last step to use your remote MySQL server, update the variable grant-host in /etc/wo/wo.conf by replacing localhost by % or your server IP. [ mysql ] ### MySQL database grant host name grant-host = %","title":"Remote MySQL server with WordOps"},{"location":"how-to/remote-mysql-server/#use-wordops-with-a-remote-mysql-server","text":"By default, if there is no local MySQl server available, WordOps will install MySQL stack for any site that require a MySQL database. But you can easily configure WordOps to use a remote MySQL server. Here the steps to follow.","title":"Use WordOps with a remote MySQL server"},{"location":"how-to/remote-mysql-server/#install-mysql-client","text":"This can be done with the command : wo stack install --mysqlclient","title":"Install MySQL client"},{"location":"how-to/remote-mysql-server/#allow-remote-root-connection-on-the-remote-server","text":"Login into your remote MySQL server and grant privileges to root from a remote address : # allow root from any address with % mysql -e \"grant all privileges on *.* to 'root'@'%' IDENTIFIED BY 'your-very-strong-password' with grant option;\" # allow root access from a specific address (192.168.1.60) mysql -e \"grant all privileges on *.* to 'root'@'192.168.1.60' IDENTIFIED BY 'your-very-strong-password' with grant option;\" Then apply changes with : # flush privileges to appply changes mysql -e \"flush privileges;\" Also make sure the line bind 127.0.0.1 is commented in /etc/mysql/my.cnf. Otherwise, comment it and restart mysql.","title":"Allow remote root connection on the remote server"},{"location":"how-to/remote-mysql-server/#set-remote-mysql-server-credentials","text":"On your WordOps server, create the file /etc/mysql/conf.d/my.cnf and set your remote MySQL server crendentials, it should look like this example : [ client ] host = 192 .168.1.10 user = root password = your-very-strong-password","title":"Set remote MySQL server credentials"},{"location":"how-to/remote-mysql-server/#update-wordops-configuration","text":"This is the last step to use your remote MySQL server, update the variable grant-host in /etc/wo/wo.conf by replacing localhost by % or your server IP. [ mysql ] ### MySQL database grant host name grant-host = %","title":"Update Wordops configuration"},{"location":"how-to/secure-22222/","text":"How to secure WordOps backend with Let's Encrypt SSL certificate \u00b6 Secure WordOps backend automatically \u00b6 From the release v3.9.8.1 and onward, WordOps will automatically secure the backend on port 22222 with the first SSL certificate issued on the server. So you just have to create basic site with the arguments --letsencrypt or -le to secure the backend. Example : if your server hostname is properly configured (read below), you can use : wo site create server.domain.tld -le Then you will be able to access to the backend with the adress : https://server.domain.tld:22222 Proper server hostname configuration Server hostname isn't only a name, it's the server public identity on the network. If your server is directly connected to internet(not behind a NAT), it should have a valid hostname. A valid hostname should looks like : myservername.yourdomain.tld myservername is the server name yourdomain.tld is one of your domains To edit hostname properly, use the command : hostnamectl set-hostname <yourserver.hostname.tld> To apply the new hostname, a reboot is required. The last step and the most important, you should create the proper DNS records to make the subdomain myservername.yourdomain.tld pointing to your server IP. Using another certificate \u00b6 Secure WordOps backend with the same certificate than another site \u00b6 If you already have a site secured with Let's Encrypt, you just have to copy the ssl.conf file stored in /var/www/site.tld/conf/nginx . DOMAIN_NAME = site.ltd sudo grep \"ssl_\" \\ /var/www/ ${ DOMAIN_NAME } /conf/nginx/ssl.conf > /var/www/22222/conf/nginx/ssl.conf Then reload Nginx: wo stack restart --nginx You should now be able to access to WordOps backend on https://site.tld:22222 Issue a new certificate to secure WordOps backend \u00b6 If you prefer to issue manually a new Let's Encrypt SSL certificate, here the steps to follow: Set your domain or subdomain as a variable: DOMAIN_NAME = backend.site.ltd Issue the certificate acme.sh --issue -d $DOMAIN_NAME -k ec-384 -w /var/www/html If the certificate as issued successfully, create a directory to store the certificate sudo mkdir -p /etc/letsencrypt/live/ ${ DOMAIN_NAME } Install the certificate acme.sh --install-cert -d $DOMAIN_NAME --ecc \\ --cert-file /etc/letsencrypt/live/ $DOMAIN_NAME /cert.pem \\ --key-file /etc/letsencrypt/live/ $DOMAIN_NAME /key.pem \\ --fullchain-file /etc/letsencrypt/live/ $DOMAIN_NAME /fullchain.pem \\ --ca-file /etc/letsencrypt/live/ $DOMAIN_NAME /ca.pem \\ --reloadcmd \"nginx -t && systemctl restart nginx.service\" Create the Nginx configuration cat <<EOF >/var/www/22222/conf/nginx/ssl.conf ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME/key.pem; ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN_NAME/ca.pem; EOF Then reload nginx wo stack restart --nginx","title":"Secure WordOps backend"},{"location":"how-to/secure-22222/#how-to-secure-wordops-backend-with-lets-encrypt-ssl-certificate","text":"","title":"How to secure WordOps backend with Let's Encrypt SSL certificate"},{"location":"how-to/secure-22222/#secure-wordops-backend-automatically","text":"From the release v3.9.8.1 and onward, WordOps will automatically secure the backend on port 22222 with the first SSL certificate issued on the server. So you just have to create basic site with the arguments --letsencrypt or -le to secure the backend. Example : if your server hostname is properly configured (read below), you can use : wo site create server.domain.tld -le Then you will be able to access to the backend with the adress : https://server.domain.tld:22222 Proper server hostname configuration Server hostname isn't only a name, it's the server public identity on the network. If your server is directly connected to internet(not behind a NAT), it should have a valid hostname. A valid hostname should looks like : myservername.yourdomain.tld myservername is the server name yourdomain.tld is one of your domains To edit hostname properly, use the command : hostnamectl set-hostname <yourserver.hostname.tld> To apply the new hostname, a reboot is required. The last step and the most important, you should create the proper DNS records to make the subdomain myservername.yourdomain.tld pointing to your server IP.","title":"Secure WordOps backend automatically"},{"location":"how-to/secure-22222/#using-another-certificate","text":"","title":"Using another certificate"},{"location":"how-to/secure-22222/#secure-wordops-backend-with-the-same-certificate-than-another-site","text":"If you already have a site secured with Let's Encrypt, you just have to copy the ssl.conf file stored in /var/www/site.tld/conf/nginx . DOMAIN_NAME = site.ltd sudo grep \"ssl_\" \\ /var/www/ ${ DOMAIN_NAME } /conf/nginx/ssl.conf > /var/www/22222/conf/nginx/ssl.conf Then reload Nginx: wo stack restart --nginx You should now be able to access to WordOps backend on https://site.tld:22222","title":"Secure WordOps backend with the same certificate than another site"},{"location":"how-to/secure-22222/#issue-a-new-certificate-to-secure-wordops-backend","text":"If you prefer to issue manually a new Let's Encrypt SSL certificate, here the steps to follow: Set your domain or subdomain as a variable: DOMAIN_NAME = backend.site.ltd Issue the certificate acme.sh --issue -d $DOMAIN_NAME -k ec-384 -w /var/www/html If the certificate as issued successfully, create a directory to store the certificate sudo mkdir -p /etc/letsencrypt/live/ ${ DOMAIN_NAME } Install the certificate acme.sh --install-cert -d $DOMAIN_NAME --ecc \\ --cert-file /etc/letsencrypt/live/ $DOMAIN_NAME /cert.pem \\ --key-file /etc/letsencrypt/live/ $DOMAIN_NAME /key.pem \\ --fullchain-file /etc/letsencrypt/live/ $DOMAIN_NAME /fullchain.pem \\ --ca-file /etc/letsencrypt/live/ $DOMAIN_NAME /ca.pem \\ --reloadcmd \"nginx -t && systemctl restart nginx.service\" Create the Nginx configuration cat <<EOF >/var/www/22222/conf/nginx/ssl.conf ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME/key.pem; ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN_NAME/ca.pem; EOF Then reload nginx wo stack restart --nginx","title":"Issue a new certificate to secure WordOps backend"},{"location":"how-to/setup-basic-auth/","text":"Setup basic auth on site \u00b6 Prerequisites \u00b6 Install Apache Utilities: apt install apache2-utils Create password file \u00b6 htpasswd -c /var/www/domain.tld/conf/nginx/.htpasswd username You will be asked to supply and confirm a password for the user. Configure nginx \u00b6 Edit /var/www/domain.tld/conf/nginx/auth.conf : auth_basic \"Restricted Access\" ; auth_basic_user_file /var/www/domain.tld/conf/nginx/.htpasswd ; Reload nginx: wo stack reload --nginx","title":"Setup basic auth on site"},{"location":"how-to/setup-basic-auth/#setup-basic-auth-on-site","text":"","title":"Setup basic auth on site"},{"location":"how-to/setup-basic-auth/#prerequisites","text":"Install Apache Utilities: apt install apache2-utils","title":"Prerequisites"},{"location":"how-to/setup-basic-auth/#create-password-file","text":"htpasswd -c /var/www/domain.tld/conf/nginx/.htpasswd username You will be asked to supply and confirm a password for the user.","title":"Create password file"},{"location":"how-to/setup-basic-auth/#configure-nginx","text":"Edit /var/www/domain.tld/conf/nginx/auth.conf : auth_basic \"Restricted Access\" ; auth_basic_user_file /var/www/domain.tld/conf/nginx/.htpasswd ; Reload nginx: wo stack reload --nginx","title":"Configure nginx"},{"location":"how-to/setup-passwordl-less-ssh/","text":"","title":"Setup passwordl less ssh"},{"location":"how-to/setup-sendmail-with-sendgrid/","text":"Setup Sendmail with Sendgrid \u00b6 How to setup Sendmail MTA (Mail Transport Agent) on server to use Sendgrid SMTP. Prerequisites \u00b6 Install required packages. wo stack install --sendmail apt install libsasl2-modules 1. Sendgrid API key \u00b6 Create a new Sendgrid API key (if not already created). 2. Create Auth File \u00b6 mkdir /etc/mail/authinfo chmod 700 /etc/mail/authinfo Create /etc/mail/authinfo/smtp-auth and add the following content: AuthInfo: \"U:root\" \"I:apikey\" \"P:API_KEY\" Create a hash map file of above created auth file. makemap hash /etc/mail/authinfo/smtp-auth < /etc/mail/authinfo/smtp-auth 3. Configure Sendmail with SMART_HOST \u00b6 Add the following configuration lines into /etc/mail/sendmail.mc after MAILER_DEFINITIONS and before MAILER(`local')dnl at the bottom. define(`SMART_HOST',`[smtp.sendgrid.com]')dnl define(`RELAY_MAILER_ARGS', `TCP $h 587')dnl define(`ESMTP_MAILER_ARGS', `TCP $h 587')dnl define(`confAUTH_OPTIONS', `A p')dnl TRUST_AUTH_MECH(`EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN')dnl define(`confAUTH_MECHANISMS', `EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN')dnl FEATURE(`authinfo',`hash -o /etc/mail/authinfo/smtp-auth.db')dnl Re-build sendmail's configuration: make -C /etc/mail 4. Verify setup \u00b6 service sendmail reload Send test email to name@domain.tld : sendmail name@domain.tld Subject: Test This is the body of the test email. Press control + d to send.","title":"Setup Sendmail with Sendgrid"},{"location":"how-to/setup-sendmail-with-sendgrid/#setup-sendmail-with-sendgrid","text":"How to setup Sendmail MTA (Mail Transport Agent) on server to use Sendgrid SMTP.","title":"Setup Sendmail with Sendgrid"},{"location":"how-to/setup-sendmail-with-sendgrid/#prerequisites","text":"Install required packages. wo stack install --sendmail apt install libsasl2-modules","title":"Prerequisites"},{"location":"how-to/setup-sendmail-with-sendgrid/#1-sendgrid-api-key","text":"Create a new Sendgrid API key (if not already created).","title":"1. Sendgrid API key"},{"location":"how-to/setup-sendmail-with-sendgrid/#2-create-auth-file","text":"mkdir /etc/mail/authinfo chmod 700 /etc/mail/authinfo Create /etc/mail/authinfo/smtp-auth and add the following content: AuthInfo: \"U:root\" \"I:apikey\" \"P:API_KEY\" Create a hash map file of above created auth file. makemap hash /etc/mail/authinfo/smtp-auth < /etc/mail/authinfo/smtp-auth","title":"2. Create Auth File"},{"location":"how-to/setup-sendmail-with-sendgrid/#3-configure-sendmail-with-smart_host","text":"Add the following configuration lines into /etc/mail/sendmail.mc after MAILER_DEFINITIONS and before MAILER(`local')dnl at the bottom. define(`SMART_HOST',`[smtp.sendgrid.com]')dnl define(`RELAY_MAILER_ARGS', `TCP $h 587')dnl define(`ESMTP_MAILER_ARGS', `TCP $h 587')dnl define(`confAUTH_OPTIONS', `A p')dnl TRUST_AUTH_MECH(`EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN')dnl define(`confAUTH_MECHANISMS', `EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN')dnl FEATURE(`authinfo',`hash -o /etc/mail/authinfo/smtp-auth.db')dnl Re-build sendmail's configuration: make -C /etc/mail","title":"3. Configure Sendmail with SMART_HOST"},{"location":"how-to/setup-sendmail-with-sendgrid/#4-verify-setup","text":"service sendmail reload Send test email to name@domain.tld : sendmail name@domain.tld Subject: Test This is the body of the test email. Press control + d to send.","title":"4. Verify setup"},{"location":"how-to/ubuntu-lts-hwe-stacks/","text":"LTS Enablement Stacks \u00b6 The Ubuntu LTS enablement (also called HWE or Hardware Enablement) stacks provide newer kernel and X support for existing Ubuntu LTS releases. How to install HWE stacks on Ubuntu \u00b6 To enable HWE stacks on Ubuntu 18.04 LTS, you just have to run the following command : sudo apt-get install --install-recommends linux-generic-hwe-18.04 -y After the install process, you will just have to reboot your server to boot on the new kernel : sudo shutdown -r now","title":"Install HWE stacks on Ubuntu"},{"location":"how-to/ubuntu-lts-hwe-stacks/#lts-enablement-stacks","text":"The Ubuntu LTS enablement (also called HWE or Hardware Enablement) stacks provide newer kernel and X support for existing Ubuntu LTS releases.","title":"LTS Enablement Stacks"},{"location":"how-to/ubuntu-lts-hwe-stacks/#how-to-install-hwe-stacks-on-ubuntu","text":"To enable HWE stacks on Ubuntu 18.04 LTS, you just have to run the following command : sudo apt-get install --install-recommends linux-generic-hwe-18.04 -y After the install process, you will just have to reboot your server to boot on the new kernel : sudo shutdown -r now","title":"How to install HWE stacks on Ubuntu"},{"location":"how-to/wordops-server-maintenance/","text":"WordOps server maintenance \u00b6 If you are using WordOps to host some sites, you have to understand server maintenance is a regular and required task to perform.","title":"WordOps server maintenance"},{"location":"how-to/wordops-server-maintenance/#wordops-server-maintenance","text":"If you are using WordOps to host some sites, you have to understand server maintenance is a regular and required task to perform.","title":"WordOps server maintenance"},{"location":"how-to/wp-language/","text":"How to set default language for WordPress install \u00b6 WordOps uses WP-CLI to install and perform other tasks on WordPress blogs. The default language for new blogs is en_US but it can be easily adapted to any other locale. WP-CLI expects a configuration file to be placed on ~/.wp-cli/config.yml . We won't cover all its possibilities right now, only the configuration required to customize the localisation. For example, in order to have WordPress in Brazilian Portuguese the config.yml file would be: core download : locale : pt_BR Caveats \u00b6 There is a \"caveat\" one should be aware of: when a new version os WordPress is released it usually does not have translations for all possible locales. Setting up a configuration file like the suggestion above might lead to WP-CLI (thus WordOps) to behave inconsistently. How to change locale of a blog already installed \u00b6 In order to avoid such inconsistence, perhaps it's wiser to install WP in en_US as usual, then later change its locale. The root user would do: cd /var/www/example.com/htdocs wp language core install pt_BR --activate --allow-root","title":"Set WordPress language"},{"location":"how-to/wp-language/#how-to-set-default-language-for-wordpress-install","text":"WordOps uses WP-CLI to install and perform other tasks on WordPress blogs. The default language for new blogs is en_US but it can be easily adapted to any other locale. WP-CLI expects a configuration file to be placed on ~/.wp-cli/config.yml . We won't cover all its possibilities right now, only the configuration required to customize the localisation. For example, in order to have WordPress in Brazilian Portuguese the config.yml file would be: core download : locale : pt_BR","title":"How to set default language for WordPress install"},{"location":"how-to/wp-language/#caveats","text":"There is a \"caveat\" one should be aware of: when a new version os WordPress is released it usually does not have translations for all possible locales. Setting up a configuration file like the suggestion above might lead to WP-CLI (thus WordOps) to behave inconsistently.","title":"Caveats"},{"location":"how-to/wp-language/#how-to-change-locale-of-a-blog-already-installed","text":"In order to avoid such inconsistence, perhaps it's wiser to install WP in en_US as usual, then later change its locale. The root user would do: cd /var/www/example.com/htdocs wp language core install pt_BR --activate --allow-root","title":"How to change locale of a blog already installed"},{"location":"security/recommendations/","text":"Security recommendations \u00b6 In this section, you will find few guides/tutorials about server security and what are the best ways to avoid security issues on your server(s)/site(s). Enable automatic installation of security upgrades \u00b6 Debian and Ubuntu provide an automated security upgrades service with the package automatic installation of security upgrades unattended-upgrades. You can enable automatic installation of security upgrades with the command: sudo dpkg-reconfigure -plow unattended-upgrades","title":"Security recommendations"},{"location":"security/recommendations/#security-recommendations","text":"In this section, you will find few guides/tutorials about server security and what are the best ways to avoid security issues on your server(s)/site(s).","title":"Security recommendations"},{"location":"security/recommendations/#enable-automatic-installation-of-security-upgrades","text":"Debian and Ubuntu provide an automated security upgrades service with the package automatic installation of security upgrades unattended-upgrades. You can enable automatic installation of security upgrades with the command: sudo dpkg-reconfigure -plow unattended-upgrades","title":"Enable automatic installation of security upgrades"},{"location":"troubleshooting/bug-reporting/","text":"Bug reporting guidelines \u00b6 You are facing an issue with WordOps ? Please ask you the following questions before opening an issue on Github or creating a post on the forum : Are you using the latest release of WordOps ? -> if not, update WordOps first and try again to see if your issue still exist. Is it a known issue ? -> use the search feature in the documentation, check the page common issues , and take a look in the forum posts and in Github issues to check if it's a known issue Have you checked the logs ? -> always check the content of /var/log/wo/wordops.log to check what is exactly the task which failed Is the issue directly related to WordOps ? -> for questions or support, please use the community forum. Then, if the issue still exist and if there is no solution or workaround available, feel free to open an issue on Github","title":"Bug reporting guidelines"},{"location":"troubleshooting/bug-reporting/#bug-reporting-guidelines","text":"You are facing an issue with WordOps ? Please ask you the following questions before opening an issue on Github or creating a post on the forum : Are you using the latest release of WordOps ? -> if not, update WordOps first and try again to see if your issue still exist. Is it a known issue ? -> use the search feature in the documentation, check the page common issues , and take a look in the forum posts and in Github issues to check if it's a known issue Have you checked the logs ? -> always check the content of /var/log/wo/wordops.log to check what is exactly the task which failed Is the issue directly related to WordOps ? -> for questions or support, please use the community forum. Then, if the issue still exist and if there is no solution or workaround available, feel free to open an issue on Github","title":"Bug reporting guidelines"},{"location":"troubleshooting/common-issues/","text":"Common issues \u00b6 The command wo update failed \u00b6 If you have any issue when you want to update WordOps, do not hesitate to use the initial install command : wget -qO wo wops.cc && sudo bash wo WordOps failed to issue SSL certificate \u00b6 If you are using DNS API validation : Make sure your API credentials has been properly saved by acme.sh in /etc/letsencrypt/config/account.conf Check acme.sh documentation about DNS API to see if there are changes with your DNS API Provider : https://github.com/Neilpang/acme.sh/wiki/dnsapi If you are using the default webroot validation : Make sure your domain is pointing to your server IP as well as www alias if it's not a subodmain If you are behind a load-balancer or a proxy, and need to force WO to issue a certificate even if the domain doesn't resolve your server IP, you can use the flag --force wo site update site.tld -le --force Then if you need to cleanup the previous SSL certificate, you can use the following command to remove existant certificates and keys, as well as other Nginx configurations for your domain: wo site update site.tld --letsencrypt = clean When I update a page, changes are not applied on the site \u00b6 If you are using Nginx fastcgi_cache, please make sure: Nginx-helper plugin is enabled the option \"purge cache\" is enabled in Settings > Nginx-Helper the caching method is defined on Nginx Fastcgi cache If you are using Redis-cache, please make sure: Nginx-helper plugin is enabled the option \"purge cache\" is enabled in Settings > Nginx-Helper the caching method is defined on Redis Cache the prefix defined is nginx-cache: WordOps commands are not working \u00b6 If the error output looks like: Traceback ( most recent call last ) : File \"/usr/local/bin/wo\" , line 6 , in <module> from pkg_resources import load_entry_point File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 3088 , in <module> @_call_aside File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 3072 , in _call_aside f ( *args, **kwargs ) File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 3101 , in _initialize_master_working_set working_set = WorkingSet._build_master () File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 574 , in _build_master ws.require ( __requires__ ) File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 892 , in require needed = self.resolve ( parse_requirements ( requirements )) File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 778 , in resolve raise DistributionNotFound ( req, requirers ) pkg_resources.DistributionNotFound: The 'wo==3.9.8.2' distribution was not found and is required by the application Just remove the executable /usr/local/bin/wo and reinstall WordOps: sudo rm -f /usr/local/bin/wo && wget -qO wo wops.cc && sudo bash wo If the issue still persist, open an issue on the GitHub repository.","title":"Common issues"},{"location":"troubleshooting/common-issues/#common-issues","text":"","title":"Common issues"},{"location":"troubleshooting/common-issues/#the-command-wo-update-failed","text":"If you have any issue when you want to update WordOps, do not hesitate to use the initial install command : wget -qO wo wops.cc && sudo bash wo","title":"The command wo update failed"},{"location":"troubleshooting/common-issues/#wordops-failed-to-issue-ssl-certificate","text":"If you are using DNS API validation : Make sure your API credentials has been properly saved by acme.sh in /etc/letsencrypt/config/account.conf Check acme.sh documentation about DNS API to see if there are changes with your DNS API Provider : https://github.com/Neilpang/acme.sh/wiki/dnsapi If you are using the default webroot validation : Make sure your domain is pointing to your server IP as well as www alias if it's not a subodmain If you are behind a load-balancer or a proxy, and need to force WO to issue a certificate even if the domain doesn't resolve your server IP, you can use the flag --force wo site update site.tld -le --force Then if you need to cleanup the previous SSL certificate, you can use the following command to remove existant certificates and keys, as well as other Nginx configurations for your domain: wo site update site.tld --letsencrypt = clean","title":"WordOps failed to issue SSL certificate"},{"location":"troubleshooting/common-issues/#when-i-update-a-page-changes-are-not-applied-on-the-site","text":"If you are using Nginx fastcgi_cache, please make sure: Nginx-helper plugin is enabled the option \"purge cache\" is enabled in Settings > Nginx-Helper the caching method is defined on Nginx Fastcgi cache If you are using Redis-cache, please make sure: Nginx-helper plugin is enabled the option \"purge cache\" is enabled in Settings > Nginx-Helper the caching method is defined on Redis Cache the prefix defined is nginx-cache:","title":"When I update a page, changes are not applied on the site"},{"location":"troubleshooting/common-issues/#wordops-commands-are-not-working","text":"If the error output looks like: Traceback ( most recent call last ) : File \"/usr/local/bin/wo\" , line 6 , in <module> from pkg_resources import load_entry_point File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 3088 , in <module> @_call_aside File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 3072 , in _call_aside f ( *args, **kwargs ) File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 3101 , in _initialize_master_working_set working_set = WorkingSet._build_master () File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 574 , in _build_master ws.require ( __requires__ ) File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 892 , in require needed = self.resolve ( parse_requirements ( requirements )) File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\" , line 778 , in resolve raise DistributionNotFound ( req, requirers ) pkg_resources.DistributionNotFound: The 'wo==3.9.8.2' distribution was not found and is required by the application Just remove the executable /usr/local/bin/wo and reinstall WordOps: sudo rm -f /usr/local/bin/wo && wget -qO wo wops.cc && sudo bash wo If the issue still persist, open an issue on the GitHub repository.","title":"WordOps commands are not working"}]}